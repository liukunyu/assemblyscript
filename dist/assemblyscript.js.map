{"version":3,"sources":["webpack://assemblyscript/webpack/universalModuleDefinition","webpack://assemblyscript/webpack/bootstrap","webpack://assemblyscript/./src/common.ts","webpack://assemblyscript/./src/diagnostics.ts","webpack://assemblyscript/./src/util/index.ts","webpack://assemblyscript/./src/ast.ts","webpack://assemblyscript/./src/program.ts","webpack://assemblyscript/./src/module.ts","webpack://assemblyscript/(webpack)/buildin/global.js","webpack://assemblyscript/./src/types.ts","webpack://assemblyscript/./src/tokenizer.ts","webpack://assemblyscript/./src/compiler.ts","webpack://assemblyscript/./src/diagnosticMessages.generated.ts","webpack://assemblyscript/./src/resolver.ts","webpack://assemblyscript/./src/glue/js/index.ts","webpack://assemblyscript/./src/glue/js/binaryen.js","webpack://assemblyscript/external \"binaryen\"","webpack://assemblyscript/./std/portable/index.js","webpack://assemblyscript/./src/glue/js/float.js","webpack://assemblyscript/./src/glue/js/i64.js","webpack://assemblyscript/./node_modules/long/src/long.js","webpack://assemblyscript/./src/builtins.ts","webpack://assemblyscript/./src/util/charcode.ts","webpack://assemblyscript/./src/util/path.ts","webpack://assemblyscript/./src/util/text.ts","webpack://assemblyscript/./src/util/binary.ts","webpack://assemblyscript/./src/index.ts","webpack://assemblyscript/./src/decompiler.ts","webpack://assemblyscript/./src/definitions.ts","webpack://assemblyscript/./src/parser.ts"],"names":["root","factory","exports","module","require","define","amd","self","this","__WEBPACK_EXTERNAL_MODULE__15__","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","CommonFlags","PATH_DELIMITER","PARENT_SUBST","GETTER_PREFIX","SETTER_PREFIX","INSTANCE_DELIMITER","STATIC_DELIMITER","INNER_DELIMITER","LIBRARY_SUBST","LIBRARY_PREFIX","FILESPACE_PREFIX","DiagnosticCategory","diagnosticMessages_generated_1","util_1","diagnosticMessages_generated_2","diagnosticCategoryToString","category","INFO","WARNING","ERROR","assert","diagnosticCategoryToColor","COLOR_BLUE","COLOR_YELLOW","COLOR_RED","DiagnosticCode","diagnosticCodeToString","COLOR_RESET","DiagnosticMessage","code","message","range","arg0","arg1","arg2","replace","createInfo","createWarning","createError","withRange","toString","source","normalizedPath","line","column","formatDiagnosticContext","useColors","text","len","length","start","end","isLineBreak","charCodeAt","sb","substring","push","join","formatDiagnosticMessage","showContext","DiagnosticEmitter","diagnostics","Array","emitDiagnostic","info","warning","error","__export","common_1","tokenizer_1","Token","Range","NodeKind","nodeIsConstantValue","kind","LITERAL","NULL","TRUE","FALSE","nodeIsCallable","IDENTIFIER","CALL","ELEMENTACCESS","PROPERTYACCESS","PARENTHESIZED","nodeIsGenericCallable","Node","parent","flags","NONE","is","flag","isAny","set","createType","typeArguments","isNullable","type","TypeNode","setParent","createOmittedType","createIdentifierExpression","createTypeParameter","extendsType","elem","TypeParameterNode","createParameter","initializer","ParameterNode","parameterKind","createSignature","parameters","returnType","explicitThisType","sig","SignatureNode","createDecorator","args","stmt","DecoratorNode","arguments","decoratorKind","decoratorNameToKind","createComment","node","CommentNode","commentKind","expr","IdentifierExpression","createEmptyIdentifierExpression","createArrayLiteralExpression","elements","ArrayLiteralExpression","elementExpressions","nodes","k","setParentIfNotNull","createAssertionExpression","assertionKind","expression","toType","AssertionExpression","createBinaryExpression","operator","left","right","BinaryExpression","createCallExpression","typeArgs","CallExpression","createClassExpression","declaration","ClassExpression","createCommaExpression","expressions","CommaExpression","createConstructorExpression","ConstructorExpression","createElementAccessExpression","element","ElementAccessExpression","elementExpression","createFalseExpression","FalseExpression","createFloatLiteralExpression","FloatLiteralExpression","createFunctionExpression","FunctionExpression","ARROW","createInstanceOfExpression","isType","InstanceOfExpression","createIntegerLiteralExpression","IntegerLiteralExpression","createNewExpression","NewExpression","createNullExpression","NullExpression","createObjectLiteralExpression","names","values","ObjectLiteralExpression","createParenthesizedExpression","ParenthesizedExpression","createPropertyAccessExpression","PropertyAccessExpression","createRegexpLiteralExpression","pattern","RegexpLiteralExpression","patternFlags","createTernaryExpression","condition","ifThen","ifElse","TernaryExpression","createStringLiteralExpression","StringLiteralExpression","createSuperExpression","SuperExpression","createThisExpression","ThisExpression","createTrueExpression","TrueExpression","createUnaryPostfixExpression","operand","UnaryPostfixExpression","createUnaryPrefixExpression","UnaryPrefixExpression","createBlockStatement","statements","BlockStatement","createBreakStatement","label","BreakStatement","createClassDeclaration","identifier","typeParameters","implementsTypes","members","decorators","ClassDeclaration","createContinueStatement","ContinueStatement","createDoStatement","statement","DoStatement","createEmptyStatement","EmptyStatement","createEnumDeclaration","EnumDeclaration","createEnumValueDeclaration","EnumValueDeclaration","createExportStatement","path","ExportStatement","normalizePath","startsWith","resolvePath","internalPath","mangleInternalPath","createExportImportStatement","externalName","ExportImportStatement","createExportMember","ExportMember","createExpressionStatement","ExpressionStatement","createIfStatement","ifTrue","ifFalse","IfStatement","createImportStatement","decls","ImportStatement","declarations","namespaceName","createImportStatementWithWildcard","createImportDeclaration","ImportDeclaration","createInterfaceDeclaration","InterfaceDeclaration","createFieldDeclaration","FieldDeclaration","createForStatement","incrementor","ForStatement","createFunctionDeclaration","signature","body","FunctionDeclaration","createMethodDeclaration","MethodDeclaration","createNamespaceDeclaration","NamespaceDeclaration","createReturnStatement","ReturnStatement","createSwitchStatement","cases","SwitchStatement","createSwitchCase","SwitchCase","createThrowStatement","ThrowStatement","createTryStatement","catchVariable","catchStatements","finallyStatements","TryStatement","createTypeDeclaration","alias","TypeDeclaration","createVariableStatement","VariableStatement","createVariableDeclaration","VariableDeclaration","createVoidStatement","VoidStatement","createWhileStatement","WhileStatement","CommonTypeNode","_super","__extends","_this","apply","TYPE","TYPEPARAMETER","ParameterKind","PARAMETER","implicitFieldDeclaration","DecoratorKind","SIGNATURE","nameStr","BUILTIN","EXTERNAL","GLOBAL","INLINE","OPERATOR","SEALED","UNMANAGED","propStr","OPERATOR_BINARY","OPERATOR_PREFIX","OPERATOR_POSTFIX","CUSTOM","DECORATOR","CommentKind","COMMENT","Expression","LiteralKind","LiteralExpression","literalKind","ARRAY","AssertionKind","ASSERTION","BINARY","CLASS","COMMA","CONSTRUCTOR","FLOAT","FUNCTION","INSTANCEOF","INTEGER","NEW","OBJECT","REGEXP","TERNARY","STRING","SUPER","THIS","UnaryExpression","UNARYPOSTFIX","UNARYPREFIX","isLastStatement","BLOCK","FUNCTIONDECLARATION","METHODDECLARATION","SourceKind","Statement","Source","SOURCE","tokenizer","debugInfoIndex","exportPaths","sourceKind","pos","lastIndexOf","simplePath","ENTRY","LIBRARY","DeclarationStatement","cachedProgramLevelInternalName","cachedFileLevelInternalName","mangleInternalName","VARIABLE","NAMESPACEDECLARATION","EXPORT","isTopLevelExport","CLASSDECLARATION","STATIC","needsExplicitExport","member","VariableLikeDeclarationStatement","BREAK","CONTINUE","DO","EMPTY","ENUMDECLARATION","ENUMVALUEDECLARATION","EXPORTIMPORT","EXPORTMEMBER","EXPRESSION","FIELDDECLARATION","parameterIndex","FOR","IF","IMPORTDECLARATION","IMPORT","INTERFACEDECLARATION","RETURN","SWITCHCASE","SWITCH","THROW","TRY","TYPEDECLARATION","VARIABLEDECLARATION","VOID","WHILE","asGlobal","endsWith","findDecorator","decorator","OperatorKind","diagnostics_1","types_1","ast_1","module_1","resolver_1","QueuedImport","QueuedExport","TypeAlias","operatorKindFromDecorator","arg","INDEXED_GET","INDEXED_SET","UNCHECKED_INDEXED_GET","UNCHECKED_INDEXED_SET","ADD","SUB","MUL","POW","DIV","REM","BITWISE_AND","BITWISE_OR","BITWISE_XOR","EQ","NE","GT","GE","BITWISE_SHR","BITWISE_SHR_U","LT","LE","BITWISE_SHL","PLUS","PREFIX_INC","MINUS","PREFIX_DEC","NOT","BITWISE_NOT","POSTFIX_INC","POSTFIX_DEC","INVALID","ElementKind","DecoratorFlags","noTypesYet","Map","Program","diagnosticsOffset","elementsLookup","instancesLookup","typesLookup","typeAliases","fileLevelExports","moduleLevelExports","arrayBufferInstance","arrayPrototype","stringInstance","mainFunction","abortInstance","memoryAllocateInstance","hasGC","gcAllocateInstance","gcLinkInstance","gcMarkInstance","gcHeaderSize","gcHookOffset","resolver","Resolver","sources","getSource","lookupSourceByPath","normalizedPathWithoutExtension","tmp","initialize","options","Type","i8","i16","i32","i64","isizeType","u8","u16","u32","u64","usizeType","bool","f32","f64","void","setConstantInteger","i64_new","isWasm64","noTreeShaking","noAssert","memoryBase","optimizeLevelHint","shrinkLevelHint","hasFeature","queuedImports","queuedExports","queuedExtends","queuedImplements","filespace","Filespace","internalName","currentFilespace","j","initializeClass","initializeEnum","initializeExports","initializeFunction","initializeImports","initializeInterface","initializeNamespace","initializeTypeAlias","initializeVariables","queuedImport","tryLocateImport","localName","splice","externalNameAlt","Module_0_has_no_exported_member_1","queuedExports_1","__values","queuedExports_1_1","next","done","_c","__read","exportName","queuedExport","currentExport","isReExport","setExportAndCheckLibrary","Cannot_find_name_0","derivedPrototype","derivedDeclaration","derivedType","baseElement","resolveIdentifier","CLASS_PROTOTYPE","basePrototype","A_class_may_only_extend_another_class","globalAliases","globalAliases_1","globalAliases_1_1","_d","Error","has","resolveClass","instance","Duplicate_identifier_0","programLevelInternalName","FUNCTION_PROTOTYPE","startFunction","GENERIC","AMBIENT","MAIN","resolveFunction","parameterTypes","signatureReference","byteSize","globalName","Global","withConstantIntegerValue","setConstantFloat","withConstantFloatValue","queuedNamedExports","checkDecorators","acceptedFlags","presentFlags","decoratorKindToFlag","isLibrary","Decorator_0_is_not_valid_here","Duplicate_decorator","checkGlobal","parentNode","hasDecorator","namespace","fileLevelInternalName","simpleName","ClassPrototype","numImplementsTypes","Unmanaged_classes_cannot_implement_interfaces","Operation_not_supported","MODULE_EXPORT","Export_declaration_conflicts_with_exported_declaration_of_0","isEntry","existingExport","memberDeclarations","memberDeclaration","initializeField","GET","SET","initializeAccessor","initializeMethod","classPrototype","isInterface","INTERFACE_PROTOTYPE","staticField","READONLY","ABSTRACT","instanceMembers","instanceField","FieldPrototype","decoratorFlags","FunctionPrototype","constructorPrototype","Multiple_constructor_implementations_are_not_allowed","checkOperatorOverloads","numArgs","firstArg","overloads","overloadPrototypes","Duplicate_function_implementation","operatorKind","String_literal_expected","Expected_0_arguments_but_got_1","internalPropertyName","propertyElement","isGetter","isNew","PROPERTY","getterPrototype","setterPrototype","Property","baseName","staticName","staticPrototype","instanceName","instancePrototype","Enum","initializeEnumValue","enm","EnumValue","initializeExport","externalIdentifier","prefix","FILESPACE","referencedName","referencedElement","seen","Set","add","initializeImport","indexPart","InterfacePrototype","parentNamespace","Namespace","Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local","existingExport_1","global_1","CONST","Element","program","NAMESPACE","ENUM","ENUMVALUE","constantValue","ConstantValueKind","VariableLikeElement","constantValueKind","constantIntegerValue","INLINED","constantFloatValue","Parameter","Local","index","LOCAL","scopedGlobal","instances","classTypeArguments","Function","contextualTypeArguments","localsByName","localsByIndex","additionalLocals","breakContext","debugLocations","ref","functionTableIndex","trampoline","outerScope","nextBreakId","breakStack","nextInlineId","tempI32s","tempI64s","tempF32s","tempF64s","localIndex","INSTANCE","local","thisType","inheritedTypeArguments","inheritedTypeArguments_1","inheritedTypeArguments_1_1","_b","inheritedName","inheritedType","parameterType","parameterName","getParameterName","flow","Flow","addLocal","getTempLocal","wrapped","temps","toNativeType","pop","setLocalWrapped","freeTempLocal","getAndFreeTempLocal","enterBreakContext","id","leaveBreakContext","finalize","sourceMap","debugLocation","setDebugLocation","debugInfoRef","FunctionTarget","FUNCTION_TARGET","toSignatureString","asFunction","FIELD_PROTOTYPE","Field","FIELD","memoryOffset","Class","base","currentMemoryOffset","constructorInstance","gcHookIndex","asClass","inheritedTypeArguments_2","inheritedTypeArguments_2_1","baseType","isAssignableTo","target","current","lookupOverload","unchecked","uncheckedOverload","overload","offsetof","fieldName","field","Interface","INTERFACE","FlowFlags","scopedLocals","currentFunction","parentFlow","continueLabel","breakLabel","returnLabel","wrappedLocals","wrappedLocalsExt","unset","fork","branch","slice","free","scopedLocal","SCOPED","addScopedLocal","existingLocal","addScopedLocalAlias","scopedAlias","getScopedLocal","isLocalWrapped","map","ext","i64_ne","i64_and","i64_shl","i64_one","i64_zero","off","i64_or","i64_not","inherit","other","inheritConditional","inheritMutual","leftExt","rightExt","thisExt","minLength","min","canOverflow","getExpressionId","ExpressionId","GetLocal","getGetLocalIndex","canConversionOverflow","SetLocal","isTeeLocal","getSetLocalValue","GetGlobal","Binary","getBinaryOp","BinaryOp","EqI32","EqI64","EqF32","EqF64","NeI32","NeI64","NeF32","NeF64","LtI32","LtU32","LtI64","LtU64","LtF32","LtF64","LeI32","LeU32","LeI64","LeU64","LeF32","LeF64","GtI32","GtU32","GtI64","GtU64","GtF32","GtF64","GeI32","GeU32","GeI64","GeU64","GeF32","GeF64","MulI32","getBinaryLeft","Const","getConstValueI32","getBinaryRight","AndI32","computeSmallIntegerMask","ShlI32","shift","size","ShrI32","ShrU32","DivU32","RemI32","RemU32","Unary","getUnaryOp","UnaryOp","EqzI32","EqzI64","ClzI32","CtzI32","PopcntI32","getExpressionType","getConstValueI64Low","getConstValueF32","getConstValueF64","MIN_VALUE","MAX_VALUE","Load","fromType","getLoadBytes","isLoadSigned","Block","getBlockName","getBlockChildCount","last","getBlockChild","If","getIfTrue","getIfFalse","Select","getSelectThen","getSelectElse","Call","getCallTarget","Unreachable","fromSize","toSize","compiler_1","NativeType","_BinaryenInvalidId","_BinaryenBlockId","_BinaryenIfId","_BinaryenLoopId","_BinaryenBreakId","_BinaryenSwitchId","_BinaryenCallId","_BinaryenCallIndirectId","_BinaryenGetLocalId","_BinaryenSetLocalId","_BinaryenGetGlobalId","_BinaryenSetGlobalId","_BinaryenLoadId","_BinaryenStoreId","_BinaryenConstId","_BinaryenUnaryId","_BinaryenBinaryId","_BinaryenSelectId","_BinaryenDropId","_BinaryenReturnId","_BinaryenHostId","_BinaryenNopId","_BinaryenUnreachableId","_BinaryenAtomicCmpxchgId","_BinaryenAtomicRMWId","_BinaryenAtomicWaitId","_BinaryenAtomicWakeId","_BinaryenClzInt32","_BinaryenCtzInt32","_BinaryenPopcntInt32","_BinaryenNegFloat32","_BinaryenAbsFloat32","_BinaryenCeilFloat32","_BinaryenFloorFloat32","_BinaryenTruncFloat32","_BinaryenNearestFloat32","_BinaryenSqrtFloat32","_BinaryenEqZInt32","_BinaryenClzInt64","_BinaryenCtzInt64","_BinaryenPopcntInt64","_BinaryenNegFloat64","_BinaryenAbsFloat64","_BinaryenCeilFloat64","_BinaryenFloorFloat64","_BinaryenTruncFloat64","_BinaryenNearestFloat64","_BinaryenSqrtFloat64","_BinaryenEqZInt64","_BinaryenExtendSInt32","_BinaryenExtendUInt32","_BinaryenWrapInt64","_BinaryenTruncSFloat32ToInt32","_BinaryenTruncSFloat32ToInt64","_BinaryenTruncUFloat32ToInt32","_BinaryenTruncUFloat32ToInt64","_BinaryenTruncSFloat64ToInt32","_BinaryenTruncSFloat64ToInt64","_BinaryenTruncUFloat64ToInt32","_BinaryenTruncUFloat64ToInt64","_BinaryenReinterpretFloat32","_BinaryenReinterpretFloat64","_BinaryenConvertSInt32ToFloat32","_BinaryenConvertSInt32ToFloat64","_BinaryenConvertUInt32ToFloat32","_BinaryenConvertUInt32ToFloat64","_BinaryenConvertSInt64ToFloat32","_BinaryenConvertSInt64ToFloat64","_BinaryenConvertUInt64ToFloat32","_BinaryenConvertUInt64ToFloat64","_BinaryenPromoteFloat32","_BinaryenDemoteFloat64","_BinaryenReinterpretInt32","_BinaryenReinterpretInt64","_BinaryenExtendS8Int32","_BinaryenExtendS16Int32","_BinaryenExtendS8Int64","_BinaryenExtendS16Int64","_BinaryenExtendS32Int64","_BinaryenAddInt32","_BinaryenSubInt32","_BinaryenMulInt32","_BinaryenDivSInt32","_BinaryenDivUInt32","_BinaryenRemSInt32","_BinaryenRemUInt32","_BinaryenAndInt32","_BinaryenOrInt32","_BinaryenXorInt32","_BinaryenShlInt32","_BinaryenShrUInt32","_BinaryenShrSInt32","_BinaryenRotLInt32","_BinaryenRotRInt32","_BinaryenEqInt32","_BinaryenNeInt32","_BinaryenLtSInt32","_BinaryenLtUInt32","_BinaryenLeSInt32","_BinaryenLeUInt32","_BinaryenGtSInt32","_BinaryenGtUInt32","_BinaryenGeSInt32","_BinaryenGeUInt32","_BinaryenAddInt64","_BinaryenSubInt64","_BinaryenMulInt64","_BinaryenDivSInt64","_BinaryenDivUInt64","_BinaryenRemSInt64","_BinaryenRemUInt64","_BinaryenAndInt64","_BinaryenOrInt64","_BinaryenXorInt64","_BinaryenShlInt64","_BinaryenShrUInt64","_BinaryenShrSInt64","_BinaryenRotLInt64","_BinaryenRotRInt64","_BinaryenEqInt64","_BinaryenNeInt64","_BinaryenLtSInt64","_BinaryenLtUInt64","_BinaryenLeSInt64","_BinaryenLeUInt64","_BinaryenGtSInt64","_BinaryenGtUInt64","_BinaryenGeSInt64","_BinaryenGeUInt64","_BinaryenAddFloat32","_BinaryenSubFloat32","_BinaryenMulFloat32","_BinaryenDivFloat32","_BinaryenCopySignFloat32","_BinaryenMinFloat32","_BinaryenMaxFloat32","_BinaryenEqFloat32","_BinaryenNeFloat32","_BinaryenLtFloat32","_BinaryenLeFloat32","_BinaryenGtFloat32","_BinaryenGeFloat32","_BinaryenAddFloat64","_BinaryenSubFloat64","_BinaryenMulFloat64","_BinaryenDivFloat64","_BinaryenCopySignFloat64","_BinaryenMinFloat64","_BinaryenMaxFloat64","_BinaryenEqFloat64","_BinaryenNeFloat64","_BinaryenLtFloat64","_BinaryenLeFloat64","_BinaryenGtFloat64","_BinaryenGeFloat64","HostOp","_BinaryenCurrentMemory","_BinaryenGrowMemory","AtomicRMWOp","_BinaryenAtomicRMWAdd","_BinaryenAtomicRMWSub","_BinaryenAtomicRMWAnd","_BinaryenAtomicRMWOr","_BinaryenAtomicRMWXor","_BinaryenAtomicRMWXchg","MemorySegment","buffer","offset","segment","Module","cachedTemporaryName","hasTemporaryFunction","cachedPrecomputeName","cachedPrecomputeNames","_BinaryenModuleCreate","cachedByValue","memory","allocate","createFrom","cArr","allocU8Array","_BinaryenModuleRead","changetype","addFunctionType","result","paramTypes","cStr","allocString","allocI32Array","_BinaryenAddFunctionType","getFunctionTypeBySignature","_BinaryenGetFunctionTypeBySignature","removeFunctionType","_BinaryenRemoveFunctionType","createI32","out","_BinaryenLiteralInt32","_BinaryenConst","createI64","valueLow","valueHigh","_BinaryenLiteralInt64","createF32","_BinaryenLiteralFloat32","createF64","_BinaryenLiteralFloat64","createUnary","op","_BinaryenUnary","createBinary","_BinaryenBinary","createHost","operands","allocPtrArray","_BinaryenHost","createGetLocal","_BinaryenGetLocal","createTeeLocal","_BinaryenTeeLocal","createGetGlobal","_BinaryenGetGlobal","createLoad","bytes","signed","ptr","_BinaryenLoad","createStore","_BinaryenStore","createAtomicLoad","_BinaryenAtomicLoad","createAtomicStore","_BinaryenAtomicStore","createAtomicRMW","_BinaryenAtomicRMW","createAtomicCmpxchg","expected","replacement","_BinaryenAtomicCmpxchg","createAtomicWait","timeout","expectedType","_BinaryenAtomicWait","createAtomicWake","wakeCount","_BinaryenAtomicWake","createSetLocal","_BinaryenSetLocal","createSetGlobal","_BinaryenSetGlobal","createBlock","children","_BinaryenBlock","createBreak","_BinaryenBreak","createDrop","_BinaryenDrop","createLoop","_BinaryenLoop","createIf","_BinaryenIf","createNop","_BinaryenNop","createReturn","_BinaryenReturn","createSelect","_BinaryenSelect","createSwitch","defaultName","numNames","strs","_BinaryenSwitch","createCall","_BinaryenCall","createCallIndirect","typeName","_BinaryenCallIndirect","createUnreachable","_BinaryenUnreachable","addGlobal","mutable","_BinaryenAddGlobal","removeGlobal","_BinaryenRemoveGlobal","addFunction","varTypes","_BinaryenAddFunction","removeFunction","_BinaryenRemoveFunction","addTemporaryFunction","tempName","typeRef","removeTemporaryFunction","addFunctionExport","cStr1","cStr2","_BinaryenAddFunctionExport","addTableExport","_BinaryenAddTableExport","addMemoryExport","_BinaryenAddMemoryExport","addGlobalExport","_BinaryenAddGlobalExport","removeExport","_BinaryenRemoveExport","addFunctionImport","externalModuleName","externalBaseName","functionType","cStr3","_BinaryenAddFunctionImport","addTableImport","_BinaryenAddTableImport","addMemoryImport","_BinaryenAddMemoryImport","addGlobalImport","globalType","_BinaryenAddGlobalImport","setMemory","initial","maximum","segments","segs","offs","sizs","Target","WASM64","i64_low","i64_high","cArr1","cArr2","cArr3","_BinaryenSetMemory","setFunctionTable","funcs","_BinaryenSetFunctionTable","setStart","func","_BinaryenSetStart","getOptimizeLevel","_BinaryenGetOptimizeLevel","setOptimizeLevel","level","_BinaryenSetOptimizeLevel","getShrinkLevel","_BinaryenGetShrinkLevel","setShrinkLevel","_BinaryenSetShrinkLevel","setDebugInfo","on","_BinaryenSetDebugInfo","optimize","_BinaryenFunctionOptimize","_BinaryenModuleOptimize","runPasses","passes","_BinaryenFunctionRunPasses","_BinaryenModuleRunPasses","precomputeExpression","previousOptimizeLevel","previousShrinkLevel","previousDebugInfo","_BinaryenGetDebugInfo","_BinaryenExpressionGetType","_BinaryenFunctionGetBody","validate","_BinaryenModuleValidate","interpret","_BinaryenModuleInterpret","toBinary","sourceMapUrl","binaryPtr","sourceMapPtr","_BinaryenModuleAllocateAndWrite","readInt","binaryBytes","ret","BinaryModule","output","Uint8Array","load","readBuffer","readString","toText","toAsmjs","dispose","_BinaryenModuleDispose","createRelooper","Relooper","cloneExpression","noSideEffects","maxDepth","nested1","nested2","_BinaryenExpressionGetId","_BinaryenConstGetValueI32","_BinaryenConstGetValueI64Low","_BinaryenConstGetValueI64High","_BinaryenConstGetValueF32","_BinaryenConstGetValueF64","_BinaryenGetLocalGetIndex","_BinaryenGetGlobalGetName","_BinaryenLoadGetPtr","_BinaryenLoadIsAtomic","_BinaryenLoadGetBytes","_BinaryenLoadGetOffset","_BinaryenLoadIsSigned","_BinaryenLoadGetAlign","_BinaryenUnaryGetValue","_BinaryenUnaryGetOp","_BinaryenBinaryGetLeft","_BinaryenBinaryGetRight","_BinaryenBinaryGetOp","addDebugInfoFile","_BinaryenModuleAddDebugInfoFileName","getDebugInfoFile","_BinaryenModuleGetDebugInfoFileName","fileIndex","lineNumber","columnNumber","_BinaryenFunctionSetDebugLocation","MAX_MEMORY_WASM32","MAX_MEMORY_WASM64","getConstValueI64High","getSetLocalIndex","_BinaryenSetLocalGetIndex","_BinaryenSetLocalGetValue","_BinaryenSetLocalIsTee","getUnaryValue","getLoadOffset","getLoadPtr","getStoreBytes","_BinaryenStoreGetBytes","getStoreOffset","_BinaryenStoreGetOffset","getStorePtr","_BinaryenStoreGetPtr","getStoreValue","_BinaryenStoreGetValue","_BinaryenBlockGetName","_BinaryenBlockGetNumChildren","_BinaryenBlockGetChild","getIfCondition","_BinaryenIfGetCondition","_BinaryenIfGetIfTrue","_BinaryenIfGetIfFalse","getLoopName","_BinaryenLoopGetName","getLoopBody","_BinaryenLoopGetBody","getBreakName","_BinaryenBreakGetName","getBreakCondition","_BinaryenBreakGetCondition","_BinaryenSelectGetIfTrue","_BinaryenSelectGetIfFalse","getSelectCondition","_BinaryenSelectGetCondition","getDropValue","_BinaryenDropGetValue","getReturnValue","_BinaryenReturnGetValue","_BinaryenCallGetTarget","getHostOp","_BinaryenHostGetOp","getHostOperandCount","_BinaryenHostGetNumOperands","getHostOperand","_BinaryenHostGetOperand","getHostName","_BinaryenHostGetNameOperand","getFunctionBody","getFunctionName","_BinaryenFunctionGetName","getFunctionParamCount","_BinaryenFunctionGetNumParams","getFunctionParamType","_BinaryenFunctionGetParam","getFunctionResultType","_BinaryenFunctionGetResult","relooper","_RelooperCreate","addBlock","_RelooperAddBlock","addBranch","from","to","_RelooperAddBranch","addBlockWithSwitch","_RelooperAddBlockWithSwitch","addBranchForSwitch","indexes","_RelooperAddBranchForSwitch","renderAndDispose","entry","labelHelper","_RelooperRenderAndDispose","u8s","numValues","idx","store","i32s","val","ptrs","str","u","stringLengthUTF8","cp","u1","u2","u3","u4","arr","String","fromCodePoints","needsExplicitUnreachable","Return","Break","numChildren","g","eval","e","window","program_1","TypeKind","TypeFlags","cachedNullableType","ceil","classReference","nonNullableType","isize64","isize32","usize64","usize32","isManaged","computeSmallIntegerShift","targetType","classType","asNullable","signednessIsRelevant","currentClass","targetClass","targetFunction","commonCompatible","signednessIsImportant","kindOnly","toNativeZero","toNativeOne","toNativeNegOne","typesToNativeTypes","types","numTypes","typesToString","Signature","cachedFunctionTarget","parameterNames","requiredParameters","hasRest","getDefaultParameterName","thisThisType","targetThisType","thisParameterTypes","targetParameterTypes","numParameters","thisParameterType","targetParameterType","thisReturnType","targetReturnType","makeSignatureString","includeThis","optionalStart","restIndex","cachedDefaultParameterNames","IdentifierHandling","tokenFromKeyword","AS","ASYNC","AWAIT","CASE","CATCH","DEBUGGER","DECLARE","DEFAULT","DELETE","ELSE","EXTENDS","FINALLY","FROM","IMPLEMENTS","IN","IS","KEYOF","LET","MODULE","OF","PACKAGE","PRIVATE","PROTECTED","PUBLIC","TYPEOF","VAR","WITH","YIELD","tokenIsAlsoIdentifier","token","operatorTokenToString","DOT_DOT_DOT","LESSTHAN","GREATERTHAN","LESSTHAN_EQUALS","GREATERTHAN_EQUALS","EQUALS_EQUALS","EXCLAMATION_EQUALS","EQUALS_EQUALS_EQUALS","EXCLAMATION_EQUALS_EQUALS","ASTERISK_ASTERISK","ASTERISK","SLASH","PERCENT","PLUS_PLUS","MINUS_MINUS","LESSTHAN_LESSTHAN","GREATERTHAN_GREATERTHAN","GREATERTHAN_GREATERTHAN_GREATERTHAN","AMPERSAND","BAR","CARET","EXCLAMATION","TILDE","AMPERSAND_AMPERSAND","BAR_BAR","EQUALS","PLUS_EQUALS","MINUS_EQUALS","ASTERISK_EQUALS","ASTERISK_ASTERISK_EQUALS","SLASH_EQUALS","PERCENT_EQUALS","LESSTHAN_LESSTHAN_EQUALS","GREATERTHAN_GREATERTHAN_EQUALS","GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS","AMPERSAND_EQUALS","BAR_EQUALS","CARET_EQUALS","a","b","Tokenizer","tokenPos","nextToken","nextTokenPos","nextTokenOnNewLine","onComment","identifierHandling","unsafeNext","maxTokenLength","STRINGLITERAL","OPENPAREN","CLOSEPAREN","isDecimalDigit","FLOATLITERAL","DOT","commentStartPos","LINE","TRIPLE","closed","_0_expected","testInteger","INTEGERLITERAL","COLON","SEMICOLON","EQUALS_GREATERTHAN","QUESTION","OPENBRACKET","CLOSEBRACKET","OPENBRACE","CLOSEBRACE","AT","isIdentifierStart","isKeywordCharacter","posBefore","isIdentifierPart","keywordToken","ALWAYS","PREFER","isWhiteSpace","Invalid_character","ENDOFFILE","peek","checkOnNewLine","maxCompoundLength","tokenBefore","tokenPosBefore","skipIdentifier","skip","skipIdentifierName","mark","state","reusableState","State","discard","reset","readIdentifier","quote","Unterminated_string_literal","readEscapeSequence","Unexpected_end_of_text","readExtendedUnicodeEscape","readUnicodeEscape","fromCharCode","readRegexpPattern","escaped","Unterminated_regular_expression_literal","readRegexpFlags","Invalid_regular_expression_flags","readInteger","readHexInteger","readBinaryInteger","readOctalInteger","isOctalDigit","Octal_literals_are_not_allowed_in_strict_mode","readDecimalInteger","i64_16","sepEnd","i64_add","i64_mul","Numeric_separators_are_not_allowed_here","Multiple_consecutive_numeric_separators_are_not_permitted","Hexadecimal_digit_expected","i64_10","Digit_expected","i64_8","Octal_digit_expected","i64_2","i64_1","Binary_digit_expected","readFloat","readDecimalFloat","parseFloat","readHexFloat","remain","value32","invalid","An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive","Unterminated_Unicode_escape_sequence","finish","builtins_1","Options","WASM32","importMemory","importTable","features","feature","Feature","ConversionKind","WrapMode","mangleImportName_moduleName","mangleImportName_elementName","Compiler","currentOuterFunction","currentInlineFunctions","currentEnum","currentType","memorySegments","stringSegments","functionTable","argcVar","argcSet","needsIterateRoots","f32ModInstance","f64ModInstance","f32PowInstance","f64PowInstance","max","compile","startFunctionInstance","startFunctionBody","compileSource","funcRef","ensureFunctionType","i64_align","numPages","i64_shr_u","moduleExport","makeModuleExport","compileIterateRoots","subPrefix","_e","_f","_g","_h","Cannot_export_a_mutable_global","ensureTrampoline","ensureArgcSet","COMPILED","setter","nativeType","nativeSizeType","getterName","setterName","_j","_k","fullName","_l","_m","ctor","compileSourceByPath","reportNode","File_0_not_found","isGeneric","compileClassDeclaration","compileEnumDeclaration","compileFunctionDeclaration","compileNamespaceDeclaration","variableInit","compileVariableStatement","compileExportStatement","previousFunction","compileStatement","compileGlobalDeclaration","compileGlobal","global","initExpr","resolvedType","resolveType","Type_expected","atEnd","compileExpressionRetainType","Type_0_is_not_assignable_to_type_1","isDeclaredConstant","MODULE_IMPORT","mangleImportName","initializeInStart","compileExpression","Compiling_constant_with_non_constant_initializer_as_mutable","compileEnum","previousValue","previousValueIsMut","initInStart","valueDeclaration","In_const_enum_declarations_member_initializer_must_be_constant_expression","Enum_member_must_have_initializer","AddI32","compileFunctionUsingTypeArguments","resolveFunctionInclTypeArguments","compileFunction","resultType","An_implementation_cannot_be_declared_in_ambient_contexts","Function_implementation_is_missing_or_not_immediately_following_the_declaration","isConstructor","stmts","compileStatements","unshift","makeConditionalAllocate","A_function_whose_declared_type_is_not_void_must_return_a_value","compileInterfaceDeclaration","compileNamespace","compileClassUsingTypeArguments","alternativeReportNode","resolveClassInclTypeArguments","compileClass","staticMembers","ctorInstance","addMemorySegment","alignment","ensureFunctionTableEntry","TRAMPOLINE","compileBlockStatement","compileBreakStatement","compileContinueStatement","compileDoStatement","compileEmptyStatement","compileExpressionStatement","compileForStatement","compileIfStatement","compileReturnStatement","compileSwitchStatement","compileThrowStatement","compileTryStatement","compileVoidStatement","compileWhileStatement","addDebugLocation","numStatements","Nop","A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement","A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement","condExpr","makeIsTrueish","terminated","block","repeatLabel","alwaysTrue","condPre","incrExpr","bodyStatement","bodyExpr","usesContinue","breakBlock","repeatBlock","GENERIC_CONTEXT","condExprPrecomp","ifTrueFlow","ifTrueExpr","ifFalseExpr","ifFalseFlow","numCases","context","tempLocal","tempLocalIndex","breaks","breakIndex","defaultIndex","currentBlock","alwaysReturns","alwaysReturnsWrapped","alwaysThrows","alwaysAllocates","isLast","nextLabel","count","compileAbort","isKnownGlobal","numDeclarations","initializers","isInlined","_const_declarations_must_be_initialized","compileAssignmentWithValue","compileInlineConstant","contextualType","retainType","mask","conversionKind","wrapMode","compileAssertionExpression","compileBinaryExpression","compileCallExpression","compileCommaExpression","compileElementAccessExpression","compileFunctionExpression","compileIdentifierExpression","compileInstanceOfExpression","compileLiteralExpression","compileNewExpression","compileParenthesizedExpression","compilePropertyAccessExpression","compileTernaryExpression","compileUnaryPostfixExpression","compileUnaryPrefixExpression","convertExpression","ensureSmallIntegerWrap","Conversion_from_type_0_to_1_requires_an_explicit_cast","PromoteF32","DemoteF64","TruncF32ToI64","TruncF32ToI32","TruncF32ToU64","TruncF32ToU32","TruncF64ToI64","TruncF64ToI32","TruncF64ToU64","TruncF64ToU32","ConvertI64ToF32","ConvertU64ToF32","ConvertI32ToF32","ConvertU32ToF32","ConvertI64ToF64","ConvertU64ToF64","ConvertI32ToF64","ConvertU32ToF64","WrapI64","ExtendI32","ExtendU32","leftExpr","leftType","rightExpr","rightType","commonType","compound","compileBinaryOverload","Operator_0_cannot_be_applied_to_types_1_and_2","compileAssignment","AddI64","AddF32","AddF64","SubI32","SubI64","SubF32","SubF64","MulI64","MulF32","MulF64","makeCallDirect","DivI32","DivI64","DivU64","DivF32","DivF64","RemI64","RemU64","intType","ShlI64","The_0_operator_cannot_be_applied_to_type_1","ShrI64","ShrU64","AndI64","OrI32","OrI64","XorI32","XorI64","compileUnaryOverload","operatorInstance","valueExpr","argumentExpressions","thisArg","compileCallDirect","valueExpression","resolveExpression","Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property","currentElementExpression","isUnchecked","indexedSet","Index_signature_in_type_0_only_permits_reading","Index_signature_is_missing_in_type_0","valueWithCorrectType","tee","thisExpression","currentThisExpression","thisExpr","setterInstance","getterInstance","nativeReturnType","indexedGet","elementExpr","tempLocalTarget","tempLocalElement","indexArg","compileCallExpressionBuiltin","Type_0_is_not_generic","inferredTypes","numTypeParameters","numParameterTypes","numArguments","argumentExprs","typeNode","argumentExpression","inferredType","concreteType","resolvedTypeArguments","Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures","compileGetter","compileCallIndirect","typeArgumentNodes","resolveTypeArguments","compileCall","checkCallSignature","hasThis","minimum","Expected_at_least_0_arguments_but_got_1","inline","includes","compileCallInlineUnchecked","Function_0_cannot_be_inlined_into_itself","numArgumentsInclThis","previousFlow","thisLocal","paramExpr","argumentLocal","original","originalSignature","originalName","originalParameterTypes","originalParameterDeclarations","commonReturnType","commonThisType","isInstance","minArguments","minOperands","maxArguments","maxOperands","numOptional","forwardedOperands","operandIndex","trampolineSignature","trampolineName","ofN","Optional_parameter_must_have_an_initializer","ensureArgcVar","numOperands","isCallImport","parameterNodes","allOptionalsAreConstant","makeCallIndirect","numExpressions","exprs","resolveElementAccess","retainConstantType","scopedThis","_this_cannot_be_referenced_in_current_location","superType","_super_can_only_be_referenced_in_a_derived_class","localType","A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums","implicitNegate","compileArrayLiteral","floatValue","intValue","i64_sub","i64_is_i8","i64_is_u8","i64_is_i16","i64_is_u16","i64_is_i32","i64_is_u32","i64_is_bool","i64_is_f32","i64_to_f32","i64_is_f64","i64_to_f64","compileStringLiteral","compileObjectLiteral","ensureStaticString","stringValue","stringSegment","headerSize","totalSize","buf","writeI32","ensureGCHook","writeI16","stringOffset","ensureStaticArray","elementType","byteLength","usizeTypeSize","bufferInstance","bufferHeaderSize","bufferTotalSize","clz","writeI8","writeI64","writeF32","writeF64","bufferOffset","arrayInstance","arrayHeaderSize","arrayOffset","isConst","compiledValues","constantValues","nativeElementType","isStatic","arrayType","nativeArrayType","Constructor_of_class_0_must_not_require_any_arguments","Constructor_of_class_0_is_private_and_only_accessible_within_the_class_declaration","Constructor_of_class_0_is_protected_and_only_accessible_within_the_class_declaration","hasErrors","Property_0_does_not_exist_on_type_1","compileAllocate","Cannot_use_new_with_an_expression_whose_type_lacks_a_construct_signature","classInstance","currentClassInstance","makeAllocate","propertyAccess","resolvePropertyAccess","Cannot_access_method_0_without_calling_it_as_it_requires_this_to_be_set","ifThenFlow","ifThenExpr","ifThenType","ifElseFlow","ifElseExpr","ifElseType","getValue","nativeOne","setValue","NegF32","NegF64","makeIsFalseish","ExtendI8ToI32","ExtendI16ToI32","fieldType","nativeFieldType","fieldDeclaration","ReportMode","reportMode","REPORT","resolveSignature","numTypeArguments","paramType","instanceKey","placeholderType","parameterTypeNodes","parameterTypeNode","REST","returnTypeNode","parameterCount","argumentCount","Expected_0_type_arguments_but_got_1","contextualFunction","targetExpression","propertyName","elementAccess","explicitLocal","functionTarget","classTypeParameters","numClassTypeParameters","numFunctionTypeArguments","signatureNode","functionTypeParameters","signatureParameters","signatureParameterCount","parameterDeclaration","resolveFunctionPartially","partialKey","partialPrototype","expectedTypeArguments","actualTypeArguments","baseClass","baseClassType","Class_0_is_sealed_and_cannot_be_extended","Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa","inheritedMember","constructorPartial","baseField","fieldInstance","instanceProperty","partialGetterPrototype","partialSetterPrototype","overloadPrototype","operatorPartial","typeParameterNodes","binaryen","emitText","emitAsmjs","Binaryen","__memory_allocate","_malloc","__memory_free","_free","__memory_copy","_memmove","__store","HEAPU8","__load","globalScope","UnreachableError","captureStackTrace","stack","AssertionError","ASC_TARGET","defineProperties","writable","Math","fround","MIN_POSITIVE_VALUE","MIN_SAFE_INTEGER","MAX_SAFE_INTEGER","EPSILON","clz32","abs","floor","trunc","round","sqrt","x","y","sign","isTrueish","radix","parseInt","undefined","fromCodePoint","Number","isInteger","isArray","HEAP","HEAP_OFFSET","oldHeap","copy","dest","src","copyWithin","F64","Float64Array","F32","Float32Array","I32","Int32Array","f32_as_i32","i32_as_f32","f64_as_i64","i64_as_f64","Long","ZERO","ONE","lo","hi","fromBits","low","high","sub","mul","i64_div","div","i64_div_u","toUnsigned","toSigned","i64_rem","mod","i64_rem_u","and","or","i64_xor","xor","shl","i64_shr","shr","shru","not","i64_eq","eq","ne","fromInt","minSafeF32","fromNumber","maxSafeF32","gte","lte","minSafeF64","maxSafeF64","toNumber","i64_to_string","unsigned","wasm","WebAssembly","Instance","isLong","obj","__isLong__","INT_CACHE","UINT_CACHE","cachedObj","cache","isNaN","UZERO","TWO_PWR_64_DBL","MAX_UNSIGNED_VALUE","TWO_PWR_63_DBL","neg","TWO_PWR_32_DBL","lowBits","highBits","pow_dbl","pow","fromString","RangeError","indexOf","radixToPower","power","fromValue","TWO_PWR_16_DBL","TWO_PWR_24","UONE","NEG_ONE","LongPrototype","toInt","isZero","isNegative","radixLong","rem1","rem","remDiv","digits","getHighBits","getHighBitsUnsigned","getLowBits","getLowBitsUnsigned","getNumBitsAbs","bit","eqz","isPositive","isOdd","isEven","equals","notEquals","neq","lessThan","comp","lt","lessThanOrEqual","le","greaterThan","gt","greaterThanOrEqual","ge","compare","thisNeg","otherNeg","negate","addend","a48","a32","a16","a00","b48","b32","b16","c48","c32","c16","c00","subtract","subtrahend","multiply","multiplier","get_high","b00","divide","divisor","approx","res","div_u","div_s","log2","log","LN2","delta","approxRes","approxRem","modulo","rem_u","rem_s","shiftLeft","numBits","shiftRight","shiftRightUnsigned","shr_u","toBytes","toBytesLE","toBytesBE","fromBytes","fromBytesLE","fromBytesBE","compiler","evaluateConstantType","SWALLOW","expr_1","ClzI64","CtzI64","PopcntI64","RotlI32","RotlI64","RotrI32","RotrI64","AbsF32","AbsF64","tempLocal0","tempLocal1","MaxF32","MaxF64","MinF32","MinF64","CeilF32","CeilF64","FloorF32","FloorF64","CopysignF32","CopysignF64","NearestF32","NearestF64","ReinterpretF32","ReinterpretF64","ReinterpretI32","ReinterpretI64","SqrtF32","SqrtF64","TruncF32","TruncF64","evaluateConstantOffset","alignLog2","Type_0_has_no_property_1","CurrentMemory","GrowMemory","abort","operandExprs","signatureParts","nativeParamTypes","operandType","User_defined_0","expr_2","deferASM","deferASMCall","typeArgument","valueType","existingIndex","gcPrototype","gcInstance","VIRTUAL","nativeSizeSize","baseInstance","funcName","allocateInstance","CharCode","lookupInUnicodeMap","unicodeIdentifierStart","isUnicodeIdentifierStart","unicodeIdentifierPart","isUnicodeIdentifierPart","mid","separator","ipos","dirname","origin","indentX1","indentX2","indentX4","indent","readI32","readI64","readI8","readI16","readF32","readF64","valueI64","decompiler_1","definitions_1","formatDiagnostic","parser_1","parseFile","parser","Parser","nextFile","nextDiagnostic","isInfo","isWarning","isError","createOptions","setTarget","setNoTreeShaking","setNoAssert","setImportMemory","setImportTable","setSourceMap","setMemoryBase","setGlobalAlias","FEATURE_SIGN_EXTENSION","FEATURE_MUTABLE_GLOBAL","enableFeature","setOptimizeLevelHints","optimizeLevel","shrinkLevel","finishParsing","compileProgram","decompileModule","decompiler","Decompiler","decompile","buildIDL","IDLBuilder","build","buildTSD","TSDBuilder","functionId","decompileFunction","nativeTypeToType","decompileExpression","nested","string","Loop","Switch","CallIndirect","SetGlobal","Store","Drop","Host","AtomicCmpxchg","AtomicRMW","AtomicWait","AtomicWake","ExportsWalker","includePrivate","todo","walk","visitElement","visitGlobal","visitEnum","visitFunctionInstances","visitClassInstances","visitField","prop","hasCompiledMember","visitNamespace","visitFunction","visitClass","indentLevel","typeToString","members_1","members_1_1","visitInterface","numMembers","members_2","members_2_1","backlog","seenlog","donelog","tryParseSignatureIsSignature","parseParametersThis","tn","parseTopLevelStatement","startPos","parseDecorator","skipStatement","exportStart","exportEnd","contextIsAmbient","A_declare_modifier_cannot_be_used_in_an_already_ambient_context","first","parseEnum","parseVariable","parseFunction","parseStatement","parseClassOrInterface","parseNamespace","parseExportImport","parseImport","parseTypeDeclaration","parseExport","_0_modifier_cannot_be_used_here","Decorators_are_not_valid_here","clear","parseType","acceptParenthesized","suppressErrors","isNullableSignature","tryParseSignature","Unexpected_token","innerType","Identifier_expected","nullable","parameter","bracketStart","bracketRange","isSignature","A_rest_parameter_cannot_be_optional","OPTIONAL","param","parseArguments","parseVariableDeclaration","parentFlags","parentDecorators","Initializers_are_not_allowed_in_ambient_contexts","parseExpression","parseEnumValue","parseReturn","parseTypeParameters","typeParameter","parseTypeParameter","Type_parameter_list_cannot_be_empty","parseParameters","seenRest","seenOptional","reportedRest","parseParameter","A_rest_parameter_must_be_last_in_a_parameter_list","A_required_parameter_cannot_follow_an_optional_parameter","isRest","isOptional","startRange","accessFlags","A_parameter_property_cannot_be_declared_using_a_rest_parameter","A_rest_parameter_cannot_have_an_initializer","Parameter_cannot_have_question_mark_and_initializer","signatureStart","isSetter","A_set_accessor_must_have_exactly_one_parameter","A_set_accessor_parameter_cannot_have_an_initializer","A_get_accessor_cannot_have_parameters","parseBlockStatement","parseFunctionExpression","isArrow","parseFunctionExpressionCommon","Interface_declaration_cannot_have_implements_clause","parseClassMember","parseClassExpression","staticStart","staticEnd","abstractStart","abstractEnd","readonlyStart","readonlyEnd","setEnd","typeParametersStart","Type_parameters_cannot_appear_on_a_constructor_declaration","An_accessor_cannot_have_type_parameters","Type_annotation_cannot_appear_on_a_constructor_declaration","A_set_accessor_cannot_have_a_return_type_annotation","Method_0_cannot_have_an_implementation_because_it_is_marked_abstract","retMethod","Constructor_implementation_is_missing","retField","parseExportMember","asIdentifier","skipFrom","parseImportDeclaration","topLevel","parseBreak","parseContinue","parseDoStatement","parseForStatement","parseIfStatement","A_return_statement_can_only_be_used_within_a_function_body","parseSwitchStatement","parseThrowStatement","parseTryStatement","parseVoidStatement","parseWhileStatement","parseExpressionStatement","elseStatement","case_","parseSwitchCase","_case_or_default_expected","parseExpressionStart","precedence","determinePrecedenceStart","The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access","again","startPos_1","QUOTED","PREFIX","regexpPattern","Expression_expected","tryParseTypeArgumentsBeforeArguments","nextPrecedence","maybeParseCallExpression","determinePrecedence","commaExprs","isRightAssociative","joinPropertyCall","callee","inner","skipBlock","depth","Precedence"],"mappings":"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IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IACpB,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,IAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAC1C,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,KAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OAEtCE,GACJ,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IACpB,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,IAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KACxB,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO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","file":"assemblyscript.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"binaryen\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"binaryen\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"assemblyscript\"] = factory(require(\"binaryen\"));\n\telse\n\t\troot[\"assemblyscript\"] = factory(root[\"binaryen\"]);\n})(typeof self !== 'undefined' ? self : this, function(__WEBPACK_EXTERNAL_MODULE__15__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 12);\n","/**\n * Common constants.\n * @module common\n *//***/\n\n/** Indicates traits of a {@link Node} or {@link Element}. */\nexport enum CommonFlags {\n  /** No flags set. */\n  NONE = 0,\n\n  // Basic modifiers\n\n  /** Has an `import` modifier. */\n  IMPORT = 1 << 0,\n  /** Has an `export` modifier. */\n  EXPORT = 1 << 1,\n  /** Has a `declare` modifier. */\n  DECLARE = 1 << 2,\n  /** Has a `const` modifier. */\n  CONST = 1 << 3,\n  /** Has a `let` modifier. */\n  LET = 1 << 4,\n  /** Has a `static` modifier. */\n  STATIC = 1 << 5,\n  /** Has a `readonly` modifier. */\n  READONLY = 1 << 6,\n  /** Has an `abstract` modifier. */\n  ABSTRACT = 1 << 7,\n  /** Has a `public` modifier. */\n  PUBLIC = 1 << 8,\n  /** Has a `private` modifier. */\n  PRIVATE = 1 << 9,\n  /** Has a `protected` modifier. */\n  PROTECTED = 1 << 10,\n  /** Has a `get` modifier. */\n  GET = 1 << 11,\n  /** Has a `set` modifier. */\n  SET = 1 << 12,\n\n  // Extended modifiers usually derived from basic modifiers\n\n  /** Is ambient, that is either declared or nested in a declared element. */\n  AMBIENT = 1 << 13,\n  /** Is generic. */\n  GENERIC = 1 << 14,\n  /** Is part of a generic context. */\n  GENERIC_CONTEXT = 1 << 15,\n  /** Is an instance member. */\n  INSTANCE = 1 << 16,\n  /** Is a constructor. */\n  CONSTRUCTOR = 1 << 17,\n  /** Is an arrow function. */\n  ARROW = 1 << 18,\n  /** Is a module export. */\n  MODULE_EXPORT = 1 << 19,\n  /** Is a module import. */\n  MODULE_IMPORT = 1 << 20,\n\n  // Compilation states\n\n  /** Is compiled. */\n  COMPILED = 1 << 21,\n  /** Has a constant value and is therefore inlined. */\n  INLINED = 1 << 22,\n  /** Is scoped. */\n  SCOPED = 1 << 23,\n  /** Is a trampoline. */\n  TRAMPOLINE = 1 << 24,\n  /** Is a virtual method. */\n  VIRTUAL = 1 << 25,\n  /** Is the main function. */\n  MAIN = 1 << 26,\n\n  // Other\n\n  QUOTED = 1 << 27\n}\n\n/** Path delimiter inserted between file system levels. */\nexport const PATH_DELIMITER = \"/\";\n/** Substitution used to indicate the parent directory. */\nexport const PARENT_SUBST = \"..\";\n/** Function name prefix used for getters. */\nexport const GETTER_PREFIX = \"get:\";\n/** Function name prefix used for setters. */\nexport const SETTER_PREFIX = \"set:\";\n/** Delimiter used between class names and instance members. */\nexport const INSTANCE_DELIMITER = \"#\";\n/** Delimiter used between class and namespace names and static members. */\nexport const STATIC_DELIMITER = \".\";\n/** Delimiter used between a function and its inner elements. */\nexport const INNER_DELIMITER = \"~\";\n/** Substitution used to indicate a library directory. */\nexport const LIBRARY_SUBST = \"~lib\";\n/** Library directory prefix. */\nexport const LIBRARY_PREFIX = LIBRARY_SUBST + PATH_DELIMITER;\n/** Prefix used to indicate a filespace element. */\nexport const FILESPACE_PREFIX = \"file:\";\n","/**\n * Shared diagnostic handling inherited by the parser and the compiler.\n * @module diagnostics\n * @preferred\n *//***/\n\nimport {\n  Range\n} from \"./ast\";\n\nimport {\n  DiagnosticCode,\n  diagnosticCodeToString\n} from \"./diagnosticMessages.generated\";\n\nimport {\n  isLineBreak\n} from \"./util\";\n\nexport {\n  DiagnosticCode,\n  diagnosticCodeToString\n} from \"./diagnosticMessages.generated\";\n\n/** Indicates the category of a {@link DiagnosticMessage}. */\nexport enum DiagnosticCategory {\n  /** Informatory message. */\n  INFO,\n  /** Warning message. */\n  WARNING,\n  /** Error message. */\n  ERROR\n}\n\n/** Returns the string representation of the specified diagnostic category. */\nexport function diagnosticCategoryToString(category: DiagnosticCategory): string {\n  switch (category) {\n    case DiagnosticCategory.INFO: return \"INFO\";\n    case DiagnosticCategory.WARNING: return \"WARNING\";\n    case DiagnosticCategory.ERROR: return \"ERROR\";\n    default: {\n      assert(false);\n      return \"\";\n    }\n  }\n}\n\n/** ANSI escape sequence for blue foreground. */\nexport const COLOR_BLUE: string = \"\\u001b[96m\";\n/** ANSI escape sequence for yellow foreground. */\nexport const COLOR_YELLOW: string = \"\\u001b[93m\";\n/** ANSI escape sequence for red foreground. */\nexport const COLOR_RED: string = \"\\u001b[91m\";\n/** ANSI escape sequence to reset the foreground color. */\nexport const COLOR_RESET: string = \"\\u001b[0m\";\n\n/** Returns the ANSI escape sequence for the specified category. */\nexport function diagnosticCategoryToColor(category: DiagnosticCategory): string {\n  switch (category) {\n    case DiagnosticCategory.INFO: return COLOR_BLUE;\n    case DiagnosticCategory.WARNING: return COLOR_YELLOW;\n    case DiagnosticCategory.ERROR: return COLOR_RED;\n    default: {\n      assert(false);\n      return \"\";\n    }\n  }\n}\n\n/** Represents a diagnostic message. */\nexport class DiagnosticMessage {\n\n  /** Message code. */\n  code: i32;\n  /** Message category. */\n  category: DiagnosticCategory;\n  /** Message text. */\n  message: string;\n  /** Respective source range, if any. */\n  range: Range | null = null;\n\n  /** Constructs a new diagnostic message. */\n  private constructor(code: i32, category: DiagnosticCategory, message: string) {\n    this.code = code;\n    this.category = category;\n    this.message = message;\n  }\n\n  /** Creates a new diagnostic message of the specified category. */\n  static create(\n    code: DiagnosticCode,\n    category: DiagnosticCategory,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): DiagnosticMessage {\n    var message = diagnosticCodeToString(code);\n    if (arg0 != null) message = message.replace(\"{0}\", arg0);\n    if (arg1 != null) message = message.replace(\"{1}\", arg1);\n    if (arg2 != null) message = message.replace(\"{2}\", arg2);\n    return new DiagnosticMessage(code, category, message);\n  }\n\n  /** Creates a new informatory diagnostic message. */\n  static createInfo(\n    code: DiagnosticCode,\n    arg0: string | null = null,\n    arg1: string | null = null\n  ): DiagnosticMessage {\n    return DiagnosticMessage.create(code, DiagnosticCategory.INFO, arg0, arg1);\n  }\n\n  /** Creates a new warning diagnostic message. */\n  static createWarning(\n    code: DiagnosticCode,\n    arg0: string | null = null,\n    arg1: string | null = null\n  ): DiagnosticMessage {\n    return DiagnosticMessage.create(code, DiagnosticCategory.WARNING, arg0, arg1);\n  }\n\n  /** Creates a new error diagnostic message. */\n  static createError(\n    code: DiagnosticCode,\n    arg0: string | null = null,\n    arg1: string | null = null\n  ): DiagnosticMessage {\n    return DiagnosticMessage.create(code, DiagnosticCategory.ERROR, arg0, arg1);\n  }\n\n  /** Adds a source range to this message. */\n  withRange(range: Range): this {\n    this.range = range;\n    return this;\n  }\n\n  /** Converts this message to a string. */\n  toString(): string {\n    if (this.range) {\n      return (\n        diagnosticCategoryToString(this.category) +\n        \" \" +\n        this.code.toString(10) +\n        \": \\\"\" +\n        this.message +\n        \"\\\" in \" +\n        this.range.source.normalizedPath +\n        \":\" +\n        this.range.line.toString(10) +\n        \":\" +\n        this.range.column.toString(10)\n      );\n    }\n    return (\n      diagnosticCategoryToString(this.category) +\n      \" \" +\n      this.code.toString(10) +\n      \": \" +\n      this.message\n    );\n  }\n}\n\n/** Formats a diagnostic message, optionally with terminal colors and source context. */\nexport function formatDiagnosticMessage(\n  message: DiagnosticMessage,\n  useColors: bool = false,\n  showContext: bool = false\n): string {\n\n  // general information\n  var sb: string[] = [];\n  if (useColors) sb.push(diagnosticCategoryToColor(message.category));\n  sb.push(diagnosticCategoryToString(message.category));\n  if (useColors) sb.push(COLOR_RESET);\n  sb.push(message.code < 1000 ? \" AS\" : \" TS\");\n  sb.push(message.code.toString(10));\n  sb.push(\": \");\n  sb.push(message.message);\n\n  // include range information if available\n  if (message.range) {\n\n    // include context information if requested\n    let range = message.range;\n    if (showContext) {\n      sb.push(\"\\n\");\n      sb.push(formatDiagnosticContext(message.range, useColors));\n    }\n\n    sb.push(\"\\n\");\n    sb.push(\" in \");\n    sb.push(range.source.normalizedPath);\n    sb.push(\"(\");\n    sb.push(range.line.toString(10));\n    sb.push(\",\");\n    sb.push(range.column.toString(10));\n    sb.push(\")\");\n  }\n  return sb.join(\"\");\n}\n\n/** Formats the diagnostic context for the specified range, optionally with terminal colors. */\nexport function formatDiagnosticContext(range: Range, useColors: bool = false): string {\n  var text = range.source.text;\n  var len = text.length;\n  var start = range.start;\n  var end = range.end;\n  while (start > 0 && !isLineBreak(text.charCodeAt(start - 1))) start--;\n  while (end < len && !isLineBreak(text.charCodeAt(end))) end++;\n  var sb: string[] = [\n    \"\\n \",\n    text.substring(start, end),\n    \"\\n \"\n  ];\n  while (start < range.start) {\n    sb.push(\" \");\n    start++;\n  }\n  if (useColors) sb.push(COLOR_RED);\n  if (range.start == range.end) {\n    sb.push(\"^\");\n  } else {\n    while (start++ < range.end) sb.push(\"~\");\n  }\n  if (useColors) sb.push(COLOR_RESET);\n  return sb.join(\"\");\n}\n\n/** Base class of all diagnostic emitters. */\nexport abstract class DiagnosticEmitter {\n\n  /** Diagnostic messages emitted so far. */\n  diagnostics: DiagnosticMessage[];\n\n  /** Initializes this diagnostic emitter. */\n  protected constructor(diagnostics: DiagnosticMessage[] | null = null) {\n    this.diagnostics = diagnostics ? <DiagnosticMessage[]>diagnostics : new Array();\n  }\n\n  /** Emits a diagnostic message of the specified category. */\n  emitDiagnostic(\n    code: DiagnosticCode,\n    category: DiagnosticCategory,\n    range: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    var message = DiagnosticMessage.create(code, category, arg0, arg1, arg2).withRange(range);\n    this.diagnostics.push(message);\n    // console.log(formatDiagnosticMessage(message, true, true) + \"\\n\"); // temporary\n    // console.log(<string>new Error(\"stack\").stack);\n  }\n\n  /** Emits an informatory diagnostic message. */\n  info(\n    code: DiagnosticCode,\n    range: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.INFO, range, arg0, arg1, arg2);\n  }\n\n  /** Emits a warning diagnostic message. */\n  warning(\n    code: DiagnosticCode,\n    range: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.WARNING, range, arg0, arg1, arg2);\n  }\n\n  /** Emits an error diagnostic message. */\n  error(\n    code: DiagnosticCode,\n    range: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.ERROR, range, arg0, arg1, arg2);\n  }\n}\n","/**\n * Various compiler utilities.\n * @module util\n * @preferred\n *//***/\n\nexport * from \"./charcode\";\nexport * from \"./path\";\nexport * from \"./text\";\nexport * from \"./binary\";\n","/**\n * Abstract syntax tree representing a source file once parsed.\n * @module ast\n *//***/\n\nimport {\n  CommonFlags,\n  PATH_DELIMITER,\n  STATIC_DELIMITER,\n  INSTANCE_DELIMITER,\n  LIBRARY_PREFIX\n} from \"./common\";\n\nimport {\n  Token,\n  Tokenizer,\n  Range\n} from \"./tokenizer\";\n\nimport {\n  normalizePath,\n  resolvePath,\n  CharCode\n} from \"./util\";\n\nexport { Token, Range };\n\n/** Indicates the kind of a node. */\nexport enum NodeKind {\n\n  SOURCE,\n\n  // types\n  TYPE,\n  TYPEPARAMETER,\n  PARAMETER,\n  SIGNATURE,\n\n  // expressions\n  IDENTIFIER,\n  ASSERTION,\n  BINARY,\n  CALL,\n  CLASS,\n  COMMA,\n  ELEMENTACCESS,\n  FALSE,\n  FUNCTION,\n  INSTANCEOF,\n  LITERAL,\n  NEW,\n  NULL,\n  PARENTHESIZED,\n  PROPERTYACCESS,\n  TERNARY,\n  SUPER,\n  THIS,\n  TRUE,\n  CONSTRUCTOR,\n  UNARYPOSTFIX,\n  UNARYPREFIX,\n\n  // statements\n  BLOCK,\n  BREAK,\n  CONTINUE,\n  DO,\n  EMPTY,\n  EXPORT,\n  EXPORTIMPORT,\n  EXPRESSION,\n  FOR,\n  IF,\n  IMPORT,\n  RETURN,\n  SWITCH,\n  THROW,\n  TRY,\n  VARIABLE,\n  VOID,\n  WHILE,\n\n  // declaration statements\n  CLASSDECLARATION,\n  ENUMDECLARATION,\n  ENUMVALUEDECLARATION,\n  FIELDDECLARATION,\n  FUNCTIONDECLARATION,\n  IMPORTDECLARATION,\n  INTERFACEDECLARATION,\n  METHODDECLARATION,\n  NAMESPACEDECLARATION,\n  TYPEDECLARATION,\n  VARIABLEDECLARATION,\n\n  // special\n  DECORATOR,\n  EXPORTMEMBER,\n  SWITCHCASE,\n  COMMENT\n}\n\n/** Checks if a node represents a constant value. */\nexport function nodeIsConstantValue(kind: NodeKind): bool {\n  switch (kind) {\n    case NodeKind.LITERAL:\n    case NodeKind.NULL:\n    case NodeKind.TRUE:\n    case NodeKind.FALSE: return true;\n  }\n  return false;\n}\n\n/** Checks if a node might be callable. */\nexport function nodeIsCallable(kind: NodeKind): bool {\n  switch (kind) {\n    case NodeKind.IDENTIFIER:\n    case NodeKind.CALL:\n    case NodeKind.ELEMENTACCESS:\n    case NodeKind.PROPERTYACCESS:\n    case NodeKind.PARENTHESIZED: return true;\n  }\n  return false;\n}\n\n/** Checks if a node might be callable with generic arguments. */\nexport function nodeIsGenericCallable(kind: NodeKind): bool {\n  switch (kind) {\n    case NodeKind.IDENTIFIER:\n    case NodeKind.PROPERTYACCESS: return true;\n  }\n  return false;\n}\n\n/** Base class of all nodes. */\nexport abstract class Node {\n\n  /** Node kind indicator. */\n  kind: NodeKind;\n  /** Source range. */\n  range: Range;\n  /** Parent node. */\n  parent: Node | null = null;\n  /** Common flags indicating specific traits. */\n  flags: CommonFlags = CommonFlags.NONE;\n\n  /** Tests if this node has the specified flag or flags. */\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\n  /** Tests if this node has one of the specified flags. */\n  isAny(flag: CommonFlags): bool { return (this.flags & flag) != 0; }\n  /** Sets a specific flag or flags. */\n  set(flag: CommonFlags): void { this.flags |= flag; }\n\n  // types\n\n  static createType(\n    name: IdentifierExpression,\n    typeArguments: CommonTypeNode[] | null,\n    isNullable: bool,\n    range: Range\n  ): TypeNode {\n    var type = new TypeNode();\n    type.range = range;\n    type.name = name; name.parent = type;\n    type.typeArguments = typeArguments; if (typeArguments) setParent(typeArguments, type);\n    type.isNullable = isNullable;\n    return type;\n  }\n\n  static createOmittedType(\n    range: Range\n  ): TypeNode {\n    return Node.createType(\n      Node.createIdentifierExpression(\"\", range),\n      null,\n      false,\n      range\n    );\n  }\n\n  static createTypeParameter(\n    name: IdentifierExpression,\n    extendsType: TypeNode | null,\n    range: Range\n  ): TypeParameterNode {\n    var elem = new TypeParameterNode();\n    elem.range = range;\n    elem.name = name; name.parent = elem;\n    elem.extendsType = extendsType; if (extendsType) extendsType.parent = elem;\n    return elem;\n  }\n\n  static createParameter(\n    name: IdentifierExpression,\n    type: CommonTypeNode,\n    initializer: Expression | null,\n    kind: ParameterKind,\n    range: Range\n  ): ParameterNode {\n    var elem = new ParameterNode();\n    elem.range = range;\n    elem.name = name; name.parent = elem;\n    elem.type = type; if (type) type.parent = elem;\n    elem.initializer = initializer; if (initializer) initializer.parent = elem;\n    elem.parameterKind = kind;\n    return elem;\n  }\n\n  static createSignature(\n    parameters: ParameterNode[],\n    returnType: CommonTypeNode,\n    explicitThisType: TypeNode | null,\n    isNullable: bool,\n    range: Range\n  ): SignatureNode {\n    var sig = new SignatureNode();\n    sig.range = range;\n    sig.parameters = parameters; setParent(parameters, sig);\n    sig.returnType = returnType; returnType.parent = sig;\n    sig.explicitThisType = explicitThisType; if (explicitThisType) explicitThisType.parent = sig;\n    sig.isNullable = isNullable;\n    return sig;\n  }\n\n  // special\n\n  static createDecorator(\n    name: Expression,\n    args: Expression[] | null,\n    range: Range\n  ): DecoratorNode {\n    var stmt = new DecoratorNode();\n    stmt.range = range;\n    stmt.name = name; name.parent = stmt;\n    stmt.arguments = args; if (args) setParent(args, stmt);\n    stmt.decoratorKind = decoratorNameToKind(name);\n    return stmt;\n  }\n\n  static createComment(\n    text: string,\n    kind: CommentKind,\n    range: Range\n  ): CommentNode {\n    var node = new CommentNode();\n    node.range = range;\n    node.commentKind = kind;\n    node.text = text;\n    return node;\n  }\n\n  // expressions\n\n  static createIdentifierExpression(\n    name: string,\n    range: Range\n  ): IdentifierExpression {\n    var expr = new IdentifierExpression();\n    expr.range = range;\n    expr.text = name;\n    return expr;\n  }\n\n  static createEmptyIdentifierExpression(\n    range: Range\n  ): IdentifierExpression {\n    var expr = new IdentifierExpression();\n    expr.range = range;\n    expr.text = \"\";\n    return expr;\n  }\n\n  static createArrayLiteralExpression(\n    elements: (Expression | null)[],\n    range: Range\n  ): ArrayLiteralExpression {\n    var expr = new ArrayLiteralExpression();\n    expr.range = range;\n    expr.elementExpressions = elements; setParentIfNotNull(elements, expr);\n    return expr;\n  }\n\n  static createAssertionExpression(\n    assertionKind: AssertionKind,\n    expression: Expression,\n    toType: CommonTypeNode,\n    range: Range\n  ): AssertionExpression {\n    var expr = new AssertionExpression();\n    expr.range = range;\n    expr.assertionKind = assertionKind;\n    expr.expression = expression; expression.parent = expr;\n    expr.toType = toType; toType.parent = expr;\n    return expr;\n  }\n\n  static createBinaryExpression(\n    operator: Token,\n    left: Expression,\n    right: Expression,\n    range: Range\n  ): BinaryExpression {\n    var expr = new BinaryExpression();\n    expr.range = range;\n    expr.operator = operator;\n    expr.left = left; left.parent = expr;\n    expr.right = right; right.parent = expr;\n    return expr;\n  }\n\n  static createCallExpression(\n    expression: Expression,\n    typeArgs: CommonTypeNode[] | null,\n    args: Expression[],\n    range: Range\n  ): CallExpression {\n    var expr = new CallExpression();\n    expr.range = range;\n    expr.expression = expression; expression.parent = expr;\n    expr.typeArguments = typeArgs; if (typeArgs) setParent(typeArgs, expr);\n    expr.arguments = args; setParent(args, expr);\n    return expr;\n  }\n\n  static createClassExpression(\n    declaration: ClassDeclaration\n  ): ClassExpression {\n    var expr = new ClassExpression();\n    expr.range = declaration.range;\n    expr.declaration = declaration;\n    return expr;\n  }\n\n  static createCommaExpression(\n    expressions: Expression[],\n    range: Range\n  ): CommaExpression {\n    var expr = new CommaExpression();\n    expr.range = range;\n    expr.expressions = expressions; setParent(expressions, expr);\n    return expr;\n  }\n\n  static createConstructorExpression(\n    range: Range\n  ): ConstructorExpression {\n    var expr = new ConstructorExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createElementAccessExpression(\n    expression: Expression,\n    element: Expression,\n    range: Range\n  ): ElementAccessExpression {\n    var expr = new ElementAccessExpression();\n    expr.range = range;\n    expr.expression = expression; expression.parent = expr;\n    expr.elementExpression = element; element.parent = expr;\n    return expr;\n  }\n\n  static createFalseExpression(\n    range: Range\n  ): FalseExpression {\n    var expr = new FalseExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createFloatLiteralExpression(\n    value: f64,\n    range: Range\n  ): FloatLiteralExpression {\n    var expr = new FloatLiteralExpression();\n    expr.range = range;\n    expr.value = value;\n    return expr;\n  }\n\n  static createFunctionExpression(\n    declaration: FunctionDeclaration\n  ): FunctionExpression {\n    var expr = new FunctionExpression();\n    expr.flags = declaration.flags & CommonFlags.ARROW;\n    expr.range = declaration.range;\n    expr.declaration = declaration;\n    return expr;\n  }\n\n  static createInstanceOfExpression(\n    expression: Expression,\n    isType: CommonTypeNode,\n    range: Range\n  ): InstanceOfExpression {\n    var expr = new InstanceOfExpression();\n    expr.range = range;\n    expr.expression = expression; expression.parent = expr;\n    expr.isType = isType; isType.parent = expr;\n    return expr;\n  }\n\n  static createIntegerLiteralExpression(\n    value: I64,\n    range: Range\n  ): IntegerLiteralExpression {\n    var expr = new IntegerLiteralExpression();\n    expr.range = range;\n    expr.value = value;\n    return expr;\n  }\n\n  static createNewExpression(\n    expression: Expression,\n    typeArgs: CommonTypeNode[] | null,\n    args: Expression[],\n    range: Range\n  ): NewExpression {\n    var expr = new NewExpression();\n    expr.range = range;\n    expr.expression = expression; expression.parent = expr;\n    expr.typeArguments = typeArgs; if (typeArgs) setParent(typeArgs, expr);\n    expr.arguments = args; setParent(args, expr);\n    return expr;\n  }\n\n  static createNullExpression(\n    range: Range\n  ): NullExpression {\n    var expr = new NullExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createObjectLiteralExpression(\n    names: IdentifierExpression[],\n    values: Expression[],\n    range: Range\n  ): ObjectLiteralExpression {\n    var expr = new ObjectLiteralExpression();\n    expr.range = range;\n    expr.names = names;\n    expr.values = values;\n    return expr;\n  }\n\n  static createParenthesizedExpression(\n    expression: Expression,\n    range: Range\n  ): ParenthesizedExpression {\n    var expr = new ParenthesizedExpression();\n    expr.range = range;\n    expr.expression = expression; expression.parent = expr;\n    return expr;\n  }\n\n  static createPropertyAccessExpression(\n    expression: Expression,\n    property: IdentifierExpression,\n    range: Range\n  ): PropertyAccessExpression {\n    var expr = new PropertyAccessExpression();\n    expr.range = range;\n    expr.expression = expression; expression.parent = expr;\n    expr.property = property; property.parent = expr;\n    return expr;\n  }\n\n  static createRegexpLiteralExpression(\n    pattern: string,\n    flags: string,\n    range: Range\n  ): RegexpLiteralExpression {\n    var expr = new RegexpLiteralExpression();\n    expr.range = range;\n    expr.pattern = pattern;\n    expr.patternFlags = flags;\n    return expr;\n  }\n\n  static createTernaryExpression(\n    condition: Expression,\n    ifThen: Expression,\n    ifElse: Expression,\n    range: Range\n  ): TernaryExpression {\n    var expr = new TernaryExpression();\n    expr.range = range;\n    expr.condition = condition; condition.parent = expr;\n    expr.ifThen = ifThen; ifThen.parent = expr;\n    expr.ifElse = ifElse; ifElse.parent = expr;\n    return expr;\n  }\n\n  static createStringLiteralExpression(\n    value: string,\n    range: Range\n  ): StringLiteralExpression {\n    var expr = new StringLiteralExpression();\n    expr.range = range;\n    expr.value = value;\n    return expr;\n  }\n\n  static createSuperExpression(\n    range: Range\n  ): SuperExpression {\n    var expr = new SuperExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createThisExpression(\n    range: Range\n  ): ThisExpression {\n    var expr = new ThisExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createTrueExpression(\n    range: Range\n  ): TrueExpression {\n    var expr = new TrueExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createUnaryPostfixExpression(\n    operator: Token,\n    operand: Expression,\n    range: Range\n  ): UnaryPostfixExpression {\n    var expr = new UnaryPostfixExpression();\n    expr.range = range;\n    expr.operator = operator;\n    expr.operand = operand; operand.parent = expr;\n    return expr;\n  }\n\n  static createUnaryPrefixExpression(\n    operator: Token,\n    operand: Expression,\n    range: Range\n  ): UnaryPrefixExpression {\n    var expr = new UnaryPrefixExpression();\n    expr.range = range;\n    expr.operator = operator;\n    expr.operand = operand; operand.parent = expr;\n    return expr;\n  }\n\n  // statements\n\n  static createBlockStatement(\n    statements: Statement[],\n    range: Range\n  ): BlockStatement {\n    var stmt = new BlockStatement();\n    stmt.range = range;\n    stmt.statements = statements; setParent(statements, stmt);\n    return stmt;\n  }\n\n  static createBreakStatement(\n    label: IdentifierExpression | null,\n    range: Range\n  ): BreakStatement {\n    var stmt = new BreakStatement();\n    stmt.range = range;\n    stmt.label = label; if (label) label.parent = stmt;\n    return stmt;\n  }\n\n  static createClassDeclaration(\n    identifier: IdentifierExpression,\n    typeParameters: TypeParameterNode[],\n    extendsType: TypeNode | null, // can't be a function\n    implementsTypes: TypeNode[] | null, // can't be functions\n    members: DeclarationStatement[],\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): ClassDeclaration {\n    var stmt = new ClassDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = identifier; identifier.parent = stmt;\n    stmt.typeParameters = typeParameters; setParent(typeParameters, stmt);\n    stmt.extendsType = extendsType; if (extendsType) extendsType.parent = stmt;\n    stmt.implementsTypes = implementsTypes; if (implementsTypes) setParent(implementsTypes, stmt);\n    stmt.members = members; setParent(members, stmt);\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\n    return stmt;\n  }\n\n  static createContinueStatement(\n    label: IdentifierExpression | null,\n    range: Range\n  ): ContinueStatement {\n    var stmt = new ContinueStatement();\n    stmt.range = range;\n    stmt.label = label; if (label) label.parent = stmt;\n    return stmt;\n  }\n\n  static createDoStatement(\n    statement: Statement,\n    condition: Expression,\n    range: Range\n  ): DoStatement {\n    var stmt = new DoStatement();\n    stmt.range = range;\n    stmt.statement = statement; statement.parent = stmt;\n    stmt.condition = condition; condition.parent = stmt;\n    return stmt;\n  }\n\n  static createEmptyStatement(\n    range: Range\n  ): EmptyStatement {\n    var stmt = new EmptyStatement();\n    stmt.range = range;\n    return stmt;\n  }\n\n  static createEnumDeclaration(\n    name: IdentifierExpression,\n    members: EnumValueDeclaration[],\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): EnumDeclaration {\n    var stmt = new EnumDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name; name.parent = stmt;\n    stmt.values = members; setParent(members, stmt);\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\n    return stmt;\n  }\n\n  static createEnumValueDeclaration(\n    name: IdentifierExpression,\n    value: Expression | null,\n    flags: CommonFlags,\n    range: Range\n  ): EnumValueDeclaration {\n    var stmt = new EnumValueDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name; name.parent = stmt;\n    stmt.value = value; if (value) value.parent = stmt;\n    return stmt;\n  }\n\n  static createExportStatement(\n    members: ExportMember[] | null,\n    path: StringLiteralExpression | null,\n    flags: CommonFlags,\n    range: Range\n  ): ExportStatement {\n    var stmt = new ExportStatement();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.members = members; if (members) setParent(members, stmt);\n    stmt.path = path;\n    if (path) {\n      let normalizedPath = normalizePath(path.value);\n      if (path.value.startsWith(\".\")) { // relative\n        stmt.normalizedPath = resolvePath(\n          normalizedPath,\n          range.source.normalizedPath\n        );\n      } else { // absolute\n        stmt.normalizedPath = normalizedPath;\n      }\n      stmt.internalPath = mangleInternalPath(stmt.normalizedPath);\n    } else {\n      stmt.normalizedPath = null;\n      stmt.internalPath = null;\n    }\n    return stmt;\n  }\n\n  static createExportImportStatement(\n    name: IdentifierExpression,\n    externalName: IdentifierExpression,\n    range: Range\n  ): ExportImportStatement {\n    var stmt = new ExportImportStatement();\n    stmt.range = range;\n    stmt.name = name; name.parent = stmt;\n    stmt.externalName = externalName; externalName.parent = stmt;\n    return stmt;\n  }\n\n  static createExportMember(\n    name: IdentifierExpression,\n    externalName: IdentifierExpression | null,\n    range: Range\n  ): ExportMember {\n    var elem = new ExportMember();\n    elem.range = range;\n    elem.name = name; name.parent = elem;\n    if (!externalName) {\n      externalName = name;\n    } else {\n      externalName.parent = elem;\n    }\n    elem.externalName = externalName;\n    return elem;\n  }\n\n  static createExpressionStatement(\n    expression: Expression\n  ): ExpressionStatement {\n    var stmt = new ExpressionStatement();\n    stmt.range = expression.range;\n    stmt.expression = expression; expression.parent = stmt;\n    return stmt;\n  }\n\n  static createIfStatement(\n    condition: Expression,\n    ifTrue: Statement,\n    ifFalse: Statement | null,\n    range: Range\n  ): IfStatement {\n    var stmt = new IfStatement();\n    stmt.range = range;\n    stmt.condition = condition; condition.parent = stmt;\n    stmt.ifTrue = ifTrue; ifTrue.parent = stmt;\n    stmt.ifFalse = ifFalse; if (ifFalse) ifFalse.parent = stmt;\n    return stmt;\n  }\n\n  static createImportStatement(\n    decls: ImportDeclaration[] | null,\n    path: StringLiteralExpression,\n    range: Range\n  ): ImportStatement {\n    var stmt = new ImportStatement();\n    stmt.range = range;\n    stmt.declarations = decls; if (decls) setParent(decls, stmt);\n    stmt.namespaceName = null;\n    stmt.path = path;\n    var normalizedPath = normalizePath(path.value);\n    if (path.value.startsWith(\".\")) { // relative in project\n      stmt.normalizedPath = resolvePath(\n        normalizedPath,\n        range.source.normalizedPath\n      );\n    } else { // absolute in library\n      if (!normalizedPath.startsWith(LIBRARY_PREFIX)) {\n        normalizedPath = LIBRARY_PREFIX + normalizedPath;\n      }\n      stmt.normalizedPath = normalizedPath;\n    }\n    stmt.internalPath = mangleInternalPath(stmt.normalizedPath);\n    return stmt;\n  }\n\n  static createImportStatementWithWildcard(\n    identifier: IdentifierExpression,\n    path: StringLiteralExpression,\n    range: Range\n  ): ImportStatement {\n    var stmt = new ImportStatement();\n    stmt.range = range;\n    stmt.declarations = null;\n    stmt.namespaceName = identifier;\n    stmt.path = path;\n    stmt.normalizedPath = resolvePath(\n      normalizePath(path.value),\n      range.source.normalizedPath\n    );\n    stmt.internalPath = mangleInternalPath(stmt.normalizedPath);\n    return stmt;\n  }\n\n  static createImportDeclaration(\n    externalName: IdentifierExpression,\n    name: IdentifierExpression | null,\n    range: Range\n  ): ImportDeclaration {\n    var elem = new ImportDeclaration();\n    elem.range = range;\n    elem.externalName = externalName; externalName.parent = elem;\n    if (!name) {\n      name = externalName;\n    } else {\n      name.parent = elem;\n    }\n    elem.name = name;\n    return elem;\n  }\n\n  static createInterfaceDeclaration(\n    name: IdentifierExpression,\n    typeParameters: TypeParameterNode[],\n    extendsType: TypeNode | null, // can't be a function\n    members: DeclarationStatement[],\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): InterfaceDeclaration {\n    var stmt = new InterfaceDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name; name.parent = stmt;\n    stmt.typeParameters = typeParameters; if (typeParameters) setParent(typeParameters, stmt);\n    stmt.extendsType = extendsType; if (extendsType) extendsType.parent = stmt;\n    stmt.members = members; setParent(members, stmt);\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\n    return stmt;\n  }\n\n  static createFieldDeclaration(\n    name: IdentifierExpression,\n    type: CommonTypeNode | null,\n    initializer: Expression | null,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): FieldDeclaration {\n    var stmt = new FieldDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name; name.parent = stmt;\n    stmt.type = type; if (type) type.parent = stmt;\n    stmt.initializer = initializer; if (initializer) initializer.parent = stmt;\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\n    return stmt;\n  }\n\n  static createForStatement(\n    initializer: Statement | null,\n    condition: Expression | null,\n    incrementor: Expression | null,\n    statement: Statement,\n    range: Range\n  ): ForStatement {\n    var stmt = new ForStatement();\n    stmt.range = range;\n    stmt.initializer = initializer; if (initializer) initializer.parent = stmt;\n    stmt.condition = condition; if (condition) condition.parent = stmt;\n    stmt.incrementor = incrementor; if (incrementor) incrementor.parent = stmt;\n    stmt.statement = statement; statement.parent = stmt;\n    return stmt;\n  }\n\n  static createFunctionDeclaration(\n    name: IdentifierExpression,\n    typeParameters: TypeParameterNode[] | null,\n    signature: SignatureNode,\n    body: Statement | null,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): FunctionDeclaration {\n    var stmt = new FunctionDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name; name.parent = stmt;\n    stmt.typeParameters = typeParameters; if (typeParameters) setParent(typeParameters, stmt);\n    stmt.signature = signature; signature.parent = stmt;\n    stmt.body = body; if (body) body.parent = stmt;\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\n    return stmt;\n  }\n\n  static createMethodDeclaration(\n    name: IdentifierExpression,\n    typeParameters: TypeParameterNode[] | null,\n    signature: SignatureNode,\n    body: Statement | null,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): MethodDeclaration {\n    var stmt = new MethodDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name; name.parent = stmt;\n    stmt.typeParameters = typeParameters; if (typeParameters) setParent(typeParameters, stmt);\n    stmt.signature = signature; signature.parent = stmt;\n    stmt.body = body; if (body) body.parent = stmt;\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\n    return stmt;\n  }\n\n  static createNamespaceDeclaration(\n    name: IdentifierExpression,\n    members: Statement[],\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): NamespaceDeclaration {\n    var stmt = new NamespaceDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name; name.parent = stmt;\n    stmt.members = members; setParent(members, stmt);\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\n    return stmt;\n  }\n\n  static createReturnStatement(\n    value: Expression | null,\n    range: Range\n  ): ReturnStatement {\n    var stmt = new ReturnStatement();\n    stmt.range = range;\n    stmt.value = value; if (value) value.parent = stmt;\n    return stmt;\n  }\n\n  static createSwitchStatement(\n    condition: Expression,\n    cases: SwitchCase[],\n    range: Range\n  ): SwitchStatement {\n    var stmt = new SwitchStatement();\n    stmt.range = range;\n    stmt.condition = condition; condition.parent = stmt;\n    stmt.cases = cases; setParent(cases, stmt);\n    return stmt;\n  }\n\n  static createSwitchCase(\n    label: Expression | null,\n    statements: Statement[],\n    range: Range\n  ): SwitchCase {\n    var elem = new SwitchCase();\n    elem.range = range;\n    elem.label = label; if (label) label.parent = elem;\n    elem.statements = statements; setParent(statements, elem);\n    return elem;\n  }\n\n  static createThrowStatement(\n    value: Expression,\n    range: Range\n  ): ThrowStatement {\n    var stmt = new ThrowStatement();\n    stmt.range = range;\n    stmt.value = value; value.parent = stmt;\n    return stmt;\n  }\n\n  static createTryStatement(\n    statements: Statement[],\n    catchVariable: IdentifierExpression | null,\n    catchStatements: Statement[] | null,\n    finallyStatements: Statement[] | null,\n    range: Range\n  ): TryStatement {\n    var stmt = new TryStatement();\n    stmt.range = range;\n    stmt.statements = statements; setParent(statements, stmt);\n    stmt.catchVariable = catchVariable;\n    if (catchVariable) catchVariable.parent = stmt;\n    stmt.catchStatements = catchStatements;\n    if (catchStatements) setParent(catchStatements, stmt);\n    stmt.finallyStatements = finallyStatements;\n    if (finallyStatements) setParent(finallyStatements, stmt);\n    return stmt;\n  }\n\n  static createTypeDeclaration(\n    name: IdentifierExpression,\n    typeParameters: TypeParameterNode[] | null,\n    alias: CommonTypeNode,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): TypeDeclaration {\n    var stmt = new TypeDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name; name.parent = stmt;\n    stmt.typeParameters = typeParameters; if (typeParameters) setParent(typeParameters, stmt);\n    stmt.type = alias; alias.parent = stmt;\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\n    return stmt;\n  }\n\n  static createVariableStatement(\n    declarations: VariableDeclaration[],\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): VariableStatement {\n    var stmt = new VariableStatement();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.declarations = declarations; setParent(declarations, stmt);\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\n    return stmt;\n  }\n\n  static createVariableDeclaration(\n    name: IdentifierExpression,\n    type: CommonTypeNode | null,\n    initializer: Expression | null,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): VariableDeclaration {\n    var elem = new VariableDeclaration();\n    elem.range = range;\n    elem.flags = flags;\n    elem.name = name; name.parent = elem;\n    elem.type = type; if (type) type.parent = elem;\n    elem.initializer = initializer; if (initializer) initializer.parent = elem;\n    elem.decorators = decorators; // inherited\n    return elem;\n  }\n\n  static createVoidStatement(\n    expression: Expression,\n    range: Range\n  ): VoidStatement {\n    var stmt = new VoidStatement();\n    stmt.range = range;\n    stmt.expression = expression;\n    return stmt;\n  }\n\n  static createWhileStatement(\n    condition: Expression,\n    statement: Statement,\n    range: Range\n  ): WhileStatement {\n    var stmt = new WhileStatement();\n    stmt.range = range;\n    stmt.condition = condition; condition.parent = stmt;\n    stmt.statement = statement; statement.parent = stmt;\n    return stmt;\n  }\n}\n\n// types\n\nexport abstract class CommonTypeNode extends Node {\n  // kind varies\n\n  /** Whether nullable or not. */\n  isNullable: bool;\n}\n\n/** Represents a type annotation. */\nexport class TypeNode extends CommonTypeNode {\n  kind = NodeKind.TYPE;\n\n  /** Identifier reference. */\n  name: IdentifierExpression;\n  /** Type argument references. */\n  typeArguments: CommonTypeNode[] | null;\n}\n\n/** Represents a type parameter. */\nexport class TypeParameterNode extends Node {\n  kind = NodeKind.TYPEPARAMETER;\n\n  /** Identifier reference. */\n  name: IdentifierExpression;\n  /** Extended type reference, if any. */\n  extendsType: TypeNode | null; // can't be a function\n}\n\n/** Represents the kind of a parameter. */\nexport enum ParameterKind {\n  /** No specific flags. */\n  DEFAULT,\n  /** Is an optional parameter. */\n  OPTIONAL,\n  /** Is a rest parameter. */\n  REST\n}\n\n/** Represents a function parameter. */\nexport class ParameterNode extends Node {\n  kind = NodeKind.PARAMETER;\n\n  /** Parameter kind. */\n  parameterKind: ParameterKind;\n  /** Parameter name. */\n  name: IdentifierExpression;\n  /** Parameter type. */\n  type: CommonTypeNode;\n  /** Initializer expression, if present. */\n  initializer: Expression | null;\n  /** Implicit field declaration, if applicable. */\n  implicitFieldDeclaration: FieldDeclaration | null = null;\n}\n\n/** Represents a function signature. */\nexport class SignatureNode extends CommonTypeNode {\n  kind = NodeKind.SIGNATURE;\n\n  /** Accepted parameters. */\n  parameters: ParameterNode[];\n  /** Return type. */\n  returnType: CommonTypeNode;\n  /** Explicitly provided this type, if any. */\n  explicitThisType: TypeNode | null; // can't be a function\n}\n\n// special\n\n/** Built-in decorator kinds. */\nexport enum DecoratorKind {\n  CUSTOM,\n  GLOBAL,\n  OPERATOR,\n  OPERATOR_BINARY,\n  OPERATOR_PREFIX,\n  OPERATOR_POSTFIX,\n  UNMANAGED,\n  SEALED,\n  INLINE,\n  EXTERNAL,\n  BUILTIN\n}\n\n/** Returns the kind of the specified decorator. Defaults to {@link DecoratorKind.CUSTOM}. */\nexport function decoratorNameToKind(name: Expression): DecoratorKind {\n  // @global, @inline, @operator, @sealed, @unmanaged\n  if (name.kind == NodeKind.IDENTIFIER) {\n    let nameStr = (<IdentifierExpression>name).text;\n    assert(nameStr.length);\n    switch (nameStr.charCodeAt(0)) {\n      case CharCode.b: {\n        if (nameStr == \"builtin\") return DecoratorKind.BUILTIN;\n        break;\n      }\n      case CharCode.e: {\n        if (nameStr == \"external\") return DecoratorKind.EXTERNAL;\n        break;\n      }\n      case CharCode.g: {\n        if (nameStr == \"global\") return DecoratorKind.GLOBAL;\n        break;\n      }\n      case CharCode.i: {\n        if (nameStr == \"inline\") return DecoratorKind.INLINE;\n        break;\n      }\n      case CharCode.o: {\n        if (nameStr == \"operator\") return DecoratorKind.OPERATOR;\n        break;\n      }\n      case CharCode.s: {\n        if (nameStr == \"sealed\") return DecoratorKind.SEALED;\n        break;\n      }\n      case CharCode.u: {\n        if (nameStr == \"unmanaged\") return DecoratorKind.UNMANAGED;\n        break;\n      }\n    }\n  } else if (\n    name.kind == NodeKind.PROPERTYACCESS &&\n    (<PropertyAccessExpression>name).expression.kind == NodeKind.IDENTIFIER\n  ) {\n    let nameStr = (<IdentifierExpression>(<PropertyAccessExpression>name).expression).text;\n    assert(nameStr.length);\n    let propStr = (<PropertyAccessExpression>name).property.text;\n    assert(propStr.length);\n    // @operator.binary, @operator.prefix, @operator.postfix\n    if (nameStr == \"operator\") {\n      switch (propStr.charCodeAt(0)) {\n        case CharCode.b: {\n          if (propStr == \"binary\") return DecoratorKind.OPERATOR_BINARY;\n          break;\n        }\n        case CharCode.p: {\n          switch (propStr) {\n            case \"prefix\": return DecoratorKind.OPERATOR_PREFIX;\n            case \"postfix\": return DecoratorKind.OPERATOR_POSTFIX;\n          }\n          break;\n        }\n      }\n    }\n  }\n  return DecoratorKind.CUSTOM;\n}\n\n/** Represents a decorator. */\nexport class DecoratorNode extends Node {\n  kind = NodeKind.DECORATOR;\n\n  /** Built-in kind, if applicable. */\n  decoratorKind: DecoratorKind;\n  /** Name expression. */\n  name: Expression;\n  /** Argument expressions. */\n  arguments: Expression[] | null;\n}\n\n/** Comment kinds. */\nexport enum CommentKind {\n  /** Line comment. */\n  LINE,\n  /** Triple-slash comment. */\n  TRIPLE,\n  /** Block comment. */\n  BLOCK\n}\n\n/** Represents a comment. */\nexport class CommentNode extends Node {\n  kind = NodeKind.COMMENT;\n\n  /** Comment kind. */\n  commentKind: CommentKind;\n  /** Comment text. */\n  text: string;\n}\n\n// expressions\n\n/** Base class of all expression nodes. */\nexport abstract class Expression extends Node { }\n\n/** Represents an identifier expression. */\nexport class IdentifierExpression extends Expression {\n  kind = NodeKind.IDENTIFIER;\n\n  /** Textual name. */\n  text: string;\n}\n\n/** Indicates the kind of a literal. */\nexport enum LiteralKind {\n  FLOAT,\n  INTEGER,\n  STRING,\n  REGEXP,\n  ARRAY,\n  OBJECT\n}\n\n/** Base class of all literal expressions. */\nexport abstract class LiteralExpression extends Expression {\n  kind = NodeKind.LITERAL;\n\n  /** Specific literal kind. */\n  literalKind: LiteralKind;\n}\n\n/** Represents an `[]` literal expression. */\nexport class ArrayLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.ARRAY;\n\n  /** Nested element expressions. */\n  elementExpressions: (Expression | null)[];\n}\n\n/** Indicates the kind of an assertion. */\nexport enum AssertionKind {\n  PREFIX,\n  AS\n}\n\n/** Represents an assertion expression. */\nexport class AssertionExpression extends Expression {\n  kind = NodeKind.ASSERTION;\n\n  /** Specific kind of this assertion. */\n  assertionKind: AssertionKind;\n  /** Expression being asserted. */\n  expression: Expression;\n  /** Target type. */\n  toType: CommonTypeNode;\n}\n\n/** Represents a binary expression. */\nexport class BinaryExpression extends Expression {\n  kind = NodeKind.BINARY;\n\n  /** Operator token. */\n  operator: Token;\n  /** Left-hand side expression */\n  left: Expression;\n  /** Right-hand side expression. */\n  right: Expression;\n}\n\n/** Represents a call expression. */\nexport class CallExpression extends Expression {\n  kind = NodeKind.CALL;\n\n  /** Called expression. Usually an identifier or property access expression. */\n  expression: Expression;\n  /** Provided type arguments. */\n  typeArguments: CommonTypeNode[] | null;\n  /** Provided arguments. */\n  arguments: Expression[];\n}\n\n/** Represents a class expression using the 'class' keyword. */\nexport class ClassExpression extends Expression {\n  kind = NodeKind.CLASS;\n\n  /** Inline class declaration. */\n  declaration: ClassDeclaration;\n}\n\n/** Represents a comma expression composed of multiple expressions. */\nexport class CommaExpression extends Expression {\n  kind = NodeKind.COMMA;\n\n  /** Sequential expressions. */\n  expressions: Expression[];\n}\n\n/** Represents a `constructor` expression. */\nexport class ConstructorExpression extends IdentifierExpression {\n  kind = NodeKind.CONSTRUCTOR;\n  text = \"constructor\";\n}\n\n/** Represents an element access expression, e.g., array access. */\nexport class ElementAccessExpression extends Expression {\n  kind = NodeKind.ELEMENTACCESS;\n\n  /** Expression being accessed. */\n  expression: Expression;\n  /** Element of the expression being accessed. */\n  elementExpression: Expression;\n}\n\n/** Represents a float literal expression. */\nexport class FloatLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.FLOAT;\n\n  /** Float value. */\n  value: f64;\n}\n\n/** Represents a function expression using the 'function' keyword. */\nexport class FunctionExpression extends Expression {\n  kind = NodeKind.FUNCTION;\n\n  /** Inline function declaration. */\n  declaration: FunctionDeclaration;\n}\n\n/** Represents an `instanceof` expression. */\nexport class InstanceOfExpression extends Expression {\n  kind = NodeKind.INSTANCEOF;\n\n  /** Expression being asserted. */\n  expression: Expression;\n  /** Type to test for. */\n  isType: CommonTypeNode;\n}\n\n/** Represents an integer literal expression. */\nexport class IntegerLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.INTEGER;\n\n  /** Integer value. */\n  value: I64;\n}\n\n/** Represents a `new` expression. Like a call but with its own kind. */\nexport class NewExpression extends CallExpression {\n  kind = NodeKind.NEW;\n}\n\n/** Represents a `null` expression. */\nexport class NullExpression extends IdentifierExpression {\n  kind = NodeKind.NULL;\n  text = \"null\";\n}\n\n/** Represents an object literal expression. */\nexport class ObjectLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.OBJECT;\n\n  /** Field names. */\n  names: IdentifierExpression[];\n  /** Field values. */\n  values: Expression[];\n}\n\n/** Represents a parenthesized expression. */\nexport class ParenthesizedExpression extends Expression {\n  kind = NodeKind.PARENTHESIZED;\n\n  /** Expression in parenthesis. */\n  expression: Expression;\n}\n\n/** Represents a property access expression. */\nexport class PropertyAccessExpression extends Expression {\n  kind = NodeKind.PROPERTYACCESS;\n\n  /** Expression being accessed. */\n  expression: Expression;\n  /** Property of the expression being accessed. */\n  property: IdentifierExpression;\n}\n\n/** Represents a regular expression literal expression. */\nexport class RegexpLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.REGEXP;\n\n  /** Regular expression pattern. */\n  pattern: string;\n  /** Regular expression flags. */\n  patternFlags: string;\n}\n\n/** Represents a ternary expression, i.e., short if notation. */\nexport class TernaryExpression extends Expression {\n  kind = NodeKind.TERNARY;\n\n  /** Condition expression. */\n  condition: Expression;\n  /** Expression executed when condition is `true`. */\n  ifThen: Expression;\n  /** Expression executed when condition is `false`. */\n  ifElse: Expression;\n}\n\n/** Represents a string literal expression. */\nexport class StringLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.STRING;\n\n  /** String value without quotes. */\n  value: string;\n}\n\n/** Represents a `super` expression. */\nexport class SuperExpression extends IdentifierExpression {\n  kind = NodeKind.SUPER;\n  text = \"super\";\n}\n\n/** Represents a `this` expression. */\nexport class ThisExpression extends IdentifierExpression {\n  kind = NodeKind.THIS;\n  text = \"this\";\n}\n\n/** Represents a `true` expression. */\nexport class TrueExpression extends IdentifierExpression {\n  kind = NodeKind.TRUE;\n  text = \"true\";\n}\n\n/** Represents a `false` expression. */\nexport class FalseExpression extends IdentifierExpression {\n  kind = NodeKind.FALSE;\n  text = \"false\";\n}\n\n/** Base class of all unary expressions. */\nexport abstract class UnaryExpression extends Expression {\n\n  /** Operator token. */\n  operator: Token;\n  /** Operand expression. */\n  operand: Expression;\n}\n\n/** Represents a unary postfix expression, e.g. a postfix increment. */\nexport class UnaryPostfixExpression extends UnaryExpression {\n  kind = NodeKind.UNARYPOSTFIX;\n}\n\n/** Represents a unary prefix expression, e.g. a negation. */\nexport class UnaryPrefixExpression extends UnaryExpression {\n  kind = NodeKind.UNARYPREFIX;\n}\n\n// statements\n\nexport function isLastStatement(statement: Statement): bool {\n  var parent = assert(statement.parent);\n  if (parent.kind == NodeKind.BLOCK) {\n    let statements = (<BlockStatement>parent).statements;\n    if (statements[statements.length - 1] === statement) {\n      switch (assert(parent.parent).kind) {\n        case NodeKind.FUNCTIONDECLARATION:\n        case NodeKind.METHODDECLARATION: return true;\n      }\n    }\n  }\n  return false;\n}\n\n/** Base class of all statement nodes. */\nexport abstract class Statement extends Node { }\n\n/** Indicates the specific kind of a source. */\nexport enum SourceKind {\n  /** Default source. Usually imported from an entry file. */\n  DEFAULT,\n  /** Entry file. */\n  ENTRY,\n  /** Library file. */\n  LIBRARY\n}\n\n/** A top-level source node. */\nexport class Source extends Node {\n  kind = NodeKind.SOURCE;\n  parent = null;\n\n  /** Source kind. */\n  sourceKind: SourceKind;\n  /** Normalized path. */\n  normalizedPath: string;\n  /** Path used internally. */\n  internalPath: string;\n  /** Simple path (last part without extension). */\n  simplePath: string;\n  /** Contained statements. */\n  statements: Statement[];\n  /** Full source text. */\n  text: string;\n  /** Tokenizer reference. */\n  tokenizer: Tokenizer | null = null;\n  /** Source map index. */\n  debugInfoIndex: i32 = -1;\n  /** Re-exported sources. */\n  exportPaths: Set<string> | null = null;\n\n  /** Constructs a new source node. */\n  constructor(normalizedPath: string, text: string, kind: SourceKind) {\n    super();\n    this.sourceKind = kind;\n    this.normalizedPath = normalizedPath;\n    var internalPath = mangleInternalPath(this.normalizedPath);\n    this.internalPath = internalPath;\n    var pos = internalPath.lastIndexOf(PATH_DELIMITER);\n    this.simplePath = pos >= 0 ? internalPath.substring(pos + 1) : internalPath;\n    this.statements = new Array();\n    this.range = new Range(this, 0, text.length);\n    this.text = text;\n  }\n\n  /** Tests if this source is an entry file. */\n  get isEntry(): bool { return this.sourceKind == SourceKind.ENTRY; }\n  /** Tests if this source is a stdlib file. */\n  get isLibrary(): bool { return this.sourceKind == SourceKind.LIBRARY; }\n}\n\n/** Base class of all declaration statements. */\nexport abstract class DeclarationStatement extends Statement {\n\n  /** Simple name being declared. */\n  name: IdentifierExpression;\n  /** Array of decorators. */\n  decorators: DecoratorNode[] | null = null;\n\n  protected cachedProgramLevelInternalName: string | null = null;\n  protected cachedFileLevelInternalName: string | null = null;\n\n  /** Gets the mangled program-level internal name of this declaration. */\n  get programLevelInternalName(): string {\n    if (!this.cachedProgramLevelInternalName) {\n      this.cachedProgramLevelInternalName = mangleInternalName(this, true);\n    }\n    return this.cachedProgramLevelInternalName;\n  }\n\n  /** Gets the mangled file-level internal name of this declaration. */\n  get fileLevelInternalName(): string {\n    if (!this.cachedFileLevelInternalName) {\n      this.cachedFileLevelInternalName = mangleInternalName(this, false);\n    }\n    return this.cachedFileLevelInternalName;\n  }\n\n  /** Tests if this is a top-level declaration within its source file. */\n  get isTopLevel(): bool {\n    var parent = this.parent;\n    if (!parent) {\n      return false;\n    }\n    if (parent.kind == NodeKind.VARIABLE && !(parent = parent.parent)) {\n      return false;\n    }\n    return parent.kind == NodeKind.SOURCE;\n  }\n\n  /** Tests if this declaration is a top-level export within its source file. */\n  get isTopLevelExport(): bool {\n    var parent = this.parent;\n    if (!parent || (parent.kind == NodeKind.VARIABLE && !(parent = parent.parent))) {\n      return false;\n    }\n    if (parent.kind == NodeKind.NAMESPACEDECLARATION) {\n      return this.is(CommonFlags.EXPORT) && (<NamespaceDeclaration>parent).isTopLevelExport;\n    }\n    if (parent.kind == NodeKind.CLASSDECLARATION) {\n      return this.is(CommonFlags.STATIC) && (<ClassDeclaration>parent).isTopLevelExport;\n    }\n    return parent.kind == NodeKind.SOURCE && this.is(CommonFlags.EXPORT);\n  }\n\n  /** Tests if this declaration needs an explicit export. */\n  needsExplicitExport(member: ExportMember): bool {\n    // This is necessary because module-level exports are automatically created\n    // for top level declarations of all sorts. This function essentially tests\n    // that there isn't a otherwise duplicate top-level export already.\n    return (\n      member.name.text != member.externalName.text || // if aliased\n      this.range.source != member.range.source ||     // if a re-export\n      !this.isTopLevelExport                          // if not top-level\n    );\n  }\n}\n\n/** Base class of all variable-like declaration statements. */\nexport abstract class VariableLikeDeclarationStatement extends DeclarationStatement {\n\n  /** Variable type. */\n  type: CommonTypeNode | null;\n  /** Variable initializer. */\n  initializer: Expression | null;\n}\n\n/** Represents a block statement. */\nexport class BlockStatement extends Statement {\n  kind = NodeKind.BLOCK;\n\n  /** Contained statements. */\n  statements: Statement[];\n}\n\n/** Represents a `break` statement. */\nexport class BreakStatement extends Statement {\n  kind = NodeKind.BREAK;\n\n  /** Target label, if applicable. */\n  label: IdentifierExpression | null;\n}\n\n/** Represents a `class` declaration. */\nexport class ClassDeclaration extends DeclarationStatement {\n  kind = NodeKind.CLASSDECLARATION;\n\n  /** Accepted type parameters. */\n  typeParameters: TypeParameterNode[];\n  /** Base class type being extended, if any. */\n  extendsType: TypeNode | null; // can't be a function\n  /** Interface types being implemented, if any. */\n  implementsTypes: TypeNode[] | null; // can't be functions\n  /** Class member declarations. */\n  members: DeclarationStatement[];\n\n  get isGeneric(): bool {\n    var typeParameters = this.typeParameters;\n    return typeParameters != null && typeParameters.length > 0;\n  }\n}\n\n/** Represents a `continue` statement. */\nexport class ContinueStatement extends Statement {\n  kind = NodeKind.CONTINUE;\n\n  /** Target label, if applicable. */\n  label: IdentifierExpression | null;\n}\n\n/** Represents a `do` statement. */\nexport class DoStatement extends Statement {\n  kind = NodeKind.DO;\n\n  /** Statement being looped over. */\n  statement: Statement;\n  /** Condition when to repeat. */\n  condition: Expression;\n}\n\n/** Represents an empty statement, i.e., a semicolon terminating nothing. */\nexport class EmptyStatement extends Statement {\n  kind = NodeKind.EMPTY;\n}\n\n/** Represents an `enum` declaration. */\nexport class EnumDeclaration extends DeclarationStatement {\n  kind = NodeKind.ENUMDECLARATION;\n\n  /** Enum value declarations. */\n  values: EnumValueDeclaration[];\n}\n\n/** Represents a value of an `enum` declaration. */\nexport class EnumValueDeclaration extends DeclarationStatement {\n  kind = NodeKind.ENUMVALUEDECLARATION;\n  // name is inherited\n\n  /** Value expression. */\n  value: Expression | null;\n}\n\n/** Represents an `export import` statement of an interface. */\nexport class ExportImportStatement extends Node {\n  kind = NodeKind.EXPORTIMPORT;\n\n  /** Identifier being imported. */\n  name: IdentifierExpression;\n  /** Identifier being exported. */\n  externalName: IdentifierExpression;\n}\n\n/** Represents a member of an `export` statement. */\nexport class ExportMember extends Node {\n  kind = NodeKind.EXPORTMEMBER;\n\n  /** Identifier being exported. */\n  name: IdentifierExpression;\n  /** Identifier seen when imported again. */\n  externalName: IdentifierExpression;\n}\n\n/** Represents an `export` statement. */\nexport class ExportStatement extends Statement {\n  kind = NodeKind.EXPORT;\n\n  /** Array of members if a set of named exports, or `null` if a filespace export. */\n  members: ExportMember[] | null;\n  /** Path being exported from, if applicable. */\n  path: StringLiteralExpression | null;\n  /** Normalized path, if `path` is set. */\n  normalizedPath: string | null;\n  /** Mangled internal path being referenced, if `path` is set. */\n  internalPath: string | null;\n}\n\n/** Represents an expression that is used as a statement. */\nexport class ExpressionStatement extends Statement {\n  kind = NodeKind.EXPRESSION;\n\n  /** Expression being used as a statement.*/\n  expression: Expression;\n}\n\n/** Represents a field declaration within a `class`. */\nexport class FieldDeclaration extends VariableLikeDeclarationStatement {\n  kind = NodeKind.FIELDDECLARATION;\n\n  /** Parameter index within the constructor, if applicable. */\n  parameterIndex: i32 = -1;\n}\n\n/** Represents a `for` statement. */\nexport class ForStatement extends Statement {\n  kind = NodeKind.FOR;\n\n  /**\n   * Initializer statement, if present.\n   * Either a {@link VariableStatement} or {@link ExpressionStatement}.\n   */\n  initializer: Statement | null;\n  /** Condition expression, if present. */\n  condition: Expression | null;\n  /** Incrementor expression, if present. */\n  incrementor: Expression | null;\n  /** Statement being looped over. */\n  statement: Statement;\n}\n\n/** Represents a `function` declaration. */\nexport class FunctionDeclaration extends DeclarationStatement {\n  kind = NodeKind.FUNCTIONDECLARATION;\n\n  /** Type parameters, if any. */\n  typeParameters: TypeParameterNode[] | null;\n  /** Function signature. */\n  signature: SignatureNode;\n  /** Body statement. Usually a block. */\n  body: Statement | null;\n\n  get isGeneric(): bool {\n    var typeParameters = this.typeParameters;\n    return typeParameters != null && typeParameters.length > 0;\n  }\n}\n\n/** Represents an `if` statement. */\nexport class IfStatement extends Statement {\n  kind = NodeKind.IF;\n\n  /** Condition. */\n  condition: Expression;\n  /** Statement executed when condition is `true`. */\n  ifTrue: Statement;\n  /** Statement executed when condition is `false`. */\n  ifFalse: Statement | null;\n}\n\n/** Represents an `import` declaration part of an {@link ImportStatement}. */\nexport class ImportDeclaration extends DeclarationStatement {\n  kind = NodeKind.IMPORTDECLARATION;\n\n  /** Identifier being imported. */\n  externalName: IdentifierExpression;\n}\n\n/** Represents an `import` statement. */\nexport class ImportStatement extends Statement {\n  kind = NodeKind.IMPORT;\n\n  /** Array of member declarations or `null` if an asterisk import. */\n  declarations: ImportDeclaration[] | null;\n  /** Name of the local namespace, if an asterisk import. */\n  namespaceName: IdentifierExpression | null;\n  /** Path being imported from. */\n  path: StringLiteralExpression;\n  /** Normalized path. */\n  normalizedPath: string;\n  /** Mangled internal path being referenced. */\n  internalPath: string;\n}\n\n/** Represents an `interfarce` declaration. */\nexport class InterfaceDeclaration extends ClassDeclaration {\n  kind = NodeKind.INTERFACEDECLARATION;\n}\n\n/** Represents a method declaration within a `class`. */\nexport class MethodDeclaration extends FunctionDeclaration {\n  kind = NodeKind.METHODDECLARATION;\n}\n\n/** Represents a `namespace` declaration. */\nexport class NamespaceDeclaration extends DeclarationStatement {\n  kind = NodeKind.NAMESPACEDECLARATION;\n\n  /** Array of namespace members. */\n  members: Statement[];\n}\n\n/** Represents a `return` statement. */\nexport class ReturnStatement extends Statement {\n  kind = NodeKind.RETURN;\n\n  /** Value expression being returned, if present. */\n  value: Expression | null;\n}\n\n/** Represents a single `case` within a `switch` statement. */\nexport class SwitchCase extends Node {\n  kind = NodeKind.SWITCHCASE;\n\n  /** Label expression. `null` indicates the default case. */\n  label: Expression | null;\n  /** Contained statements. */\n  statements: Statement[];\n}\n\n/** Represents a `switch` statement. */\nexport class SwitchStatement extends Statement {\n  kind = NodeKind.SWITCH;\n\n  /** Condition expression. */\n  condition: Expression;\n  /** Contained cases. */\n  cases: SwitchCase[];\n}\n\n/** Represents a `throw` statement. */\nexport class ThrowStatement extends Statement {\n  kind = NodeKind.THROW;\n\n  /** Value expression being thrown. */\n  value: Expression;\n}\n\n/** Represents a `try` statement. */\nexport class TryStatement extends Statement {\n  kind = NodeKind.TRY;\n\n  /** Contained statements. */\n  statements: Statement[];\n  /** Exception variable name, if a `catch` clause is present. */\n  catchVariable: IdentifierExpression | null;\n  /** Statements being executed on catch, if a `catch` clause is present. */\n  catchStatements: Statement[] | null;\n  /** Statements being executed afterwards, if a `finally` clause is present. */\n  finallyStatements: Statement[] | null;\n}\n\n/** Represents a `type` declaration. */\nexport class TypeDeclaration extends DeclarationStatement {\n  kind = NodeKind.TYPEDECLARATION;\n\n  /** Type parameters, if any. */\n  typeParameters: TypeParameterNode[] | null;\n  /** Type being aliased. */\n  type: CommonTypeNode;\n}\n\n/** Represents a variable declaration part of a {@link VariableStatement}. */\nexport class VariableDeclaration extends VariableLikeDeclarationStatement {\n  kind = NodeKind.VARIABLEDECLARATION;\n}\n\n/** Represents a variable statement wrapping {@link VariableDeclaration}s. */\nexport class VariableStatement extends Statement {\n  kind = NodeKind.VARIABLE;\n\n  /** Array of decorators. */\n  decorators: DecoratorNode[] | null;\n  /** Array of member declarations. */\n  declarations: VariableDeclaration[];\n}\n\n/** Represents a void statement dropping an expression's value. */\nexport class VoidStatement extends Statement {\n  kind = NodeKind.VOID;\n\n  /** Expression being dropped. */\n  expression: Expression;\n}\n\n/** Represents a `while` statement. */\nexport class WhileStatement extends Statement {\n  kind = NodeKind.WHILE;\n\n  /** Condition expression. */\n  condition: Expression;\n  /** Statement being looped over. */\n  statement: Statement;\n}\n\n/** Finds the first decorator matching the specified kind. */\nexport function findDecorator(kind: DecoratorKind, decorators: DecoratorNode[] | null): DecoratorNode | null {\n  if (decorators) {\n    for (let i = 0, k = decorators.length; i < k; ++i) {\n      let decorator = decorators[i];\n      if (decorator.decoratorKind == kind) return decorator;\n    }\n  }\n  return null;\n}\n\n/** Mangles a declaration's name to an internal name. */\nexport function mangleInternalName(declaration: DeclarationStatement, asGlobal: bool = false): string {\n  var name = declaration.name.text;\n  var parent = declaration.parent;\n  if (!parent) return name;\n  if (\n    declaration.kind == NodeKind.VARIABLEDECLARATION &&\n    parent.kind == NodeKind.VARIABLE\n  ) { // skip over\n    if (!(parent = parent.parent)) return name;\n  }\n  if (parent.kind == NodeKind.CLASSDECLARATION) {\n    return mangleInternalName(<ClassDeclaration>parent, asGlobal) + (\n      declaration.is(CommonFlags.STATIC)\n        ? STATIC_DELIMITER\n        : INSTANCE_DELIMITER\n    ) + name;\n  }\n  if (\n    parent.kind == NodeKind.NAMESPACEDECLARATION ||\n    parent.kind == NodeKind.ENUMDECLARATION\n  ) {\n    return mangleInternalName(<DeclarationStatement>parent, asGlobal) +\n           STATIC_DELIMITER + name;\n  }\n  return asGlobal\n    ? name\n    : declaration.range.source.internalPath + PATH_DELIMITER + name;\n}\n\n/** Mangles an external to an internal path. */\nexport function mangleInternalPath(path: string): string {\n  if (path.endsWith(\".ts\")) path = path.substring(0, path.length - 3);\n  return path;\n}\n\n// Helpers\n\n/** Sets the parent node on an array of nodes. */\nfunction setParent(nodes: Node[], parent: Node): void {\n  for (let i = 0, k = nodes.length; i < k; ++i) {\n    nodes[i].parent = parent;\n  }\n}\n\n/** Sets the parent node on an array of nullable nodes. */\nfunction setParentIfNotNull(nodes: (Node | null)[], parent: Node): void {\n  for (let i = 0, k = nodes.length; i < k; ++i) {\n    let node = nodes[i];\n    if (node) node.parent = parent;\n  }\n}\n","/**\n * AssemblyScript's intermediate representation describing a program's elements.\n * @module program\n *//***/\n\nimport {\n  CommonFlags,\n  PATH_DELIMITER,\n  STATIC_DELIMITER,\n  INSTANCE_DELIMITER,\n  LIBRARY_PREFIX,\n  GETTER_PREFIX,\n  SETTER_PREFIX,\n  FILESPACE_PREFIX\n} from \"./common\";\n\nimport {\n  Options,\n  Feature\n} from \"./compiler\";\n\nimport {\n  DiagnosticCode,\n  DiagnosticMessage,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  Type,\n  TypeKind,\n  TypeFlags,\n  Signature\n} from \"./types\";\n\nimport {\n  Node,\n  NodeKind,\n  Source,\n  Range,\n  CommonTypeNode,\n  TypeParameterNode,\n  DecoratorNode,\n  DecoratorKind,\n\n  Expression,\n  IdentifierExpression,\n  LiteralExpression,\n  LiteralKind,\n  StringLiteralExpression,\n\n  ClassDeclaration,\n  DeclarationStatement,\n  EnumDeclaration,\n  EnumValueDeclaration,\n  ExportMember,\n  ExportStatement,\n  FieldDeclaration,\n  FunctionDeclaration,\n  ImportDeclaration,\n  ImportStatement,\n  InterfaceDeclaration,\n  MethodDeclaration,\n  NamespaceDeclaration,\n  TypeDeclaration,\n  VariableDeclaration,\n  VariableLikeDeclarationStatement,\n  VariableStatement,\n\n  decoratorNameToKind,\n  findDecorator\n} from \"./ast\";\n\nimport {\n  Module,\n  NativeType,\n  FunctionRef,\n  ExpressionRef,\n  ExpressionId,\n  BinaryOp,\n  UnaryOp,\n\n  getExpressionId,\n  getGetLocalIndex,\n  isTeeLocal,\n  getSetLocalValue,\n  getBinaryOp,\n  getConstValueI32,\n  getBinaryLeft,\n  getBinaryRight,\n  getUnaryOp,\n  getExpressionType,\n  getLoadBytes,\n  isLoadSigned,\n  getIfTrue,\n  getIfFalse,\n  getSelectThen,\n  getSelectElse,\n  getCallTarget,\n  getBlockChildCount,\n  getBlockChild,\n  getBlockName,\n  getConstValueF32,\n  getConstValueF64,\n  getConstValueI64Low\n} from \"./module\";\n\nimport {\n  CharCode\n} from \"./util\";\n\nimport {\n  Resolver\n} from \"./resolver\";\n\n/** Represents a yet unresolved import. */\nclass QueuedImport {\n  localName: string;\n  externalName: string;\n  externalNameAlt: string;\n  declaration: ImportDeclaration | null; // not set if a filespace\n}\n\n/** Represents a yet unresolved export. */\nclass QueuedExport {\n  externalName: string;\n  isReExport: bool;\n  member: ExportMember;\n}\n\n/** Represents a type alias. */\nclass TypeAlias {\n  typeParameters: TypeParameterNode[] | null;\n  type: CommonTypeNode;\n}\n\n/** Represents a module-level export. */\nclass ModuleExport {\n  element: Element;\n  identifier: IdentifierExpression;\n}\n\n/** Represents the kind of an operator overload. */\nexport enum OperatorKind {\n  INVALID,\n\n  // indexed access\n  INDEXED_GET,            // a[]\n  INDEXED_SET,            // a[]=b\n  UNCHECKED_INDEXED_GET,  // unchecked(a[])\n  UNCHECKED_INDEXED_SET,  // unchecked(a[]=b)\n\n  // binary\n  ADD,                    // a + b\n  SUB,                    // a - b\n  MUL,                    // a * b\n  DIV,                    // a / b\n  REM,                    // a % b\n  POW,                    // a ** b\n  BITWISE_AND,            // a & b\n  BITWISE_OR,             // a | b\n  BITWISE_XOR,            // a ^ b\n  BITWISE_SHL,            // a << b\n  BITWISE_SHR,            // a >> b\n  BITWISE_SHR_U,          // a >>> b\n  EQ,                     // a == b\n  NE,                     // a != b\n  GT,                     // a > b\n  GE,                     // a >= b\n  LT,                     // a < b\n  LE,                     // a <= b\n\n  // unary prefix\n  PLUS,                   // +a\n  MINUS,                  // -a\n  NOT,                    // !a\n  BITWISE_NOT,            // ~a\n  PREFIX_INC,             // ++a\n  PREFIX_DEC,             // --a\n\n  // unary postfix\n  POSTFIX_INC,            // a++\n  POSTFIX_DEC             // a--\n\n  // not overridable:\n  // IDENTITY             // a === b\n  // LOGICAL_AND          // a && b\n  // LOGICAL_OR           // a || b\n}\n\n/** Returns the operator kind represented by the specified decorator and string argument. */\nfunction operatorKindFromDecorator(decoratorKind: DecoratorKind, arg: string): OperatorKind {\n  assert(arg.length);\n  switch (decoratorKind) {\n    case DecoratorKind.OPERATOR:\n    case DecoratorKind.OPERATOR_BINARY: {\n      switch (arg.charCodeAt(0)) {\n        case CharCode.OPENBRACKET: {\n          if (arg == \"[]\") return OperatorKind.INDEXED_GET;\n          if (arg == \"[]=\") return OperatorKind.INDEXED_SET;\n          break;\n        }\n        case CharCode.OPENBRACE: {\n          if (arg == \"{}\") return OperatorKind.UNCHECKED_INDEXED_GET;\n          if (arg == \"{}=\") return OperatorKind.UNCHECKED_INDEXED_SET;\n          break;\n        }\n        case CharCode.PLUS: {\n          if (arg == \"+\") return OperatorKind.ADD;\n          break;\n        }\n        case CharCode.MINUS: {\n          if (arg == \"-\") return OperatorKind.SUB;\n          break;\n        }\n        case CharCode.ASTERISK: {\n          if (arg == \"*\") return OperatorKind.MUL;\n          if (arg == \"**\") return OperatorKind.POW;\n          break;\n        }\n        case CharCode.SLASH: {\n          if (arg == \"/\") return OperatorKind.DIV;\n          break;\n        }\n        case CharCode.PERCENT: {\n          if (arg == \"%\") return OperatorKind.REM;\n          break;\n        }\n        case CharCode.AMPERSAND: {\n          if (arg == \"&\") return OperatorKind.BITWISE_AND;\n          break;\n        }\n        case CharCode.BAR: {\n          if (arg == \"|\") return OperatorKind.BITWISE_OR;\n          break;\n        }\n        case CharCode.CARET: {\n          if (arg == \"^\") return OperatorKind.BITWISE_XOR;\n          break;\n        }\n        case CharCode.EQUALS: {\n          if (arg == \"==\") return OperatorKind.EQ;\n          break;\n        }\n        case CharCode.EXCLAMATION: {\n          if (arg == \"!=\") return OperatorKind.NE;\n          break;\n        }\n        case CharCode.GREATERTHAN: {\n          if (arg == \">\") return OperatorKind.GT;\n          if (arg == \">=\") return OperatorKind.GE;\n          if (arg == \">>\") return OperatorKind.BITWISE_SHR;\n          if (arg == \">>>\") return OperatorKind.BITWISE_SHR_U;\n          break;\n        }\n        case CharCode.LESSTHAN: {\n          if (arg == \"<\") return OperatorKind.LT;\n          if (arg == \"<=\") return OperatorKind.LE;\n          if (arg == \"<<\") return OperatorKind.BITWISE_SHL;\n          break;\n        }\n      }\n      break;\n    }\n    case DecoratorKind.OPERATOR_PREFIX: {\n      switch (arg.charCodeAt(0)) {\n        case CharCode.PLUS: {\n          if (arg == \"+\") return OperatorKind.PLUS;\n          if (arg == \"++\") return OperatorKind.PREFIX_INC;\n          break;\n        }\n        case CharCode.MINUS: {\n          if (arg == \"-\") return OperatorKind.MINUS;\n          if (arg == \"--\") return OperatorKind.PREFIX_DEC;\n          break;\n        }\n        case CharCode.EXCLAMATION: {\n          if (arg == \"!\") return OperatorKind.NOT;\n          break;\n        }\n        case CharCode.TILDE: {\n          if (arg == \"~\") return OperatorKind.BITWISE_NOT;\n          break;\n        }\n      }\n      break;\n    }\n    case DecoratorKind.OPERATOR_POSTFIX: {\n      switch (arg.charCodeAt(0)) {\n        case CharCode.PLUS: {\n          if (arg == \"++\") return OperatorKind.POSTFIX_INC;\n          break;\n        }\n        case CharCode.MINUS: {\n          if (arg == \"--\") return OperatorKind.POSTFIX_DEC;\n          break;\n        }\n      }\n      break;\n    }\n  }\n  return OperatorKind.INVALID;\n}\n\nconst noTypesYet = new Map<string,Type>();\n\n/** Represents an AssemblyScript program. */\nexport class Program extends DiagnosticEmitter {\n\n  /** Array of source files. */\n  sources: Source[];\n  /** Resolver instance. */\n  resolver: Resolver;\n  /** Diagnostic offset used where successively obtaining the next diagnostic. */\n  diagnosticsOffset: i32 = 0;\n  /** Compiler options. */\n  options: Options;\n\n  /** Elements by internal name. */\n  elementsLookup: Map<string,Element> = new Map();\n  /** Class and function instances by internal name. */\n  instancesLookup: Map<string,Element> = new Map();\n  /** Types by internal name. */\n  typesLookup: Map<string,Type> = noTypesYet;\n  /** Declared type aliases. */\n  typeAliases: Map<string,TypeAlias> = new Map();\n  /** File-level exports by exported name. */\n  fileLevelExports: Map<string,Element> = new Map();\n  /** Module-level exports by exported name. */\n  moduleLevelExports: Map<string,ModuleExport> = new Map();\n\n  /** ArrayBuffer instance reference. */\n  arrayBufferInstance: Class | null = null;\n  /** Array prototype reference. */\n  arrayPrototype: ClassPrototype | null = null;\n  /** String instance reference. */\n  stringInstance: Class | null = null;\n  /** Start function reference. */\n  startFunction: FunctionPrototype;\n  /** Main function reference, if present. */\n  mainFunction: FunctionPrototype | null = null;\n  /** Abort function reference, if present. */\n  abortInstance: Function | null = null;\n  /** Memory allocation function. */\n  memoryAllocateInstance: Function | null = null;\n\n  /** Whether a garbage collector is present or not. */\n  hasGC: bool = false;\n  /** Garbage collector allocation function. */\n  gcAllocateInstance: Function | null = null;\n  /** Garbage collector link function called when a managed object is referenced from a parent. */\n  gcLinkInstance: Function | null = null;\n  /** Garbage collector mark function called to on reachable managed objects. */\n  gcMarkInstance: Function | null = null;\n  /** Size of a managed object header. */\n  gcHeaderSize: u32 = 0;\n  /** Offset of the GC hook. */\n  gcHookOffset: u32 = 0;\n\n  /** Currently processing filespace. */\n  currentFilespace: Filespace;\n\n  /** Constructs a new program, optionally inheriting parser diagnostics. */\n  constructor(diagnostics: DiagnosticMessage[] | null = null) {\n    super(diagnostics);\n    this.resolver = new Resolver(this);\n    this.sources = [];\n  }\n\n  /** Gets a source by its exact path. */\n  getSource(normalizedPath: string): Source | null {\n    var sources = this.sources;\n    for (let i = 0, k = sources.length; i < k; ++i) {\n      let source = sources[i];\n      if (source.normalizedPath == normalizedPath) return source;\n    }\n    return null;\n  }\n\n  /** Looks up the source for the specified possibly ambiguous path. */\n  lookupSourceByPath(normalizedPathWithoutExtension: string): Source | null {\n    var tmp: string;\n    return (\n      this.getSource(normalizedPathWithoutExtension + \".ts\") ||\n      this.getSource(normalizedPathWithoutExtension + \"/index.ts\") ||\n      this.getSource((tmp = LIBRARY_PREFIX + normalizedPathWithoutExtension) + \".ts\") ||\n      this.getSource( tmp                                                    + \"/index.ts\")\n    );\n  }\n\n  /** Initializes the program and its elements prior to compilation. */\n  initialize(options: Options): void {\n    this.options = options;\n\n    // add built-in types\n    this.typesLookup = new Map([\n      [\"i8\", Type.i8],\n      [\"i16\", Type.i16],\n      [\"i32\", Type.i32],\n      [\"i64\", Type.i64],\n      [\"isize\", options.isizeType],\n      [\"u8\", Type.u8],\n      [\"u16\", Type.u16],\n      [\"u32\", Type.u32],\n      [\"u64\", Type.u64],\n      [\"usize\", options.usizeType],\n      [\"bool\", Type.bool],\n      [\"f32\", Type.f32],\n      [\"f64\", Type.f64],\n      [\"void\", Type.void],\n      [\"number\", Type.f64],\n      [\"boolean\", Type.bool]\n    ]);\n\n    // add compiler hints\n    this.setConstantInteger(\"ASC_TARGET\", Type.i32,\n      i64_new(options.isWasm64 ? 2 : 1));\n    this.setConstantInteger(\"ASC_NO_TREESHAKING\", Type.bool,\n      i64_new(options.noTreeShaking ? 1 : 0, 0));\n    this.setConstantInteger(\"ASC_NO_ASSERT\", Type.bool,\n      i64_new(options.noAssert ? 1 : 0, 0));\n    this.setConstantInteger(\"ASC_MEMORY_BASE\", Type.i32,\n      i64_new(options.memoryBase, 0));\n    this.setConstantInteger(\"ASC_OPTIMIZE_LEVEL\", Type.i32,\n      i64_new(options.optimizeLevelHint, 0));\n    this.setConstantInteger(\"ASC_SHRINK_LEVEL\", Type.i32,\n      i64_new(options.shrinkLevelHint, 0));\n    this.setConstantInteger(\"ASC_FEATURE_MUTABLE_GLOBAL\", Type.bool,\n      i64_new(options.hasFeature(Feature.MUTABLE_GLOBAL) ? 1 : 0, 0));\n    this.setConstantInteger(\"ASC_FEATURE_SIGN_EXTENSION\", Type.bool,\n      i64_new(options.hasFeature(Feature.SIGN_EXTENSION) ? 1 : 0, 0));\n\n    // remember deferred elements\n    var queuedImports = new Array<QueuedImport>();\n    var queuedExports = new Map<string,QueuedExport>();\n    var queuedExtends = new Array<ClassPrototype>();\n    var queuedImplements = new Array<ClassPrototype>();\n\n    // build initial lookup maps of internal names to declarations\n    for (let i = 0, k = this.sources.length; i < k; ++i) {\n      let source = this.sources[i];\n\n      // create one filespace per source\n      let filespace = new Filespace(this, source);\n      this.elementsLookup.set(filespace.internalName, filespace);\n      this.currentFilespace = filespace;\n\n      // process this source's statements\n      let statements = source.statements;\n      for (let j = 0, l = statements.length; j < l; ++j) {\n        let statement = statements[j];\n        switch (statement.kind) {\n          case NodeKind.CLASSDECLARATION: {\n            this.initializeClass(<ClassDeclaration>statement, queuedExtends, queuedImplements);\n            break;\n          }\n          case NodeKind.ENUMDECLARATION: {\n            this.initializeEnum(<EnumDeclaration>statement);\n            break;\n          }\n          case NodeKind.EXPORT: {\n            this.initializeExports(<ExportStatement>statement, queuedExports);\n            break;\n          }\n          case NodeKind.FUNCTIONDECLARATION: {\n            this.initializeFunction(<FunctionDeclaration>statement);\n            break;\n          }\n          case NodeKind.IMPORT: {\n            this.initializeImports(<ImportStatement>statement, queuedExports, queuedImports);\n            break;\n          }\n          case NodeKind.INTERFACEDECLARATION: {\n            this.initializeInterface(<InterfaceDeclaration>statement);\n            break;\n          }\n          case NodeKind.NAMESPACEDECLARATION: {\n            this.initializeNamespace(<NamespaceDeclaration>statement, queuedExtends, queuedImplements);\n            break;\n          }\n          case NodeKind.TYPEDECLARATION: {\n            this.initializeTypeAlias(<TypeDeclaration>statement);\n            break;\n          }\n          case NodeKind.VARIABLE: {\n            this.initializeVariables(<VariableStatement>statement);\n            break;\n          }\n        }\n      }\n    }\n\n    // queued imports should be resolvable now through traversing exports and queued exports\n    for (let i = 0; i < queuedImports.length;) {\n      let queuedImport = queuedImports[i];\n      let declaration = queuedImport.declaration;\n      if (declaration) { // named\n        let element = this.tryLocateImport(queuedImport.externalName, queuedExports);\n        if (element) {\n          this.elementsLookup.set(queuedImport.localName, element);\n          queuedImports.splice(i, 1);\n        } else {\n          if (element = this.tryLocateImport(queuedImport.externalNameAlt, queuedExports)) {\n            this.elementsLookup.set(queuedImport.localName, element);\n            queuedImports.splice(i, 1);\n          } else {\n            this.error(\n              DiagnosticCode.Module_0_has_no_exported_member_1,\n              declaration.range,\n              (<ImportStatement>declaration.parent).path.value,\n              declaration.externalName.text\n            );\n            ++i;\n          }\n        }\n      } else { // filespace\n        let element = this.elementsLookup.get(queuedImport.externalName);\n        if (element) {\n          this.elementsLookup.set(queuedImport.localName, element);\n          queuedImports.splice(i, 1);\n        } else {\n          if (element = this.elementsLookup.get(queuedImport.externalNameAlt)) {\n            this.elementsLookup.set(queuedImport.localName, element);\n            queuedImports.splice(i, 1);\n          } else {\n            assert(false); // already reported by the parser not finding the file\n            ++i;\n          }\n        }\n      }\n    }\n\n    // queued exports should be resolvable now that imports are finalized\n    for (let [exportName, queuedExport] of queuedExports) {\n      let currentExport: QueuedExport | null = queuedExport; // nullable below\n      let element: Element | null;\n      do {\n        if (currentExport.isReExport) {\n          if (element = this.fileLevelExports.get(currentExport.externalName)) {\n            this.setExportAndCheckLibrary(\n              exportName,\n              element,\n              queuedExport.member.externalName\n            );\n            break;\n          }\n          currentExport = queuedExports.get(currentExport.externalName);\n          if (!currentExport) {\n            this.error(\n              DiagnosticCode.Module_0_has_no_exported_member_1,\n              queuedExport.member.externalName.range,\n              (<StringLiteralExpression>(<ExportStatement>queuedExport.member.parent).path).value,\n              queuedExport.member.externalName.text\n            );\n          }\n        } else {\n          if (\n            // normal export\n            (element = this.elementsLookup.get(currentExport.externalName)) ||\n            // library re-export\n            (element = this.elementsLookup.get(currentExport.member.name.text))\n          ) {\n            this.setExportAndCheckLibrary(\n              exportName,\n              element,\n              queuedExport.member.externalName\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Cannot_find_name_0,\n              queuedExport.member.range, queuedExport.member.name.text\n            );\n          }\n          break;\n        }\n      } while (currentExport);\n    }\n\n    // resolve base prototypes of derived classes\n    var resolver = this.resolver;\n    for (let i = 0, k = queuedExtends.length; i < k; ++i) {\n      let derivedPrototype = queuedExtends[i];\n      let derivedDeclaration = derivedPrototype.declaration;\n      let derivedType = assert(derivedDeclaration.extendsType);\n      let baseElement = resolver.resolveIdentifier(derivedType.name, null); // reports\n      if (!baseElement) continue;\n      if (baseElement.kind == ElementKind.CLASS_PROTOTYPE) {\n        let basePrototype = <ClassPrototype>baseElement;\n        derivedPrototype.basePrototype = basePrototype;\n      } else {\n        this.error(\n          DiagnosticCode.A_class_may_only_extend_another_class,\n          derivedType.range\n        );\n      }\n    }\n\n    // set up global aliases\n    {\n      let globalAliases = options.globalAliases;\n      if (globalAliases) {\n        for (let [alias, name] of globalAliases) {\n          if (!name.length) continue; // explicitly disabled\n          let element = this.elementsLookup.get(name);\n          if (element) this.elementsLookup.set(alias, element);\n          else throw new Error(\"element not found: \" + name);\n        }\n      }\n    }\n\n    // register 'ArrayBuffer'\n    if (this.elementsLookup.has(\"ArrayBuffer\")) {\n      let element = assert(this.elementsLookup.get(\"ArrayBuffer\"));\n      assert(element.kind == ElementKind.CLASS_PROTOTYPE);\n      this.arrayBufferInstance = resolver.resolveClass(<ClassPrototype>element, null);\n    }\n\n    // register 'Array'\n    if (this.elementsLookup.has(\"Array\")) {\n      let element = assert(this.elementsLookup.get(\"Array\"));\n      assert(element.kind == ElementKind.CLASS_PROTOTYPE);\n      this.arrayPrototype = <ClassPrototype>element;\n    }\n\n    // register 'String'\n    if (this.elementsLookup.has(\"String\")) {\n      let element = assert(this.elementsLookup.get(\"String\"));\n      assert(element.kind == ElementKind.CLASS_PROTOTYPE);\n      let instance = resolver.resolveClass(<ClassPrototype>element, null);\n      if (instance) {\n        if (this.typesLookup.has(\"string\")) {\n          let declaration = (<ClassPrototype>element).declaration;\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, declaration.programLevelInternalName\n          );\n        } else {\n          this.stringInstance = instance;\n          this.typesLookup.set(\"string\", instance.type);\n        }\n      }\n    }\n\n    // register 'start'\n    {\n      let element = assert(this.elementsLookup.get(\"start\"));\n      assert(element.kind == ElementKind.FUNCTION_PROTOTYPE);\n      this.startFunction = <FunctionPrototype>element;\n    }\n\n    // register 'main' if present\n    if (this.moduleLevelExports.has(\"main\")) {\n      let element = (<ModuleExport>this.moduleLevelExports.get(\"main\")).element;\n      if (\n        element.kind == ElementKind.FUNCTION_PROTOTYPE &&\n        !(<FunctionPrototype>element).isAny(CommonFlags.GENERIC | CommonFlags.AMBIENT)\n      ) {\n        (<FunctionPrototype>element).set(CommonFlags.MAIN);\n        this.mainFunction = <FunctionPrototype>element;\n      }\n    }\n\n    // register 'abort' if present\n    if (this.elementsLookup.has(\"abort\")) {\n      let element = <Element>this.elementsLookup.get(\"abort\");\n      assert(element.kind == ElementKind.FUNCTION_PROTOTYPE);\n      let instance = this.resolver.resolveFunction(<FunctionPrototype>element, null);\n      if (instance) this.abortInstance = instance;\n    }\n\n    // register 'memory.allocate' if present\n    if (this.elementsLookup.has(\"memory\")) {\n      let element = <Element>this.elementsLookup.get(\"memory\");\n      let members = element.members;\n      if (members) {\n        if (members.has(\"allocate\")) {\n          element = assert(members.get(\"allocate\"));\n          assert(element.kind == ElementKind.FUNCTION_PROTOTYPE);\n          let instance = this.resolver.resolveFunction(<FunctionPrototype>element, null);\n          if (instance) this.memoryAllocateInstance = instance;\n        }\n      }\n    }\n\n    // register GC hooks if present\n    if (\n      this.elementsLookup.has(\"__gc_allocate\") &&\n      this.elementsLookup.has(\"__gc_link\") &&\n      this.elementsLookup.has(\"__gc_mark\")\n    ) {\n      // __gc_allocate(usize, (ref: usize) => void): usize\n      let element = <Element>this.elementsLookup.get(\"__gc_allocate\");\n      assert(element.kind == ElementKind.FUNCTION_PROTOTYPE);\n      let gcAllocateInstance = assert(this.resolver.resolveFunction(<FunctionPrototype>element, null));\n      let signature = gcAllocateInstance.signature;\n      assert(signature.parameterTypes.length == 2);\n      assert(signature.parameterTypes[0] == this.options.usizeType);\n      assert(signature.parameterTypes[1].signatureReference);\n      assert(signature.returnType == this.options.usizeType);\n\n      // __gc_link(usize, usize): void\n      element = <Element>this.elementsLookup.get(\"__gc_link\");\n      assert(element.kind == ElementKind.FUNCTION_PROTOTYPE);\n      let gcLinkInstance = assert(this.resolver.resolveFunction(<FunctionPrototype>element, null));\n      signature = gcLinkInstance.signature;\n      assert(signature.parameterTypes.length == 2);\n      assert(signature.parameterTypes[0] == this.options.usizeType);\n      assert(signature.parameterTypes[1] == this.options.usizeType);\n      assert(signature.returnType == Type.void);\n\n      // __gc_mark(usize): void\n      element = <Element>this.elementsLookup.get(\"__gc_mark\");\n      assert(element.kind == ElementKind.FUNCTION_PROTOTYPE);\n      let gcMarkInstance = assert(this.resolver.resolveFunction(<FunctionPrototype>element, null));\n      signature = gcMarkInstance.signature;\n      assert(signature.parameterTypes.length == 1);\n      assert(signature.parameterTypes[0] == this.options.usizeType);\n      assert(signature.returnType == Type.void);\n\n      this.gcAllocateInstance = gcAllocateInstance;\n      this.gcLinkInstance = gcLinkInstance;\n      this.gcMarkInstance = gcMarkInstance;\n      let gcHookOffset = 2 * options.usizeType.byteSize; // .next + .prev\n      this.gcHookOffset =  gcHookOffset;\n      this.gcHeaderSize = (gcHookOffset + 4 + 7) & ~7;   // + .hook index + alignment\n      this.hasGC = true;\n    }\n  }\n\n  /** Sets a constant integer value. */\n  setConstantInteger(globalName: string, type: Type, value: I64): void {\n    assert(type.is(TypeFlags.INTEGER));\n    this.elementsLookup.set(globalName,\n      new Global(this, globalName, globalName, type, null, DecoratorFlags.NONE)\n        .withConstantIntegerValue(value)\n    );\n  }\n\n  /** Sets a constant float value. */\n  setConstantFloat(globalName: string, type: Type, value: f64): void {\n    assert(type.is(TypeFlags.FLOAT));\n    this.elementsLookup.set(globalName,\n      new Global(this, globalName, globalName, type, null, DecoratorFlags.NONE)\n        .withConstantFloatValue(value)\n    );\n  }\n\n  /** Tries to locate an import by traversing exports and queued exports. */\n  private tryLocateImport(\n    externalName: string,\n    queuedNamedExports: Map<string,QueuedExport>\n  ): Element | null {\n    var element: Element | null;\n    var fileLevelExports = this.fileLevelExports;\n    do {\n      if (element = fileLevelExports.get(externalName)) return element;\n      let queuedExport = queuedNamedExports.get(externalName);\n      if (!queuedExport) break;\n      if (queuedExport.isReExport) {\n        externalName = queuedExport.externalName;\n        continue;\n      }\n      return this.elementsLookup.get(queuedExport.externalName);\n    } while (true);\n    return null;\n  }\n\n  /** Checks that only supported decorators are present. */\n  private checkDecorators(\n    decorators: DecoratorNode[],\n    acceptedFlags: DecoratorFlags\n  ): DecoratorFlags {\n    var presentFlags = DecoratorFlags.NONE;\n    for (let i = 0, k = decorators.length; i < k; ++i) {\n      let decorator = decorators[i];\n      let kind = decoratorNameToKind(decorator.name);\n      let flag = decoratorKindToFlag(kind);\n      if (flag) {\n        if (flag == DecoratorFlags.BUILTIN) {\n          if (decorator.range.source.isLibrary) {\n            presentFlags |= flag;\n          } else {\n            this.error(\n              DiagnosticCode.Decorator_0_is_not_valid_here,\n              decorator.range, decorator.name.range.toString()\n            );\n          }\n        } else if (!(acceptedFlags & flag)) {\n          this.error(\n            DiagnosticCode.Decorator_0_is_not_valid_here,\n            decorator.range, decorator.name.range.toString()\n          );\n        } else if (presentFlags & flag) {\n          this.error(\n            DiagnosticCode.Duplicate_decorator,\n            decorator.range, decorator.name.range.toString()\n          );\n        } else {\n          presentFlags |= flag;\n        }\n      }\n    }\n    return presentFlags;\n  }\n\n  /** Checks and sets up global options of an element. */\n  private checkGlobal(\n    element: Element,\n    declaration: DeclarationStatement\n  ): void {\n    var parentNode = declaration.parent;\n    // alias globally if explicitly annotated @global or exported from a top-level library file\n    if (\n      (element.hasDecorator(DecoratorFlags.GLOBAL)) ||\n      (\n        declaration.range.source.isLibrary &&\n        element.is(CommonFlags.EXPORT) &&\n        (\n          assert(parentNode).kind == NodeKind.SOURCE ||\n          (\n            <Node>parentNode).kind == NodeKind.VARIABLE &&\n            assert((<Node>parentNode).parent).kind == NodeKind.SOURCE\n          )\n        )\n    ) {\n      let globalName = declaration.programLevelInternalName;\n      if (this.elementsLookup.has(globalName)) {\n        this.error(\n          DiagnosticCode.Duplicate_identifier_0,\n          declaration.name.range, element.internalName\n        );\n      } else {\n        this.elementsLookup.set(globalName, element);\n      }\n    }\n    // builtins use the global name directly\n    if (element.hasDecorator(DecoratorFlags.BUILTIN)) {\n      element.internalName = declaration.programLevelInternalName;\n    }\n  }\n\n  /** Initializes a class declaration. */\n  private initializeClass(\n    declaration: ClassDeclaration,\n    queuedExtends: ClassPrototype[],\n    queuedImplements: ClassPrototype[],\n    namespace: Element | null = null\n  ): void {\n    var internalName = declaration.fileLevelInternalName;\n    if (this.elementsLookup.has(internalName)) {\n      this.error(\n        DiagnosticCode.Duplicate_identifier_0,\n        declaration.name.range, internalName\n      );\n      return;\n    }\n\n    var decorators = declaration.decorators;\n    var simpleName = declaration.name.text;\n    var prototype = new ClassPrototype(\n      this,\n      simpleName,\n      internalName,\n      declaration,\n      decorators\n        ? this.checkDecorators(decorators,\n            DecoratorFlags.GLOBAL |\n            DecoratorFlags.SEALED |\n            DecoratorFlags.UNMANAGED\n          )\n        : DecoratorFlags.NONE\n    );\n    prototype.parent = namespace;\n    this.elementsLookup.set(internalName, prototype);\n\n    var implementsTypes = declaration.implementsTypes;\n    if (implementsTypes) {\n      let numImplementsTypes = implementsTypes.length;\n      if (prototype.hasDecorator(DecoratorFlags.UNMANAGED)) {\n        if (numImplementsTypes) {\n          this.error(\n            DiagnosticCode.Unmanaged_classes_cannot_implement_interfaces,\n            Range.join(\n              declaration.name.range,\n              implementsTypes[numImplementsTypes - 1].range\n            )\n          );\n        }\n\n      // remember classes that implement interfaces\n      } else if (numImplementsTypes) {\n        for (let i = 0; i < numImplementsTypes; ++i) {\n          this.warning( // TODO\n            DiagnosticCode.Operation_not_supported,\n            implementsTypes[i].range\n          );\n        }\n        queuedImplements.push(prototype);\n      }\n    }\n\n    // remember classes that extend another one\n    if (declaration.extendsType) queuedExtends.push(prototype);\n\n    // add as namespace member if applicable\n    if (namespace) {\n      if (namespace.members) {\n        if (namespace.members.has(simpleName)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, internalName\n          );\n          return;\n        }\n      } else {\n        namespace.members = new Map();\n      }\n      namespace.members.set(simpleName, prototype);\n      if (namespace.is(CommonFlags.MODULE_EXPORT) && prototype.is(CommonFlags.EXPORT)) {\n        prototype.set(CommonFlags.MODULE_EXPORT);\n      }\n\n    // otherwise add to file-level exports if exported\n    } else if (prototype.is(CommonFlags.EXPORT)) {\n      if (this.fileLevelExports.has(internalName)) {\n        this.error(\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n          declaration.name.range, internalName\n        );\n        return;\n      }\n      this.fileLevelExports.set(internalName, prototype);\n      this.currentFilespace.members.set(simpleName, prototype);\n      if (prototype.is(CommonFlags.EXPORT) && declaration.range.source.isEntry) {\n        if (this.moduleLevelExports.has(simpleName)) {\n          let existingExport = <ModuleExport>this.moduleLevelExports.get(simpleName);\n          this.error(\n            DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n            declaration.name.range, existingExport.element.internalName\n          );\n          return;\n        }\n        prototype.set(CommonFlags.MODULE_EXPORT);\n        this.moduleLevelExports.set(simpleName, <ModuleExport>{\n          element: prototype,\n          identifier: declaration.name\n        });\n      }\n    }\n\n    // initialize members\n    var memberDeclarations = declaration.members;\n    for (let i = 0, k = memberDeclarations.length; i < k; ++i) {\n      let memberDeclaration = memberDeclarations[i];\n      switch (memberDeclaration.kind) {\n        case NodeKind.FIELDDECLARATION: {\n          this.initializeField(<FieldDeclaration>memberDeclaration, prototype);\n          break;\n        }\n        case NodeKind.METHODDECLARATION: {\n          if (memberDeclaration.isAny(CommonFlags.GET | CommonFlags.SET)) {\n            this.initializeAccessor(<MethodDeclaration>memberDeclaration, prototype);\n          } else {\n            this.initializeMethod(<MethodDeclaration>memberDeclaration, prototype);\n          }\n          break;\n        }\n        default: {\n          assert(false); // should have been reported while parsing\n          return;\n        }\n      }\n    }\n\n    this.checkGlobal(prototype, declaration);\n  }\n\n  /** Initializes a field of a class or interface. */\n  private initializeField(\n    declaration: FieldDeclaration,\n    classPrototype: ClassPrototype\n  ): void {\n    var name = declaration.name.text;\n    var internalName = declaration.fileLevelInternalName;\n    var decorators = declaration.decorators;\n    var isInterface = classPrototype.kind == ElementKind.INTERFACE_PROTOTYPE;\n\n    // static fields become global variables\n    if (declaration.is(CommonFlags.STATIC)) {\n      if (isInterface) {\n        // should have been reported while parsing\n        assert(false);\n      }\n      if (this.elementsLookup.has(internalName)) {\n        this.error(\n          DiagnosticCode.Duplicate_identifier_0,\n          declaration.name.range, internalName\n        );\n        return;\n      }\n      if (classPrototype.members) {\n        if (classPrototype.members.has(name)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, internalName\n          );\n          return;\n        }\n      } else {\n        classPrototype.members = new Map();\n      }\n      let staticField = new Global(\n        this,\n        name,\n        internalName,\n        Type.void, // resolved later on\n        declaration,\n        decorators\n          ? this.checkDecorators(decorators, DecoratorFlags.INLINE)\n          : DecoratorFlags.NONE\n      );\n      staticField.parent = classPrototype;\n      classPrototype.members.set(name, staticField);\n      this.elementsLookup.set(internalName, staticField);\n      if (classPrototype.is(CommonFlags.MODULE_EXPORT)) {\n        staticField.set(CommonFlags.MODULE_EXPORT);\n      }\n\n      if (staticField.hasDecorator(DecoratorFlags.INLINE) && !staticField.is(CommonFlags.READONLY)) {\n        this.error(\n          DiagnosticCode.Decorator_0_is_not_valid_here,\n          assert(findDecorator(DecoratorKind.INLINE, decorators)).range, \"inline\"\n        );\n      }\n\n    // instance fields are remembered until resolved\n    } else {\n      if (isInterface) {\n        // should have been reported while parsing\n        assert(!declaration.isAny(CommonFlags.ABSTRACT | CommonFlags.GET | CommonFlags.SET));\n      }\n      if (classPrototype.instanceMembers) {\n        if (classPrototype.instanceMembers.has(name)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, internalName\n          );\n          return;\n        }\n      } else {\n        classPrototype.instanceMembers = new Map();\n      }\n      let instanceField = new FieldPrototype(\n        classPrototype,\n        name,\n        internalName,\n        declaration\n      );\n      if (decorators) this.checkDecorators(decorators, DecoratorFlags.NONE);\n      classPrototype.instanceMembers.set(name, instanceField);\n    }\n  }\n\n  /** Initializes a method of a class or interface. */\n  private initializeMethod(\n    declaration: MethodDeclaration,\n    classPrototype: ClassPrototype\n  ): void {\n    var simpleName = declaration.name.text;\n    var internalName = declaration.fileLevelInternalName;\n    var prototype: FunctionPrototype | null = null;\n\n    var decorators = declaration.decorators;\n    var decoratorFlags = DecoratorFlags.NONE;\n    if (decorators) {\n      decoratorFlags = this.checkDecorators(decorators,\n        DecoratorFlags.OPERATOR_BINARY  |\n        DecoratorFlags.OPERATOR_PREFIX  |\n        DecoratorFlags.OPERATOR_POSTFIX |\n        DecoratorFlags.INLINE\n      );\n    }\n\n    // static methods become global functions\n    if (declaration.is(CommonFlags.STATIC)) {\n      assert(declaration.name.kind != NodeKind.CONSTRUCTOR);\n\n      if (this.elementsLookup.has(internalName)) {\n        this.error(\n          DiagnosticCode.Duplicate_identifier_0, declaration.name.range,\n          internalName\n        );\n        return;\n      }\n      if (classPrototype.members) {\n        if (classPrototype.members.has(simpleName)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, internalName\n          );\n          return;\n        }\n      } else {\n        classPrototype.members = new Map();\n      }\n      prototype = new FunctionPrototype(\n        this,\n        simpleName,\n        internalName,\n        declaration,\n        classPrototype,\n        decoratorFlags\n      );\n      classPrototype.members.set(simpleName, prototype);\n      this.elementsLookup.set(internalName, prototype);\n      if (classPrototype.is(CommonFlags.MODULE_EXPORT)) {\n        prototype.set(CommonFlags.MODULE_EXPORT);\n      }\n\n    // instance methods are remembered until resolved\n    } else {\n      if (classPrototype.instanceMembers) {\n        if (classPrototype.instanceMembers.has(simpleName)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, internalName\n          );\n          return;\n        }\n      } else {\n        classPrototype.instanceMembers = new Map();\n      }\n      prototype = new FunctionPrototype(\n        this,\n        simpleName,\n        internalName,\n        declaration,\n        classPrototype,\n        decoratorFlags\n      );\n      // if (classPrototype.isUnmanaged && instancePrototype.isAbstract) {\n      //   this.error( Unmanaged classes cannot declare abstract methods. );\n      // }\n      if (declaration.name.kind == NodeKind.CONSTRUCTOR) {\n        if (classPrototype.constructorPrototype) {\n          this.error(\n            DiagnosticCode.Multiple_constructor_implementations_are_not_allowed,\n            declaration.name.range\n          );\n        } else {\n          prototype.set(CommonFlags.CONSTRUCTOR);\n          classPrototype.constructorPrototype = prototype;\n        }\n      } else {\n        classPrototype.instanceMembers.set(simpleName, prototype);\n      }\n      if (classPrototype.is(CommonFlags.MODULE_EXPORT)) {\n        prototype.set(CommonFlags.MODULE_EXPORT);\n      }\n    }\n\n    this.checkOperatorOverloads(declaration.decorators, prototype, classPrototype);\n  }\n\n  private checkOperatorOverloads(\n    decorators: DecoratorNode[] | null,\n    prototype: FunctionPrototype,\n    classPrototype: ClassPrototype\n  ): void {\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        let decorator = decorators[i];\n        switch (decorator.decoratorKind) {\n          case DecoratorKind.OPERATOR:\n          case DecoratorKind.OPERATOR_BINARY:\n          case DecoratorKind.OPERATOR_PREFIX:\n          case DecoratorKind.OPERATOR_POSTFIX: {\n            let numArgs = decorator.arguments && decorator.arguments.length || 0;\n            if (numArgs == 1) {\n              let firstArg = (<Expression[]>decorator.arguments)[0];\n              if (\n                firstArg.kind == NodeKind.LITERAL &&\n                (<LiteralExpression>firstArg).literalKind == LiteralKind.STRING\n              ) {\n                let kind = operatorKindFromDecorator(\n                  decorator.decoratorKind,\n                  (<StringLiteralExpression>firstArg).value\n                );\n                if (kind == OperatorKind.INVALID) {\n                  this.error(\n                    DiagnosticCode.Operation_not_supported,\n                    firstArg.range\n                  );\n                } else {\n                  let overloads = classPrototype.overloadPrototypes;\n                  if (overloads.has(kind)) {\n                    this.error(\n                      DiagnosticCode.Duplicate_function_implementation,\n                      firstArg.range\n                    );\n                  } else {\n                    prototype.operatorKind = kind;\n                    overloads.set(kind, prototype);\n                  }\n                }\n              } else {\n                this.error(\n                  DiagnosticCode.String_literal_expected,\n                  firstArg.range\n                );\n              }\n            } else {\n              this.error(\n                DiagnosticCode.Expected_0_arguments_but_got_1,\n                decorator.range, \"1\", numArgs.toString(0)\n              );\n            }\n          }\n        }\n      }\n    }\n  }\n\n  private initializeAccessor(\n    declaration: MethodDeclaration,\n    classPrototype: ClassPrototype\n  ): void {\n    var simpleName = declaration.name.text;\n    var internalPropertyName = declaration.fileLevelInternalName;\n    var propertyElement = this.elementsLookup.get(internalPropertyName);\n    var isGetter = declaration.is(CommonFlags.GET);\n    var isNew = false;\n    if (propertyElement) {\n      if (\n        propertyElement.kind != ElementKind.PROPERTY ||\n        (isGetter\n          ? (<Property>propertyElement).getterPrototype\n          : (<Property>propertyElement).setterPrototype\n        ) != null\n      ) {\n        this.error(\n          DiagnosticCode.Duplicate_identifier_0,\n          declaration.name.range, internalPropertyName\n        );\n        return;\n      }\n    } else {\n      propertyElement = new Property(\n        this,\n        simpleName,\n        internalPropertyName,\n        classPrototype\n      );\n      isNew = true;\n    }\n\n    var decorators = declaration.decorators;\n    var decoratorFlags = DecoratorFlags.NONE;\n    if (decorators) {\n      decoratorFlags = this.checkDecorators(decorators,\n        DecoratorFlags.INLINE\n      );\n    }\n\n    var baseName = (isGetter ? GETTER_PREFIX : SETTER_PREFIX) + simpleName;\n\n    // static accessors become global functions\n    if (declaration.is(CommonFlags.STATIC)) {\n      let staticName = classPrototype.internalName + STATIC_DELIMITER + baseName;\n      if (this.elementsLookup.has(staticName)) {\n        this.error(\n          DiagnosticCode.Duplicate_identifier_0,\n          declaration.name.range, staticName\n        );\n        return;\n      }\n      let staticPrototype = new FunctionPrototype(\n        this,\n        baseName,\n        staticName,\n        declaration,\n        null,\n        decoratorFlags\n      );\n      if (isGetter) {\n        (<Property>propertyElement).getterPrototype = staticPrototype;\n      } else {\n        (<Property>propertyElement).setterPrototype = staticPrototype;\n      }\n      if (isNew) {\n        if (classPrototype.members) {\n          if (classPrototype.members.has(simpleName)) {\n            this.error(\n              DiagnosticCode.Duplicate_identifier_0,\n              declaration.name.range, staticName\n            );\n            return;\n          }\n        } else {\n          classPrototype.members = new Map();\n        }\n        classPrototype.members.set(simpleName, propertyElement); // check above\n      } else {\n        assert(classPrototype.members && classPrototype.members.has(simpleName));\n      }\n      this.elementsLookup.set(internalPropertyName, propertyElement);\n      if (classPrototype.is(CommonFlags.MODULE_EXPORT)) {\n        propertyElement.set(CommonFlags.MODULE_EXPORT);\n      }\n\n    // instance accessors are remembered until resolved\n    } else {\n      let instanceName = classPrototype.internalName + INSTANCE_DELIMITER + baseName;\n      if (classPrototype.instanceMembers) {\n        if (classPrototype.instanceMembers.has(baseName)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, internalPropertyName\n          );\n          return;\n        }\n      } else {\n        classPrototype.instanceMembers = new Map();\n      }\n      let instancePrototype = new FunctionPrototype(\n        this,\n        baseName,\n        instanceName,\n        declaration,\n        classPrototype,\n        decoratorFlags\n      );\n      if (isGetter) {\n        (<Property>propertyElement).getterPrototype = instancePrototype;\n      } else {\n        (<Property>propertyElement).setterPrototype = instancePrototype;\n      }\n      classPrototype.instanceMembers.set(baseName, propertyElement);\n      this.elementsLookup.set(internalPropertyName, propertyElement);\n      if (classPrototype.is(CommonFlags.MODULE_EXPORT)) {\n        propertyElement.set(CommonFlags.MODULE_EXPORT);\n        instancePrototype.set(CommonFlags.MODULE_EXPORT);\n      }\n    }\n  }\n\n  private initializeEnum(\n    declaration: EnumDeclaration,\n    namespace: Element | null = null\n  ): void {\n    var internalName = declaration.fileLevelInternalName;\n    if (this.elementsLookup.has(internalName)) {\n      this.error(\n        DiagnosticCode.Duplicate_identifier_0,\n        declaration.name.range, internalName\n      );\n      return;\n    }\n    var simpleName = declaration.name.text;\n    var element = new Enum(this, simpleName, internalName, declaration);\n    element.parent = namespace;\n    this.elementsLookup.set(internalName, element);\n\n    if (namespace) {\n      if (namespace.members) {\n        if (namespace.members.has(simpleName)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, internalName\n          );\n          return;\n        }\n      } else {\n        namespace.members = new Map();\n      }\n      namespace.members.set(simpleName, element);\n      if (namespace.is(CommonFlags.MODULE_EXPORT) && element.is(CommonFlags.EXPORT)) {\n        element.set(CommonFlags.MODULE_EXPORT);\n      }\n    } else if (element.is(CommonFlags.EXPORT)) { // no namespace\n      if (this.fileLevelExports.has(internalName)) {\n        this.error(\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n          declaration.name.range, internalName\n        );\n        return;\n      }\n      this.fileLevelExports.set(internalName, element);\n      this.currentFilespace.members.set(simpleName, element);\n      if (declaration.range.source.isEntry) {\n        if (this.moduleLevelExports.has(simpleName)) {\n          let existingExport = <ModuleExport>this.moduleLevelExports.get(simpleName);\n          this.error(\n            DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n            declaration.name.range, existingExport.element.internalName\n          );\n          return;\n        }\n        element.set(CommonFlags.MODULE_EXPORT);\n        this.moduleLevelExports.set(simpleName, <ModuleExport>{\n          element,\n          identifier: declaration.name\n        });\n      }\n    }\n\n    var values = declaration.values;\n    for (let i = 0, k = values.length; i < k; ++i) {\n      this.initializeEnumValue(values[i], element);\n    }\n\n    this.checkGlobal(element, declaration);\n  }\n\n  private initializeEnumValue(\n    declaration: EnumValueDeclaration,\n    enm: Enum\n  ): void {\n    var name = declaration.name.text;\n    var internalName = declaration.fileLevelInternalName;\n    if (enm.members) {\n      if (enm.members.has(name)) {\n        this.error(\n          DiagnosticCode.Duplicate_identifier_0,\n          declaration.name.range, internalName\n        );\n        return;\n      }\n    } else {\n      enm.members = new Map();\n    }\n    var value = new EnumValue(enm, this, name, internalName, declaration);\n    enm.members.set(name, value);\n    if (enm.is(CommonFlags.MODULE_EXPORT)) {\n      value.set(CommonFlags.MODULE_EXPORT);\n    }\n  }\n\n  private initializeExports(\n    statement: ExportStatement,\n    queuedExports: Map<string,QueuedExport>\n  ): void {\n    var members = statement.members;\n    if (members) { // named\n      for (let i = 0, k = members.length; i < k; ++i) {\n        this.initializeExport(members[i], statement.internalPath, queuedExports);\n      }\n    } else { // TODO: filespace\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        statement.range\n      );\n    }\n  }\n\n  private setExportAndCheckLibrary(\n    internalName: string,\n    element: Element,\n    externalIdentifier: IdentifierExpression\n  ): void {\n    // add to file-level exports\n    this.fileLevelExports.set(internalName, element);\n\n    // add to filespace\n    var internalPath = externalIdentifier.range.source.internalPath;\n    var prefix = FILESPACE_PREFIX + internalPath;\n    var filespace = this.elementsLookup.get(prefix);\n    if (!filespace) filespace = assert(this.elementsLookup.get(prefix + PATH_DELIMITER + \"index\"));\n    assert(filespace.kind == ElementKind.FILESPACE);\n    var simpleName = externalIdentifier.text;\n    (<Filespace>filespace).members.set(simpleName, element);\n\n    // add global alias if a top-level export of a library file\n    var source = externalIdentifier.range.source;\n    if (source.isLibrary) {\n      if (this.elementsLookup.has(simpleName)) {\n        this.error(\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n          externalIdentifier.range, simpleName\n        );\n      } else {\n        element.internalName = simpleName;\n        this.elementsLookup.set(simpleName, element);\n      }\n\n    // add module level export if a top-level export of an entry file\n    } else if (source.isEntry) {\n      this.moduleLevelExports.set(externalIdentifier.text, <ModuleExport>{\n        element,\n        identifier: externalIdentifier\n      });\n    }\n  }\n\n  private initializeExport(\n    member: ExportMember,\n    internalPath: string | null,\n    queuedExports: Map<string,QueuedExport>\n  ): void {\n    var externalName = member.range.source.internalPath + PATH_DELIMITER + member.externalName.text;\n    if (this.fileLevelExports.has(externalName)) {\n      this.error(\n        DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n        member.externalName.range, externalName\n      );\n      return;\n    }\n    var referencedName: string;\n    var referencedElement: Element | null;\n    var queuedExport: QueuedExport | null;\n\n    // export local element\n    if (internalPath == null) {\n      referencedName = member.range.source.internalPath + PATH_DELIMITER + member.name.text;\n\n      // resolve right away if the element exists\n      if (this.elementsLookup.has(referencedName)) {\n        this.setExportAndCheckLibrary(\n          externalName,\n          <Element>this.elementsLookup.get(referencedName),\n          member.externalName\n        );\n        return;\n      }\n\n      // otherwise queue it\n      if (queuedExports.has(externalName)) {\n        this.error(\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n          member.externalName.range, externalName\n        );\n        return;\n      }\n      queuedExport = new QueuedExport();\n      queuedExport.isReExport = false;\n      queuedExport.externalName = referencedName; // -> here: local name\n      queuedExport.member = member;\n      queuedExports.set(externalName, queuedExport);\n\n    // export external element\n    } else {\n      referencedName = internalPath + PATH_DELIMITER + member.name.text;\n\n      // resolve right away if the export exists\n      referencedElement = this.elementsLookup.get(referencedName);\n      if (referencedElement) {\n        this.setExportAndCheckLibrary(\n          externalName,\n          referencedElement,\n          member.externalName\n        );\n        return;\n      }\n\n      // walk already known queued exports\n      let seen = new Set<QueuedExport>();\n      while (queuedExport = queuedExports.get(referencedName)) {\n        if (queuedExport.isReExport) {\n          referencedElement = this.fileLevelExports.get(queuedExport.externalName);\n          if (referencedElement) {\n            this.setExportAndCheckLibrary(\n              externalName,\n              referencedElement,\n              member.externalName\n            );\n            return;\n          }\n          referencedName = queuedExport.externalName;\n          if (seen.has(queuedExport)) break;\n          seen.add(queuedExport);\n        } else {\n          referencedElement = this.elementsLookup.get(queuedExport.externalName);\n          if (referencedElement) {\n            this.setExportAndCheckLibrary(\n              externalName,\n              referencedElement,\n              member.externalName\n            );\n            return;\n          }\n          break;\n        }\n      }\n\n      // otherwise queue it\n      if (queuedExports.has(externalName)) {\n        this.error(\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n          member.externalName.range, externalName\n        );\n        return;\n      }\n      queuedExport = new QueuedExport();\n      queuedExport.isReExport = true;\n      queuedExport.externalName = referencedName; // -> here: external name\n      queuedExport.member = member;\n      queuedExports.set(externalName, queuedExport);\n    }\n  }\n\n  private initializeFunction(\n    declaration: FunctionDeclaration,\n    namespace: Element | null = null\n  ): void {\n    var internalName = declaration.fileLevelInternalName;\n    if (this.elementsLookup.has(internalName)) {\n      this.error(\n        DiagnosticCode.Duplicate_identifier_0,\n        declaration.name.range, internalName\n      );\n      return;\n    }\n    var simpleName = declaration.name.text;\n    var decorators = declaration.decorators;\n    var prototype = new FunctionPrototype(\n      this,\n      simpleName,\n      internalName,\n      declaration,\n      null,\n      decorators\n        ? this.checkDecorators(decorators,\n            DecoratorFlags.GLOBAL |\n            DecoratorFlags.INLINE |\n            DecoratorFlags.EXTERNAL\n          )\n        : DecoratorFlags.NONE\n    );\n    prototype.parent = namespace;\n    this.elementsLookup.set(internalName, prototype);\n\n    if (namespace) {\n      if (namespace.members) {\n        if (namespace.members.has(simpleName)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, internalName\n          );\n          return;\n        }\n      } else {\n        namespace.members = new Map();\n      }\n      namespace.members.set(simpleName, prototype);\n      if (namespace.is(CommonFlags.MODULE_EXPORT) && prototype.is(CommonFlags.EXPORT)) {\n        prototype.parent = namespace;\n        prototype.set(CommonFlags.MODULE_EXPORT);\n      }\n    } else if (prototype.is(CommonFlags.EXPORT)) { // no namespace\n      if (this.fileLevelExports.has(internalName)) {\n        this.error(\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n          declaration.name.range, internalName\n        );\n        return;\n      }\n      this.fileLevelExports.set(internalName, prototype);\n      this.currentFilespace.members.set(simpleName, prototype);\n      if (declaration.range.source.isEntry) {\n        if (this.moduleLevelExports.has(simpleName)) {\n          let existingExport = <ModuleExport>this.moduleLevelExports.get(simpleName);\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, existingExport.element.internalName\n          );\n          return;\n        }\n        prototype.set(CommonFlags.MODULE_EXPORT);\n        this.moduleLevelExports.set(simpleName, <ModuleExport>{\n          element: prototype,\n          identifier: declaration.name\n        });\n      }\n    }\n\n    this.checkGlobal(prototype, declaration);\n  }\n\n  private initializeImports(\n    statement: ImportStatement,\n    queuedExports: Map<string,QueuedExport>,\n    queuedImports: QueuedImport[]\n  ): void {\n    var declarations = statement.declarations;\n    if (declarations) {\n      for (let i = 0, k = declarations.length; i < k; ++i) {\n        this.initializeImport(\n          declarations[i],\n          statement.internalPath,\n          queuedExports, queuedImports\n        );\n      }\n    } else if (statement.namespaceName) { // import * as simpleName from \"file\"\n      let simpleName = statement.namespaceName.text;\n      let internalName = (\n        statement.range.source.internalPath +\n        PATH_DELIMITER +\n        simpleName\n      );\n      if (this.elementsLookup.has(internalName)) {\n        this.error(\n          DiagnosticCode.Duplicate_identifier_0,\n          statement.namespaceName.range,\n          internalName\n        );\n        return;\n      }\n\n      // resolve right away if the exact filespace exists\n      let filespace = this.elementsLookup.get(statement.internalPath);\n      if (filespace) {\n        this.elementsLookup.set(internalName, filespace);\n        return;\n      }\n\n      // otherwise queue it\n      let queuedImport = new QueuedImport();\n      queuedImport.localName = internalName;\n      let externalName = FILESPACE_PREFIX + statement.internalPath;\n      queuedImport.externalName = externalName;\n      queuedImport.externalNameAlt = externalName + PATH_DELIMITER + \"index\";\n      queuedImport.declaration = null; // filespace\n      queuedImports.push(queuedImport);\n    }\n  }\n\n  private initializeImport(\n    declaration: ImportDeclaration,\n    internalPath: string,\n    queuedNamedExports: Map<string,QueuedExport>,\n    queuedImports: QueuedImport[]\n  ): void {\n    var localName = declaration.fileLevelInternalName;\n    if (this.elementsLookup.has(localName)) {\n      this.error(\n        DiagnosticCode.Duplicate_identifier_0,\n        declaration.name.range, localName\n      );\n      return;\n    }\n\n    var externalName = internalPath + PATH_DELIMITER + declaration.externalName.text;\n\n    // resolve right away if the exact export exists\n    var element: Element | null;\n    if (element = this.fileLevelExports.get(externalName)) {\n      this.elementsLookup.set(localName, element);\n      return;\n    }\n\n    // otherwise queue it\n    const indexPart = PATH_DELIMITER + \"index\";\n    var queuedImport = new QueuedImport();\n    queuedImport.localName = localName;\n    if (internalPath.endsWith(indexPart)) {\n      queuedImport.externalName = externalName; // try exact first\n      queuedImport.externalNameAlt = (\n        internalPath.substring(0, internalPath.length - indexPart.length + 1) +\n        declaration.externalName.text\n      );\n    } else {\n      queuedImport.externalName = externalName; // try exact first\n      queuedImport.externalNameAlt = (\n        internalPath +\n        indexPart +\n        PATH_DELIMITER +\n        declaration.externalName.text\n      );\n    }\n    queuedImport.declaration = declaration; // named\n    queuedImports.push(queuedImport);\n  }\n\n  private initializeInterface(declaration: InterfaceDeclaration, namespace: Element | null = null): void {\n    var internalName = declaration.fileLevelInternalName;\n    if (this.elementsLookup.has(internalName)) {\n      this.error(\n        DiagnosticCode.Duplicate_identifier_0,\n        declaration.name.range, internalName\n      );\n      return;\n    }\n\n    var decorators = declaration.decorators;\n    var simpleName = declaration.name.text;\n    var prototype = new InterfacePrototype(\n      this,\n      simpleName,\n      internalName,\n      declaration,\n      decorators\n        ? this.checkDecorators(decorators, DecoratorFlags.GLOBAL)\n        : DecoratorFlags.NONE\n    );\n    prototype.parent = namespace;\n    this.elementsLookup.set(internalName, prototype);\n\n    if (namespace) {\n      if (namespace.members) {\n        if (namespace.members.has(prototype.internalName)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, internalName\n          );\n          return;\n        }\n      } else {\n        namespace.members = new Map();\n      }\n      namespace.members.set(prototype.internalName, prototype);\n      if (namespace.is(CommonFlags.MODULE_EXPORT) && prototype.is(CommonFlags.EXPORT)) {\n        prototype.set(CommonFlags.MODULE_EXPORT);\n      }\n    } else if (prototype.is(CommonFlags.EXPORT)) { // no namespace\n      if (this.fileLevelExports.has(internalName)) {\n        this.error(\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n          declaration.name.range, internalName\n        );\n        return;\n      }\n      this.fileLevelExports.set(internalName, prototype);\n      this.currentFilespace.members.set(simpleName, prototype);\n      if (declaration.range.source.isEntry) {\n        if (this.moduleLevelExports.has(simpleName)) {\n          let existingExport = <ModuleExport>this.moduleLevelExports.get(simpleName);\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, existingExport.element.internalName\n          );\n          return;\n        }\n        prototype.set(CommonFlags.MODULE_EXPORT);\n        this.moduleLevelExports.set(simpleName, <ModuleExport>{\n          element: prototype,\n          identifier: declaration.name\n        });\n      }\n    }\n\n    var memberDeclarations = declaration.members;\n    for (let i = 0, k = memberDeclarations.length; i < k; ++i) {\n      let memberDeclaration = memberDeclarations[i];\n      switch (memberDeclaration.kind) {\n\n        case NodeKind.FIELDDECLARATION: {\n          this.initializeField(<FieldDeclaration>memberDeclaration, prototype);\n          break;\n        }\n        case NodeKind.METHODDECLARATION: {\n          if (memberDeclaration.isAny(CommonFlags.GET | CommonFlags.SET)) {\n            this.initializeAccessor(<MethodDeclaration>memberDeclaration, prototype);\n          } else {\n            this.initializeMethod(<MethodDeclaration>memberDeclaration, prototype);\n          }\n          break;\n        }\n        default: {\n          throw new Error(\"interface member expected\");\n        }\n      }\n    }\n\n    this.checkGlobal(prototype, declaration);\n  }\n\n  private initializeNamespace(\n    declaration: NamespaceDeclaration,\n    queuedExtends: ClassPrototype[],\n    queuedImplements: ClassPrototype[],\n    parentNamespace: Element | null = null\n  ): void {\n    var internalName = declaration.fileLevelInternalName;\n    var simpleName = declaration.name.text;\n    var namespace = this.elementsLookup.get(internalName);\n    if (!namespace) {\n      namespace = new Namespace(this, simpleName, internalName, declaration);\n      namespace.parent = parentNamespace;\n      this.elementsLookup.set(internalName, namespace);\n      this.checkGlobal(namespace, declaration);\n    }\n\n    if (parentNamespace) {\n      if (parentNamespace.members) {\n        if (parentNamespace.members.has(simpleName)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, internalName\n          );\n          return;\n        }\n      } else {\n        parentNamespace.members = new Map();\n      }\n      parentNamespace.members.set(simpleName, namespace);\n      if (parentNamespace.is(CommonFlags.MODULE_EXPORT) && namespace.is(CommonFlags.EXPORT)) {\n        namespace.set(CommonFlags.MODULE_EXPORT);\n      }\n    } else if (namespace.is(CommonFlags.EXPORT)) { // no parent namespace\n      let existingExport = this.fileLevelExports.get(internalName);\n      if (existingExport) {\n        if (!existingExport.is(CommonFlags.EXPORT)) {\n          this.error(\n            DiagnosticCode.Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local,\n            declaration.name.range, namespace.internalName\n          ); // recoverable\n        }\n        namespace = existingExport; // join\n      } else {\n        this.fileLevelExports.set(internalName, namespace);\n      }\n      this.currentFilespace.members.set(simpleName, namespace);\n      if (declaration.range.source.isEntry) {\n        if (this.moduleLevelExports.has(simpleName)) {\n          let existingExport = <ModuleExport>this.moduleLevelExports.get(simpleName);\n          if (existingExport.element !== namespace) { // not merged\n            this.error(\n              DiagnosticCode.Duplicate_identifier_0,\n              declaration.name.range, existingExport.element.internalName\n            );\n            return;\n          }\n        } else {\n          this.moduleLevelExports.set(simpleName, <ModuleExport>{\n            element: namespace,\n            identifier: declaration.name\n          });\n        }\n        namespace.set(CommonFlags.MODULE_EXPORT);\n      }\n    }\n\n    var members = declaration.members;\n    for (let i = 0, k = members.length; i < k; ++i) {\n      switch (members[i].kind) {\n        case NodeKind.CLASSDECLARATION: {\n          this.initializeClass(<ClassDeclaration>members[i], queuedExtends, queuedImplements, namespace);\n          break;\n        }\n        case NodeKind.ENUMDECLARATION: {\n          this.initializeEnum(<EnumDeclaration>members[i], namespace);\n          break;\n        }\n        case NodeKind.FUNCTIONDECLARATION: {\n          this.initializeFunction(<FunctionDeclaration>members[i], namespace);\n          break;\n        }\n        case NodeKind.INTERFACEDECLARATION: {\n          this.initializeInterface(<InterfaceDeclaration>members[i], namespace);\n          break;\n        }\n        case NodeKind.NAMESPACEDECLARATION: {\n          this.initializeNamespace(<NamespaceDeclaration>members[i], queuedExtends, queuedImplements, namespace);\n          break;\n        }\n        case NodeKind.TYPEDECLARATION: {\n          // this.initializeTypeAlias(<TypeDeclaration>members[i], namespace);\n          // TODO: what about namespaced types?\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            members[i].range\n          );\n          break;\n        }\n        case NodeKind.VARIABLE: {\n          this.initializeVariables(<VariableStatement>members[i], namespace);\n          break;\n        }\n        default: {\n          throw new Error(\"namespace member expected\");\n        }\n      }\n    }\n  }\n\n  private initializeTypeAlias(declaration: TypeDeclaration, namespace: Element | null = null): void {\n    // type aliases are program globals\n    // TODO: what about namespaced types?\n    var name = declaration.name.text;\n    if (this.typesLookup.has(name) || this.typeAliases.has(name)) {\n      this.error(\n        DiagnosticCode.Duplicate_identifier_0,\n        declaration.name.range, name\n      );\n      return;\n    }\n    var alias = new TypeAlias();\n    alias.typeParameters = declaration.typeParameters;\n    alias.type = declaration.type;\n    this.typeAliases.set(name, alias);\n  }\n\n  private initializeVariables(statement: VariableStatement, namespace: Element | null = null): void {\n    var declarations = statement.declarations;\n    for (let i = 0, k = declarations.length; i < k; ++i) {\n      let declaration = declarations[i];\n      let decorators = declaration.decorators;\n      let internalName = declaration.fileLevelInternalName;\n      if (this.elementsLookup.has(internalName)) {\n        this.error(\n          DiagnosticCode.Duplicate_identifier_0,\n          declaration.name.range, internalName\n        );\n        continue;\n      }\n      let simpleName = declaration.name.text;\n      let global = new Global(\n        this,\n        simpleName,\n        internalName,\n        Type.void, // resolved later on\n        declaration,\n        decorators\n          ? this.checkDecorators(decorators,\n              DecoratorFlags.GLOBAL |\n              DecoratorFlags.INLINE |\n              DecoratorFlags.EXTERNAL\n            )\n          : DecoratorFlags.NONE\n      );\n      global.parent = namespace;\n      this.elementsLookup.set(internalName, global);\n\n      if (global.hasDecorator(DecoratorFlags.INLINE) && !global.is(CommonFlags.CONST)) {\n        this.error(\n          DiagnosticCode.Decorator_0_is_not_valid_here,\n          assert(findDecorator(DecoratorKind.INLINE, decorators)).range, \"inline\"\n        );\n      }\n\n      if (namespace) {\n        if (namespace.members) {\n          if (namespace.members.has(simpleName)) {\n            this.error(\n              DiagnosticCode.Duplicate_identifier_0,\n              declaration.name.range, internalName\n            );\n            continue;\n          }\n        } else {\n          namespace.members = new Map();\n        }\n        namespace.members.set(simpleName, global);\n        if (namespace.is(CommonFlags.MODULE_EXPORT) && global.is(CommonFlags.EXPORT)) {\n          global.set(CommonFlags.MODULE_EXPORT);\n        }\n      } else if (global.is(CommonFlags.EXPORT)) { // no namespace\n        if (this.fileLevelExports.has(internalName)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, internalName\n          );\n        } else {\n          this.fileLevelExports.set(internalName, global);\n        }\n        this.currentFilespace.members.set(simpleName, global);\n        if (declaration.range.source.isEntry) {\n          if (this.moduleLevelExports.has(simpleName)) {\n            let existingExport = <ModuleExport>this.moduleLevelExports.get(simpleName);\n            this.error(\n              DiagnosticCode.Duplicate_identifier_0,\n              declaration.name.range, existingExport.element.internalName\n            );\n            continue;\n          }\n          global.set(CommonFlags.MODULE_EXPORT);\n          this.moduleLevelExports.set(simpleName, <ModuleExport>{\n            element: global,\n            identifier: declaration.name\n          });\n        }\n      }\n      this.checkGlobal(global, declaration);\n    }\n  }\n}\n\n/** Indicates the specific kind of an {@link Element}. */\nexport enum ElementKind {\n  /** A {@link Global}. */\n  GLOBAL,\n  /** A {@link Local}. */\n  LOCAL,\n  /** An {@link Enum}. */\n  ENUM,\n  /** An {@link EnumValue}. */\n  ENUMVALUE,\n  /** A {@link FunctionPrototype}. */\n  FUNCTION_PROTOTYPE,\n  /** A {@link Function}. */\n  FUNCTION,\n  /** A {@link FunctionTarget}. */\n  FUNCTION_TARGET,\n  /** A {@link ClassPrototype}. */\n  CLASS_PROTOTYPE,\n  /** A {@link Class}. */\n  CLASS,\n  /** An {@link InterfacePrototype}. */\n  INTERFACE_PROTOTYPE,\n  /** An {@link Interface}. */\n  INTERFACE,\n  /** A {@link FieldPrototype}. */\n  FIELD_PROTOTYPE,\n  /** A {@link Field}. */\n  FIELD,\n  /** A {@link Property}. */\n  PROPERTY,\n  /** A {@link Namespace}. */\n  NAMESPACE,\n  /** A {@link Filespace}. */\n  FILESPACE,\n}\n\nexport enum DecoratorFlags {\n  /** No flags set. */\n  NONE = 0,\n  /** Is a program global. */\n  GLOBAL = 1 << 0,\n  /** Is a binary operator overload. */\n  OPERATOR_BINARY = 1 << 1,\n  /** Is a unary prefix operator overload. */\n  OPERATOR_PREFIX = 1 << 2,\n  /** Is a unary postfix operator overload. */\n  OPERATOR_POSTFIX = 1 << 3,\n  /** Is an unmanaged class. */\n  UNMANAGED = 1 << 4,\n  /** Is a sealed class. */\n  SEALED = 1 << 5,\n  /** Is always inlined. */\n  INLINE = 1 << 6,\n  /** Is using a different external name. */\n  EXTERNAL = 1 << 7,\n  /** Is a builtin. */\n  BUILTIN = 1 << 8\n}\n\nexport function decoratorKindToFlag(kind: DecoratorKind): DecoratorFlags {\n  switch (kind) {\n    case DecoratorKind.GLOBAL: return DecoratorFlags.GLOBAL;\n    case DecoratorKind.OPERATOR:\n    case DecoratorKind.OPERATOR_BINARY: return DecoratorFlags.OPERATOR_BINARY;\n    case DecoratorKind.OPERATOR_PREFIX: return DecoratorFlags.OPERATOR_PREFIX;\n    case DecoratorKind.OPERATOR_POSTFIX: return DecoratorFlags.OPERATOR_POSTFIX;\n    case DecoratorKind.UNMANAGED: return DecoratorFlags.UNMANAGED;\n    case DecoratorKind.SEALED: return DecoratorFlags.SEALED;\n    case DecoratorKind.INLINE: return DecoratorFlags.INLINE;\n    case DecoratorKind.EXTERNAL: return DecoratorFlags.EXTERNAL;\n    case DecoratorKind.BUILTIN: return DecoratorFlags.BUILTIN;\n    default: return DecoratorFlags.NONE;\n  }\n}\n\n/** Base class of all program elements. */\nexport abstract class Element {\n\n  /** Specific element kind. */\n  kind: ElementKind;\n  /** Containing {@link Program}. */\n  program: Program;\n  /** Simple name. */\n  simpleName: string;\n  /** Internal name referring to this element. */\n  internalName: string;\n  /** Common flags indicating specific traits. */\n  flags: CommonFlags = CommonFlags.NONE;\n  /** Decorator flags indicating annotated traits. */\n  decoratorFlags: DecoratorFlags = DecoratorFlags.NONE;\n  /** Namespaced member elements. */\n  members: Map<string,Element> | null = null;\n  /** Parent element, if applicable. */\n  parent: Element | null = null;\n\n  /** Constructs a new element, linking it to its containing {@link Program}. */\n  protected constructor(program: Program, simpleName: string, internalName: string) {\n    this.program = program;\n    this.simpleName = simpleName;\n    this.internalName = internalName;\n  }\n\n  /** Tests if this element has a specific flag or flags. */\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\n  /** Tests if this element has any of the specified flags. */\n  isAny(flags: CommonFlags): bool { return (this.flags & flags) != 0; }\n  /** Sets a specific flag or flags. */\n  set(flag: CommonFlags): void { this.flags |= flag; }\n  /** Tests if this element has a specific decorator flag or flags. */\n  hasDecorator(flag: DecoratorFlags): bool { return (this.decoratorFlags & flag) == flag; }\n}\n\n/** A filespace representing the implicit top-level namespace of a source. */\nexport class Filespace extends Element {\n\n  kind = ElementKind.FILESPACE;\n\n  /** File members (externally visible only). */\n  members: Map<string,Element>; // more specific\n\n  /** Constructs a new filespace. */\n  constructor(\n    program: Program,\n    source: Source\n  ) {\n    super(program, source.internalPath, FILESPACE_PREFIX + source.internalPath);\n    this.members = new Map();\n  }\n}\n\n/** A namespace that differs from a filespace in being user-declared with a name. */\nexport class Namespace extends Element {\n\n  // All elements have namespace semantics. This is an explicitly declared one.\n  kind = ElementKind.NAMESPACE;\n\n  /** Declaration reference. */\n  declaration: NamespaceDeclaration; // more specific\n\n  /** Constructs a new namespace. */\n  constructor(\n    program: Program,\n    simpleName: string,\n    internalName: string,\n    declaration: NamespaceDeclaration\n  ) {\n    super(program, simpleName, internalName);\n    this.declaration = declaration;\n    this.flags = declaration.flags;\n  }\n}\n\n/** An enum. */\nexport class Enum extends Element {\n\n  kind = ElementKind.ENUM;\n\n  /** Declaration reference. */\n  declaration: EnumDeclaration;\n\n  /** Constructs a new enum. */\n  constructor(\n    program: Program,\n    simpleName: string,\n    internalName: string,\n    declaration: EnumDeclaration\n  ) {\n    super(program, simpleName, internalName);\n    this.declaration = declaration;\n    this.flags = declaration.flags;\n  }\n}\n\n/** An enum value. */\nexport class EnumValue extends Element {\n\n  kind = ElementKind.ENUMVALUE;\n\n  /** Declaration reference. */\n  declaration: EnumValueDeclaration;\n  /** Constant value, if applicable. */\n  constantValue: i32 = 0;\n\n  constructor(\n    enm: Enum,\n    program: Program,\n    simpleName: string,\n    internalName: string,\n    declaration: EnumValueDeclaration\n  ) {\n    super(program, simpleName, internalName);\n    this.parent = enm;\n    this.declaration = declaration;\n  }\n}\n\nexport const enum ConstantValueKind {\n  NONE,\n  INTEGER,\n  FLOAT\n}\n\nexport class VariableLikeElement extends Element {\n\n  // kind varies\n\n  /** Declaration reference. */\n  declaration: VariableLikeDeclarationStatement | null;\n  /** Variable type. Is {@link Type.void} for type-inferred {@link Global}s before compilation. */\n  type: Type;\n  /** Constant value kind. */\n  constantValueKind: ConstantValueKind = ConstantValueKind.NONE;\n  /** Constant integer value, if applicable. */\n  constantIntegerValue: I64;\n  /** Constant float value, if applicable. */\n  constantFloatValue: f64;\n\n  protected constructor(\n    program: Program,\n    simpleName: string,\n    internalName: string,\n    type: Type,\n    declaration: VariableLikeDeclarationStatement | null\n  ) {\n    super(program, simpleName, internalName);\n    this.type = type;\n    this.declaration = declaration;\n  }\n\n  withConstantIntegerValue(value: I64): this {\n    this.constantValueKind = ConstantValueKind.INTEGER;\n    this.constantIntegerValue = value;\n    this.set(CommonFlags.CONST | CommonFlags.INLINED);\n    return this;\n  }\n\n  withConstantFloatValue(value: f64): this {\n    this.constantValueKind = ConstantValueKind.FLOAT;\n    this.constantFloatValue = value;\n    this.set(CommonFlags.CONST | CommonFlags.INLINED);\n    return this;\n  }\n}\n\n/** A global variable. */\nexport class Global extends VariableLikeElement {\n\n  kind = ElementKind.GLOBAL;\n\n  constructor(\n    program: Program,\n    simpleName: string,\n    internalName: string,\n    type: Type,\n    declaration: VariableLikeDeclarationStatement | null,\n    decoratorFlags: DecoratorFlags\n  ) {\n    super(program, simpleName, internalName, type, declaration);\n    this.flags = declaration ? declaration.flags : CommonFlags.NONE;\n    this.decoratorFlags = decoratorFlags;\n    this.type = type; // resolved later if `void`\n  }\n}\n\n/** A function parameter. */\nexport class Parameter {\n\n  // not an Element on its own\n\n  /** Parameter name. */\n  name: string;\n  /** Parameter type. */\n  type: Type;\n  /** Parameter initializer. */\n  initializer: Expression | null;\n\n  /** Constructs a new function parameter. */\n  constructor(name: string, type: Type, initializer: Expression | null = null) {\n    this.name = name;\n    this.type = type;\n    this.initializer = initializer;\n  }\n}\n\n/** A function local. */\nexport class Local extends VariableLikeElement {\n\n  kind = ElementKind.LOCAL;\n\n  /** Local index. */\n  index: i32;\n  /** Respective scoped global, if any. */\n  scopedGlobal: Global | null = null;\n\n  constructor(\n    program: Program,\n    simpleName: string,\n    index: i32,\n    type: Type,\n    declaration: VariableLikeDeclarationStatement | null = null\n  ) {\n    super(program, simpleName, simpleName, type, declaration);\n    this.index = index;\n  }\n}\n\n/** A yet unresolved function prototype. */\nexport class FunctionPrototype extends Element {\n\n  kind = ElementKind.FUNCTION_PROTOTYPE;\n\n  /** Declaration reference. */\n  declaration: FunctionDeclaration;\n  /** If an instance method, the class prototype reference. */\n  classPrototype: ClassPrototype | null;\n  /** Resolved instances. */\n  instances: Map<string,Function> = new Map();\n  /** Class type arguments, if a partially resolved method of a generic class. Not set otherwise. */\n  classTypeArguments: Type[] | null = null;\n  /** Operator kind, if an overload. */\n  operatorKind: OperatorKind = OperatorKind.INVALID;\n\n  /** Constructs a new function prototype. */\n  constructor(\n    program: Program,\n    simpleName: string,\n    internalName: string,\n    declaration: FunctionDeclaration,\n    classPrototype: ClassPrototype | null = null,\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(program, simpleName, internalName);\n    this.declaration = declaration;\n    this.flags = declaration.flags;\n    this.classPrototype = classPrototype;\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  toString(): string { return this.simpleName; }\n}\n\n/** A resolved function. */\nexport class Function extends Element {\n\n  kind = ElementKind.FUNCTION;\n\n  /** Prototype reference. */\n  prototype: FunctionPrototype;\n  /** Function signature. */\n  signature: Signature;\n  /** Map of locals by name. */\n  localsByName: Map<string,Local> = new Map();\n  /** Array of locals by index. */\n  localsByIndex: Local[] = [];\n  /** List of additional non-parameter locals. */\n  additionalLocals: Type[] = [];\n  /** Current break context label. */\n  breakContext: string | null = null;\n  /** Contextual type arguments. */\n  contextualTypeArguments: Map<string,Type> | null;\n  /** Current control flow. */\n  flow: Flow;\n  /** Remembered debug locations. */\n  debugLocations: Range[] = [];\n  /** Function reference, if compiled. */\n  ref: FunctionRef = 0;\n  /** Function table index, if any. */\n  functionTableIndex: i32 = -1;\n  /** Trampoline function for calling with omitted arguments. */\n  trampoline: Function | null = null;\n  /** The outer scope, if a function expression. */\n  outerScope: Flow | null = null;\n\n  private nextBreakId: i32 = 0;\n  private breakStack: i32[] | null = null;\n  nextInlineId: i32 = 0;\n\n  /** Constructs a new concrete function. */\n  constructor(\n    prototype: FunctionPrototype,\n    internalName: string,\n    signature: Signature,\n    parent: Element | null = null,\n    contextualTypeArguments: Map<string,Type> | null = null\n  ) {\n    super(prototype.program, prototype.simpleName, internalName);\n    this.prototype = prototype;\n    this.signature = signature;\n    this.parent = parent;\n    this.flags = prototype.flags;\n    this.decoratorFlags = prototype.decoratorFlags;\n    this.contextualTypeArguments = contextualTypeArguments;\n    if (!(prototype.is(CommonFlags.AMBIENT))) {\n      let localIndex = 0;\n      if (parent && parent.kind == ElementKind.CLASS) {\n        assert(this.is(CommonFlags.INSTANCE));\n        let local = new Local(\n          prototype.program,\n          \"this\",\n          localIndex++,\n          assert(signature.thisType)\n        );\n        this.localsByName.set(\"this\", local);\n        this.localsByIndex[local.index] = local;\n        let inheritedTypeArguments = (<Class>parent).contextualTypeArguments;\n        if (inheritedTypeArguments) {\n          if (!this.contextualTypeArguments) this.contextualTypeArguments = new Map();\n          for (let [inheritedName, inheritedType] of inheritedTypeArguments) {\n            if (!this.contextualTypeArguments.has(inheritedName)) {\n              this.contextualTypeArguments.set(inheritedName, inheritedType);\n            }\n          }\n        }\n      } else {\n        assert(!this.is(CommonFlags.INSTANCE)); // internal error\n      }\n      let parameterTypes = signature.parameterTypes;\n      for (let i = 0, k = parameterTypes.length; i < k; ++i) {\n        let parameterType = parameterTypes[i];\n        let parameterName = signature.getParameterName(i);\n        let local = new Local(\n          prototype.program,\n          parameterName,\n          localIndex++,\n          parameterType\n          // FIXME: declaration?\n        );\n        this.localsByName.set(parameterName, local);\n        this.localsByIndex[local.index] = local;\n      }\n    }\n    this.flow = Flow.create(this);\n  }\n\n  /** Adds a local of the specified type, with an optional name. */\n  addLocal(type: Type, name: string | null = null, declaration: VariableDeclaration | null = null): Local {\n    // if it has a name, check previously as this method will throw otherwise\n    var localIndex = this.signature.parameterTypes.length + this.additionalLocals.length;\n    if (this.is(CommonFlags.INSTANCE)) ++localIndex;\n    var local = new Local(\n      this.prototype.program,\n      name\n        ? name\n        : \"var$\" + localIndex.toString(10),\n      localIndex,\n      type,\n      declaration\n    );\n    if (name) {\n      if (this.localsByName.has(name)) throw new Error(\"duplicate local name\");\n      this.localsByName.set(name, local);\n    }\n    this.localsByIndex[local.index] = local;\n    this.additionalLocals.push(type);\n    return local;\n  }\n\n  private tempI32s: Local[] | null = null;\n  private tempI64s: Local[] | null = null;\n  private tempF32s: Local[] | null = null;\n  private tempF64s: Local[] | null = null;\n\n  /** Gets a free temporary local of the specified type. */\n  getTempLocal(type: Type, wrapped: bool = false): Local {\n    var temps: Local[] | null;\n    switch (type.toNativeType()) {\n      case NativeType.I32: {\n        temps = this.tempI32s;\n        break;\n      }\n      case NativeType.I64: {\n        temps = this.tempI64s;\n        break;\n      }\n      case NativeType.F32: {\n        temps = this.tempF32s;\n        break;\n      }\n      case NativeType.F64: {\n        temps = this.tempF64s;\n        break;\n      }\n      default: throw new Error(\"concrete type expected\");\n    }\n    var local: Local;\n    if (temps && temps.length) {\n      local = temps.pop();\n      local.type = type;\n      local.flags = CommonFlags.NONE;\n    } else {\n      local = this.addLocal(type);\n    }\n    if (type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\n      this.flow.setLocalWrapped(local.index, wrapped);\n    }\n    return local;\n  }\n\n  /** Frees the temporary local for reuse. */\n  freeTempLocal(local: Local): void {\n    if (local.is(CommonFlags.INLINED)) return;\n    assert(local.index >= 0);\n    var temps: Local[];\n    assert(local.type != null); // internal error\n    switch ((<Type>local.type).toNativeType()) {\n      case NativeType.I32: {\n        temps = this.tempI32s || (this.tempI32s = []);\n        break;\n      }\n      case NativeType.I64: {\n        temps = this.tempI64s || (this.tempI64s = []);\n        break;\n      }\n      case NativeType.F32: {\n        temps = this.tempF32s || (this.tempF32s = []);\n        break;\n      }\n      case NativeType.F64: {\n        temps = this.tempF64s || (this.tempF64s = []);\n        break;\n      }\n      default: throw new Error(\"concrete type expected\");\n    }\n    assert(local.index >= 0);\n    temps.push(local);\n  }\n\n  /** Gets and immediately frees a temporary local of the specified type. */\n  getAndFreeTempLocal(type: Type, wrapped: bool): Local {\n    var temps: Local[];\n    switch (type.toNativeType()) {\n      case NativeType.I32: {\n        temps = this.tempI32s || (this.tempI32s = []);\n        break;\n      }\n      case NativeType.I64: {\n        temps = this.tempI64s || (this.tempI64s = []);\n        break;\n      }\n      case NativeType.F32: {\n        temps = this.tempF32s || (this.tempF32s = []);\n        break;\n      }\n      case NativeType.F64: {\n        temps = this.tempF64s || (this.tempF64s = []);\n        break;\n      }\n      default: throw new Error(\"concrete type expected\");\n    }\n    var local: Local;\n    if (temps.length) {\n      local = temps[temps.length - 1];\n      local.type = type;\n    } else {\n      local = this.addLocal(type);\n      temps.push(local);\n    }\n    if (type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\n      this.flow.setLocalWrapped(local.index, wrapped);\n    }\n    return local;\n  }\n\n  /** Enters a(nother) break context. */\n  enterBreakContext(): string {\n    var id = this.nextBreakId++;\n    if (!this.breakStack) this.breakStack = [ id ];\n    else this.breakStack.push(id);\n    return this.breakContext = id.toString(10);\n  }\n\n  /** Leaves the current break context. */\n  leaveBreakContext(): void {\n    assert(this.breakStack != null);\n    var length = (<i32[]>this.breakStack).length;\n    assert(length > 0);\n    (<i32[]>this.breakStack).pop();\n    if (length > 1) {\n      this.breakContext = (<i32[]>this.breakStack)[length - 2].toString(10);\n    } else {\n      this.breakContext = null;\n      this.breakStack = null;\n    }\n  }\n\n  /** Finalizes the function once compiled, releasing no longer needed resources. */\n  finalize(module: Module, ref: FunctionRef): void {\n    this.ref = ref;\n    assert(!this.breakStack || !this.breakStack.length); // internal error\n    this.breakStack = null;\n    this.breakContext = null;\n    this.tempI32s = this.tempI64s = this.tempF32s = this.tempF64s = null;\n    if (this.program.options.sourceMap) {\n      let debugLocations = this.debugLocations;\n      for (let i = 0, k = debugLocations.length; i < k; ++i) {\n        let debugLocation = debugLocations[i];\n        module.setDebugLocation(\n          ref,\n          debugLocation.debugInfoRef,\n          debugLocation.source.debugInfoIndex,\n          debugLocation.line,\n          debugLocation.column\n        );\n      }\n    }\n  }\n\n  /** Returns the TypeScript representation of this function. */\n  toString(): string { return this.prototype.simpleName; }\n}\n\n/** A resolved function target, that is a function called indirectly by an index and signature. */\nexport class FunctionTarget extends Element {\n\n  kind = ElementKind.FUNCTION_TARGET;\n\n  /** Underlying signature. */\n  signature: Signature;\n  /** Function type. */\n  type: Type;\n\n  /** Constructs a new function target. */\n  constructor(program: Program, signature: Signature) {\n    super(program, \"\", \"\");\n    var simpleName = signature.toSignatureString();\n    this.simpleName = simpleName;\n    this.internalName = simpleName;\n    this.signature = signature;\n    this.type = Type.u32.asFunction(signature);\n  }\n}\n\n/** A yet unresolved instance field prototype. */\nexport class FieldPrototype extends Element {\n\n  kind = ElementKind.FIELD_PROTOTYPE;\n\n  /** Declaration reference. */\n  declaration: FieldDeclaration;\n  /** Parent class prototype. */\n  classPrototype: ClassPrototype;\n\n  /** Constructs a new field prototype. */\n  constructor(\n    classPrototype: ClassPrototype,\n    simpleName: string,\n    internalName: string,\n    declaration: FieldDeclaration\n  ) {\n    super(classPrototype.program, simpleName, internalName);\n    this.classPrototype = classPrototype;\n    this.declaration = declaration;\n    this.flags = declaration.flags;\n  }\n}\n\n/** A resolved instance field. */\nexport class Field extends VariableLikeElement {\n\n  kind = ElementKind.FIELD;\n\n  /** Field prototype reference. */\n  prototype: FieldPrototype;\n  /** Field memory offset, if an instance field. */\n  memoryOffset: i32 = -1;\n\n  /** Constructs a new field. */\n  constructor(\n    prototype: FieldPrototype,\n    internalName: string,\n    type: Type,\n    declaration: FieldDeclaration,\n    parent: Class\n  ) {\n    super(prototype.program, prototype.simpleName, internalName, type, declaration);\n    this.prototype = prototype;\n    this.flags = prototype.flags;\n    this.type = type;\n    this.parent = parent;\n  }\n}\n\n/** A property comprised of a getter and a setter function. */\nexport class Property extends Element {\n\n  kind = ElementKind.PROPERTY;\n\n  /** Parent class prototype. */\n  parent: ClassPrototype;\n  /** Getter prototype. */\n  getterPrototype: FunctionPrototype | null = null;\n  /** Setter prototype. */\n  setterPrototype: FunctionPrototype | null = null;\n\n  /** Constructs a new property prototype. */\n  constructor(\n    program: Program,\n    simpleName: string,\n    internalName: string,\n    parent: ClassPrototype\n  ) {\n    super(program, simpleName, internalName);\n    this.parent = parent;\n  }\n}\n\n/** A yet unresolved class prototype. */\nexport class ClassPrototype extends Element {\n\n  kind = ElementKind.CLASS_PROTOTYPE;\n\n  /** Declaration reference. */\n  declaration: ClassDeclaration;\n  /** Resolved instances. */\n  instances: Map<string,Class> = new Map();\n  /** Instance member prototypes. */\n  instanceMembers: Map<string,Element> | null = null;\n  /** Base class prototype, if applicable. */\n  basePrototype: ClassPrototype | null = null; // set in Program#initialize\n  /** Constructor prototype. */\n  constructorPrototype: FunctionPrototype | null = null;\n  /** Operator overload prototypes. */\n  overloadPrototypes: Map<OperatorKind, FunctionPrototype> = new Map();\n\n  constructor(\n    program: Program,\n    simpleName: string,\n    internalName: string,\n    declaration: ClassDeclaration,\n    decoratorFlags: DecoratorFlags\n  ) {\n    super(program, simpleName, internalName);\n    this.declaration = declaration;\n    this.flags = declaration.flags;\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  toString(): string {\n    return this.simpleName;\n  }\n}\n\n/** A resolved class. */\nexport class Class extends Element {\n\n  kind = ElementKind.CLASS;\n\n  /** Prototype reference. */\n  prototype: ClassPrototype;\n  /** Resolved type arguments. */\n  typeArguments: Type[] | null;\n  /** Resolved class type. */\n  type: Type;\n  /** Base class, if applicable. */\n  base: Class | null;\n  /** Contextual type arguments for fields and methods. */\n  contextualTypeArguments: Map<string,Type> | null = null;\n  /** Current member memory offset. */\n  currentMemoryOffset: u32 = 0;\n  /** Constructor instance. */\n  constructorInstance: Function | null = null;\n  /** Operator overloads. */\n  overloads: Map<OperatorKind,Function> | null = null;\n  /** Function index of the GC hook. */\n  gcHookIndex: u32 = <u32>-1;\n\n  /** Constructs a new class. */\n  constructor(\n    prototype: ClassPrototype,\n    simpleName: string,\n    internalName: string,\n    typeArguments: Type[] | null = null,\n    base: Class | null = null\n  ) {\n    super(prototype.program, simpleName, internalName);\n    this.prototype = prototype;\n    this.flags = prototype.flags;\n    this.decoratorFlags = prototype.decoratorFlags;\n    this.typeArguments = typeArguments;\n    this.type = prototype.program.options.usizeType.asClass(this);\n    this.base = base;\n\n    // inherit static members and contextual type arguments from base class\n    if (base) {\n      let inheritedTypeArguments = base.contextualTypeArguments;\n      if (inheritedTypeArguments) {\n        if (!this.contextualTypeArguments) this.contextualTypeArguments = new Map();\n        for (let [baseName, baseType] of inheritedTypeArguments) {\n          this.contextualTypeArguments.set(baseName, baseType);\n        }\n      }\n    }\n\n    // apply instance-specific contextual type arguments\n    var declaration = this.prototype.declaration;\n    var i: i32, k: i32;\n    if (declaration) { // irrelevant for built-ins\n      let typeParameters = declaration.typeParameters;\n      if (typeArguments) {\n        if ((k = typeArguments.length) != typeParameters.length) {\n          throw new Error(\"type argument count mismatch\");\n        }\n        if (k) {\n          if (!this.contextualTypeArguments) this.contextualTypeArguments = new Map();\n          for (i = 0; i < k; ++i) {\n            this.contextualTypeArguments.set(typeParameters[i].name.text, typeArguments[i]);\n          }\n        }\n      } else if (typeParameters.length) {\n        throw new Error(\"type argument count mismatch\");\n      }\n    }\n  }\n\n  /** Tests if a value of this class type is assignable to a target of the specified class type. */\n  isAssignableTo(target: Class): bool {\n    var current: Class | null = this;\n    do if (current == target) return true;\n    while (current = current.base);\n    return false;\n  }\n\n  /** Looks up the operator overload of the specified kind. */\n  lookupOverload(kind: OperatorKind, unchecked: bool = false): Function | null {\n    if (unchecked) {\n      switch (kind) {\n        case OperatorKind.INDEXED_GET: {\n          let uncheckedOverload = this.lookupOverload(OperatorKind.UNCHECKED_INDEXED_GET);\n          if (uncheckedOverload) return uncheckedOverload;\n          break;\n        }\n        case OperatorKind.INDEXED_SET: {\n          let uncheckedOverload = this.lookupOverload(OperatorKind.UNCHECKED_INDEXED_SET);\n          if (uncheckedOverload) return uncheckedOverload;\n          break;\n        }\n        default: assert(false);\n      }\n    }\n    var instance: Class | null = this;\n    do {\n      let overloads = instance.overloads;\n      if (overloads) {\n        let overload = overloads.get(kind);\n        if (overload) return overload;\n      }\n    } while (instance = instance.base);\n    return null;\n  }\n\n  offsetof(fieldName: string): u32 {\n    var members = assert(this.members);\n    assert(members.has(fieldName));\n    var field = <Element>members.get(fieldName);\n    assert(field.kind == ElementKind.FIELD);\n    return (<Field>field).memoryOffset;\n  }\n\n  toString(): string {\n    return this.simpleName;\n  }\n}\n\n/** A yet unresolved interface. */\nexport class InterfacePrototype extends ClassPrototype {\n\n  kind = ElementKind.INTERFACE_PROTOTYPE;\n\n  /** Declaration reference. */\n  declaration: InterfaceDeclaration; // more specific\n\n  /** Constructs a new interface prototype. */\n  constructor(\n    program: Program,\n    simpleName: string,\n    internalName: string,\n    declaration: InterfaceDeclaration,\n    decoratorFlags: DecoratorFlags\n  ) {\n    super(program, simpleName, internalName, declaration, decoratorFlags);\n  }\n}\n\n/** A resolved interface. */\nexport class Interface extends Class {\n\n  kind = ElementKind.INTERFACE;\n\n  /** Prototype reference. */\n  prototype: InterfacePrototype; // more specific\n  /** Base interface, if applcable. */\n  base: Interface | null; // more specific\n\n  /** Constructs a new interface. */\n  constructor(\n    prototype: InterfacePrototype,\n    simpleName: string,\n    internalName: string,\n    typeArguments: Type[] = [],\n    base: Interface | null = null\n  ) {\n    super(prototype, simpleName, internalName, typeArguments, base);\n  }\n}\n\n/** Control flow flags indicating specific conditions. */\nexport const enum FlowFlags {\n  /** No specific conditions. */\n  NONE = 0,\n\n  // categorical\n\n  /** This branch always returns. */\n  RETURNS = 1 << 0,\n  /** This branch always returns a wrapped value. */\n  RETURNS_WRAPPED = 1 << 1,\n  /** This branch always throws. */\n  THROWS = 1 << 2,\n  /** This branch always breaks. */\n  BREAKS = 1 << 3,\n  /** This branch always continues. */\n  CONTINUES = 1 << 4,\n  /** This branch always allocates. Constructors only. */\n  ALLOCATES = 1 << 5,\n\n  // conditional\n\n  /** This branch conditionally returns in a child branch. */\n  CONDITIONALLY_RETURNS = 1 << 6,\n  /** This branch conditionally throws in a child branch. */\n  CONDITIONALLY_THROWS = 1 << 7,\n  /** This branch conditionally breaks in a child branch. */\n  CONDITIONALLY_BREAKS = 1 << 8,\n  /** This branch conditionally continues in a child branch. */\n  CONDITIONALLY_CONTINUES = 1 << 9,\n  /** This branch conditionally allocates in a child branch. Constructors only. */\n  CONDITIONALLY_ALLOCATES = 1 << 10,\n\n  // special\n\n  /** This branch is part of inlining a function. */\n  INLINE_CONTEXT = 1 << 11,\n  /** This branch explicitly requests no bounds checking. */\n  UNCHECKED_CONTEXT = 1 << 12,\n\n  // masks\n\n  /** Any terminating flag. */\n  ANY_TERMINATING = FlowFlags.RETURNS\n                  | FlowFlags.THROWS\n                  | FlowFlags.BREAKS\n                  | FlowFlags.CONTINUES,\n\n  /** Any categorical flag. */\n  ANY_CATEGORICAL = FlowFlags.RETURNS\n                  | FlowFlags.RETURNS_WRAPPED\n                  | FlowFlags.THROWS\n                  | FlowFlags.BREAKS\n                  | FlowFlags.CONTINUES\n                  | FlowFlags.ALLOCATES,\n\n  /** Any conditional flag. */\n  ANY_CONDITIONAL = FlowFlags.CONDITIONALLY_RETURNS\n                  | FlowFlags.CONDITIONALLY_THROWS\n                  | FlowFlags.CONDITIONALLY_BREAKS\n                  | FlowFlags.CONDITIONALLY_CONTINUES\n                  | FlowFlags.CONDITIONALLY_ALLOCATES\n}\n\n/** A control flow evaluator. */\nexport class Flow {\n\n  /** Parent flow. */\n  parent: Flow | null;\n  /** Flow flags indicating specific conditions. */\n  flags: FlowFlags;\n  /** Function this flow belongs to. */\n  currentFunction: Function;\n  /** The label we break to when encountering a continue statement. */\n  continueLabel: string | null;\n  /** The label we break to when encountering a break statement. */\n  breakLabel: string | null;\n  /** The label we break to when encountering a return statement, when inlining. */\n  returnLabel: string | null;\n  /** The current return type. */\n  returnType: Type;\n  /** The current contextual type arguments. */\n  contextualTypeArguments: Map<string,Type> | null;\n  /** Scoped local variables. */\n  scopedLocals: Map<string,Local> | null = null;\n  /** Local variable wrap states for the first 64 locals. */\n  wrappedLocals: I64;\n  /** Local variable wrap states for locals with index >= 64. */\n  wrappedLocalsExt: I64[] | null;\n\n  /** Creates the parent flow of the specified function. */\n  static create(currentFunction: Function): Flow {\n    var parentFlow = new Flow();\n    parentFlow.parent = null;\n    parentFlow.flags = FlowFlags.NONE;\n    parentFlow.currentFunction = currentFunction;\n    parentFlow.continueLabel = null;\n    parentFlow.breakLabel = null;\n    parentFlow.returnLabel = null;\n    parentFlow.returnType = currentFunction.signature.returnType;\n    parentFlow.contextualTypeArguments = currentFunction.contextualTypeArguments;\n    parentFlow.wrappedLocals = i64_new(0);\n    parentFlow.wrappedLocalsExt = null;\n    return parentFlow;\n  }\n\n  private constructor() { }\n\n  /** Tests if this flow has the specified flag or flags. */\n  is(flag: FlowFlags): bool { return (this.flags & flag) == flag; }\n  /** Tests if this flow has one of the specified flags. */\n  isAny(flag: FlowFlags): bool { return (this.flags & flag) != 0; }\n  /** Sets the specified flag or flags. */\n  set(flag: FlowFlags): void { this.flags |= flag; }\n  /** Unsets the specified flag or flags. */\n  unset(flag: FlowFlags): void { this.flags &= ~flag; }\n\n  /** Forks this flow to a child flow. */\n  fork(): Flow {\n    var branch = new Flow();\n    branch.parent = this;\n    branch.flags = this.flags;\n    branch.currentFunction = this.currentFunction;\n    branch.continueLabel = this.continueLabel;\n    branch.breakLabel = this.breakLabel;\n    branch.returnLabel = this.returnLabel;\n    branch.returnType = this.returnType;\n    branch.contextualTypeArguments = this.contextualTypeArguments;\n    branch.wrappedLocals = this.wrappedLocals;\n    branch.wrappedLocalsExt = this.wrappedLocalsExt ? this.wrappedLocalsExt.slice() : null;\n    return branch;\n  }\n\n  /** Frees this flow's scoped variables. */\n  free(): Flow {\n    var parent = assert(this.parent);\n    if (this.scopedLocals) { // free block-scoped locals\n      for (let scopedLocal of this.scopedLocals.values()) {\n        if (scopedLocal.is(CommonFlags.SCOPED)) { // otherwise an alias\n          this.currentFunction.freeTempLocal(scopedLocal);\n        }\n      }\n      this.scopedLocals = null;\n    }\n    return parent;\n  }\n\n  /** Adds a new scoped local of the specified name. */\n  addScopedLocal(type: Type, name: string, wrapped: bool, declaration?: VariableDeclaration): Local {\n    var scopedLocal = this.currentFunction.getTempLocal(type, false);\n    if (!this.scopedLocals) this.scopedLocals = new Map();\n    else {\n      let existingLocal = this.scopedLocals.get(name);\n      if (existingLocal) {\n        if (declaration) {\n          this.currentFunction.program.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range\n          );\n        } else assert(false);\n        return existingLocal;\n      }\n    }\n    scopedLocal.set(CommonFlags.SCOPED);\n    this.scopedLocals.set(name, scopedLocal);\n    if (type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\n      this.setLocalWrapped(scopedLocal.index, wrapped);\n    }\n    return scopedLocal;\n  }\n\n  /** Adds a new scoped alias for the specified local. */\n  addScopedLocalAlias(index: i32, type: Type, name: string): Local {\n    if (!this.scopedLocals) this.scopedLocals = new Map();\n    else {\n      let existingLocal = this.scopedLocals.get(name);\n      if (existingLocal) {\n        let declaration = existingLocal.declaration;\n        if (declaration) {\n          this.currentFunction.program.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range\n          );\n        } else assert(false);\n        return existingLocal;\n      }\n    }\n    assert(index < this.currentFunction.localsByIndex.length);\n    var scopedAlias = new Local( // not SCOPED as an indicator that it isn't automatically free'd\n      this.currentFunction.program,\n      name,\n      index,\n      type,\n      null\n    );\n    this.scopedLocals.set(name, scopedAlias);\n    return scopedAlias;\n  }\n\n  /** Gets the local of the specified name in the current scope. */\n  getScopedLocal(name: string): Local | null {\n    var local: Local | null;\n    var current: Flow | null = this;\n    do {\n      if (current.scopedLocals && (local = current.scopedLocals.get(name))) {\n        return local;\n      }\n    } while (current = current.parent);\n    return this.currentFunction.localsByName.get(name);\n  }\n\n  /** Tests if the local with the specified index is considered wrapped. */\n  isLocalWrapped(index: i32): bool {\n    var map: I64;\n    var ext: I64[] | null;\n    if (index < 64) {\n      if (index < 0) return true; // inlined constant\n      map = this.wrappedLocals;\n    } else if (ext = this.wrappedLocalsExt) {\n      let i = ((index - 64) / 64) | 0;\n      if (i >= ext.length) return false;\n      map = ext[i];\n      index -= (i + 1) * 64;\n    } else {\n      return false;\n    }\n    return i64_ne(\n      i64_and(\n        map,\n        i64_shl(\n          i64_one,\n          i64_new(index)\n        )\n      ),\n      i64_zero\n    );\n  }\n\n  /** Sets if the local with the specified index is considered wrapped. */\n  setLocalWrapped(index: i32, wrapped: bool): void {\n    var map: I64;\n    var off: i32 = -1;\n    if (index < 64) {\n      if (index < 0) return; // inlined constant\n      map = this.wrappedLocals;\n    } else {\n      let ext = this.wrappedLocalsExt;\n      off = ((index - 64) / 64) | 0;\n      if (!ext) {\n        this.wrappedLocalsExt = ext = new Array(off + 1);\n        ext.length = 0;\n      }\n      while (ext.length <= off) ext.push(i64_new(0));\n      map = ext[off];\n      index -= (off + 1) * 64;\n    }\n    map = wrapped\n      ? i64_or(\n          map,\n          i64_shl(\n            i64_one,\n            i64_new(index)\n          )\n        )\n      : i64_and(\n          map,\n          i64_not(\n            i64_shl(\n              i64_one,\n              i64_new(index)\n            )\n          )\n        );\n    if (off >= 0) (<I64[]>this.wrappedLocalsExt)[off] = map;\n    else this.wrappedLocals = map;\n  }\n\n  /** Inherits flags and local wrap states from the specified flow (e.g. blocks). */\n  inherit(other: Flow): void {\n    this.flags |= other.flags & (FlowFlags.ANY_CATEGORICAL | FlowFlags.ANY_CONDITIONAL);\n    this.wrappedLocals = other.wrappedLocals;\n    this.wrappedLocalsExt = other.wrappedLocalsExt; // no need to slice because other flow is finished\n  }\n\n  /** Inherits categorical flags as conditional flags from the specified flow (e.g. then without else). */\n  inheritConditional(other: Flow): void {\n    if (other.is(FlowFlags.RETURNS)) {\n      this.set(FlowFlags.CONDITIONALLY_RETURNS);\n    }\n    if (other.is(FlowFlags.THROWS)) {\n      this.set(FlowFlags.CONDITIONALLY_THROWS);\n    }\n    if (other.is(FlowFlags.BREAKS) && other.breakLabel == this.breakLabel) {\n      this.set(FlowFlags.CONDITIONALLY_BREAKS);\n    }\n    if (other.is(FlowFlags.CONTINUES) && other.continueLabel == this.continueLabel) {\n      this.set(FlowFlags.CONDITIONALLY_CONTINUES);\n    }\n    if (other.is(FlowFlags.ALLOCATES)) {\n      this.set(FlowFlags.CONDITIONALLY_ALLOCATES);\n    }\n  }\n\n  /** Inherits mutual flags and local wrap states from the specified flows (e.g. then with else). */\n  inheritMutual(left: Flow, right: Flow): void {\n    // categorical flags set in both arms\n    this.flags |= left.flags & right.flags & FlowFlags.ANY_CATEGORICAL;\n\n    // conditional flags set in at least one arm\n    this.flags |= left.flags & FlowFlags.ANY_CONDITIONAL;\n    this.flags |= right.flags & FlowFlags.ANY_CONDITIONAL;\n\n    // locals wrapped in both arms\n    this.wrappedLocals = i64_and(left.wrappedLocals, right.wrappedLocals);\n    var leftExt = left.wrappedLocalsExt;\n    var rightExt = right.wrappedLocalsExt;\n    if (leftExt != null && rightExt != null) {\n      let thisExt = this.wrappedLocalsExt;\n      let minLength = min(leftExt.length, rightExt.length);\n      if (minLength) {\n        if (!thisExt) thisExt = new Array(minLength);\n        else while (thisExt.length < minLength) thisExt.push(i64_new(0));\n        for (let i = 0; i < minLength; ++i) {\n          thisExt[i] = i64_and(\n            leftExt[i],\n            rightExt[i]\n          );\n        }\n      }\n    }\n  }\n\n  /**\n   * Tests if an expression can possibly overflow in the context of this flow. Assumes that the\n   * expression might already have overflown and returns `false` only if the operation neglects\n   * any possibly combination of garbage bits being present.\n   */\n  canOverflow(expr: ExpressionRef, type: Type): bool {\n    // TODO: the following catches most common and a few uncommon cases, but there are additional\n    // opportunities here, obviously.\n    assert(type != Type.void);\n\n    // types other than i8, u8, i16, u16 and bool do not overflow\n    if (!type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) return false;\n\n    var operand: ExpressionRef;\n    switch (getExpressionId(expr)) {\n\n      // overflows if the local isn't wrapped or the conversion does\n      case ExpressionId.GetLocal: {\n        let currentFunction = this.currentFunction;\n        let local = currentFunction.localsByIndex[getGetLocalIndex(expr)];\n        return !currentFunction.flow.isLocalWrapped(local.index)\n            || canConversionOverflow(local.type, type);\n      }\n\n      // overflows if the value does\n      case ExpressionId.SetLocal: {\n        assert(isTeeLocal(expr));\n        return this.canOverflow(getSetLocalValue(expr), type);\n      }\n\n      // never overflows because globals are wrapped on set\n      case ExpressionId.GetGlobal: return false;\n\n      case ExpressionId.Binary: {\n        switch (getBinaryOp(expr)) {\n\n          // comparisons do not overflow (result is 0 or 1)\n          case BinaryOp.EqI32:\n          case BinaryOp.EqI64:\n          case BinaryOp.EqF32:\n          case BinaryOp.EqF64:\n          case BinaryOp.NeI32:\n          case BinaryOp.NeI64:\n          case BinaryOp.NeF32:\n          case BinaryOp.NeF64:\n          case BinaryOp.LtI32:\n          case BinaryOp.LtU32:\n          case BinaryOp.LtI64:\n          case BinaryOp.LtU64:\n          case BinaryOp.LtF32:\n          case BinaryOp.LtF64:\n          case BinaryOp.LeI32:\n          case BinaryOp.LeU32:\n          case BinaryOp.LeI64:\n          case BinaryOp.LeU64:\n          case BinaryOp.LeF32:\n          case BinaryOp.LeF64:\n          case BinaryOp.GtI32:\n          case BinaryOp.GtU32:\n          case BinaryOp.GtI64:\n          case BinaryOp.GtU64:\n          case BinaryOp.GtF32:\n          case BinaryOp.GtF64:\n          case BinaryOp.GeI32:\n          case BinaryOp.GeU32:\n          case BinaryOp.GeI64:\n          case BinaryOp.GeU64:\n          case BinaryOp.GeF32:\n          case BinaryOp.GeF64: return false;\n\n          // result won't overflow if one side is 0 or if one side is 1 and the other wrapped\n          case BinaryOp.MulI32: {\n            return !(\n              (\n                getExpressionId(operand = getBinaryLeft(expr)) == ExpressionId.Const &&\n                (\n                  getConstValueI32(operand) == 0 ||\n                  (\n                    getConstValueI32(operand) == 1 &&\n                    !this.canOverflow(getBinaryRight(expr), type)\n                  )\n                )\n              ) || (\n                getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                (\n                  getConstValueI32(operand) == 0 ||\n                  (\n                    getConstValueI32(operand) == 1 &&\n                    !this.canOverflow(getBinaryLeft(expr), type)\n                  )\n                )\n              )\n            );\n          }\n\n          // result won't overflow if one side is a constant less than this type's mask or one side\n          // is wrapped\n          case BinaryOp.AndI32: {\n            // note that computeSmallIntegerMask returns the mask minus the MSB for signed types\n            // because signed value garbage bits must be guaranteed to be equal to the MSB.\n            return !(\n              (\n                (\n                  getExpressionId(operand = getBinaryLeft(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) <= type.computeSmallIntegerMask(Type.i32)\n                ) || !this.canOverflow(operand, type)\n              ) || (\n                (\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) <= type.computeSmallIntegerMask(Type.i32)\n                ) || !this.canOverflow(operand, type)\n              )\n            );\n          }\n\n          // overflows if the shift doesn't clear potential garbage bits\n          case BinaryOp.ShlI32: {\n            let shift = 32 - type.size;\n            return getExpressionId(operand = getBinaryRight(expr)) != ExpressionId.Const\n                || getConstValueI32(operand) < shift;\n          }\n\n          // overflows if the value does and the shift doesn't clear potential garbage bits\n          case BinaryOp.ShrI32: {\n            let shift = 32 - type.size;\n            return this.canOverflow(getBinaryLeft(expr), type) && (\n              getExpressionId(operand = getBinaryRight(expr)) != ExpressionId.Const ||\n              getConstValueI32(operand) < shift\n            );\n          }\n\n          // overflows if the shift does not clear potential garbage bits. if an unsigned value is\n          // wrapped, it can't overflow.\n          case BinaryOp.ShrU32: {\n            let shift = 32 - type.size;\n            return type.is(TypeFlags.SIGNED)\n              ? !(\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) > shift // must clear MSB\n                )\n              : this.canOverflow(getBinaryLeft(expr), type) && !(\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) >= shift // can leave MSB\n                );\n          }\n\n          // overflows if any side does\n          case BinaryOp.DivU32:\n          case BinaryOp.RemI32:\n          case BinaryOp.RemU32: {\n            return this.canOverflow(getBinaryLeft(expr), type)\n                || this.canOverflow(getBinaryRight(expr), type);\n          }\n        }\n        break;\n      }\n\n      case ExpressionId.Unary: {\n        switch (getUnaryOp(expr)) {\n\n          // comparisons do not overflow (result is 0 or 1)\n          case UnaryOp.EqzI32:\n          case UnaryOp.EqzI64: return false;\n\n          // overflow if the maximum result (32) cannot be represented in the target type\n          case UnaryOp.ClzI32:\n          case UnaryOp.CtzI32:\n          case UnaryOp.PopcntI32: return type.size < 7;\n        }\n        break;\n      }\n\n      // overflows if the value cannot be represented in the target type\n      case ExpressionId.Const: {\n        let value: i32 = 0;\n        switch (getExpressionType(expr)) {\n          case NativeType.I32: { value = getConstValueI32(expr); break; }\n          case NativeType.I64: { value = getConstValueI64Low(expr); break; } // discards upper bits\n          case NativeType.F32: { value = i32(getConstValueF32(expr)); break; }\n          case NativeType.F64: { value = i32(getConstValueF64(expr)); break; }\n          default: assert(false);\n        }\n        switch (type.kind) {\n          case TypeKind.I8: return value < i8.MIN_VALUE || value > i8.MAX_VALUE;\n          case TypeKind.I16: return value < i16.MIN_VALUE || value > i16.MAX_VALUE;\n          case TypeKind.U8: return value < 0 || value > u8.MAX_VALUE;\n          case TypeKind.U16: return value < 0 || value > u16.MAX_VALUE;\n          case TypeKind.BOOL: return (value & ~1) != 0;\n        }\n        break;\n      }\n\n      // overflows if the conversion does\n      case ExpressionId.Load: {\n        let fromType: Type;\n        switch (getLoadBytes(expr)) {\n          case 1:  { fromType = isLoadSigned(expr) ? Type.i8 : Type.u8; break; }\n          case 2:  { fromType = isLoadSigned(expr) ? Type.i16 : Type.u16; break; }\n          default: { fromType = isLoadSigned(expr) ? Type.i32 : Type.u32; break; }\n        }\n        return canConversionOverflow(fromType, type);\n      }\n\n      // overflows if the result does, which is either\n      // - the last expression of the block, by contract, if the block doesn't have a label\n      // - the last expression or the value of an inner br if the block has a label (TODO)\n      case ExpressionId.Block: {\n        if (!getBlockName(expr)) {\n          let size = assert(getBlockChildCount(expr));\n          let last = getBlockChild(expr, size - 1);\n          return this.canOverflow(last, type);\n        }\n        // actually, brs with a value that'd be handled here is not emitted atm\n        break;\n      }\n\n      // overflows if either side does\n      case ExpressionId.If: {\n        return this.canOverflow(getIfTrue(expr), type)\n            || this.canOverflow(assert(getIfFalse(expr)), type);\n      }\n\n      // overflows if either side does\n      case ExpressionId.Select: {\n        return this.canOverflow(getSelectThen(expr), type)\n            || this.canOverflow(getSelectElse(expr), type);\n      }\n\n      // overflows if the call does not return a wrapped value or the conversion does\n      case ExpressionId.Call: {\n        let program = this.currentFunction.program;\n        let instance = assert(program.instancesLookup.get(assert(getCallTarget(expr))));\n        assert(instance.kind == ElementKind.FUNCTION);\n        let returnType = (<Function>instance).signature.returnType;\n        return !(<Function>instance).flow.is(FlowFlags.RETURNS_WRAPPED)\n            || canConversionOverflow(returnType, type);\n      }\n\n      // doesn't technically overflow\n      case ExpressionId.Unreachable: return false;\n    }\n    return true;\n  }\n\n  /** Finalizes this flow. Must be the topmost parent flow of the function. */\n  finalize(): void {\n    assert(this.parent == null); // must be the topmost parent flow\n    this.continueLabel = null;\n    this.breakLabel = null;\n    this.returnLabel = null;\n    this.contextualTypeArguments = null;\n  }\n}\n\n/** Tests if a conversion from one type to another can technically overflow. */\nfunction canConversionOverflow(fromType: Type, toType: Type): bool {\n  var fromSize = fromType.byteSize;\n  var toSize = toType.byteSize;\n  return !fromType.is(TypeFlags.INTEGER) // non-i32 locals or returns\n      || fromSize > toSize\n      || fromType.is(TypeFlags.SIGNED) != toType.is(TypeFlags.SIGNED);\n}\n","/**\n * A thin wrapper around Binaryen's C-API.\n * @module module\n *//***/\n\nimport {\n  Target\n} from \"./compiler\";\n\nexport type ModuleRef = usize;\nexport type FunctionTypeRef = usize;\nexport type FunctionRef = usize;\nexport type ExpressionRef = usize;\nexport type GlobalRef = usize;\nexport type ImportRef = usize;\nexport type ExportRef = usize;\nexport type Index = u32;\n\nexport const enum NativeType {\n  None = 0,        // _BinaryenTypeNone(),\n  I32  = 1,        // _BinaryenTypeInt32(),\n  I64  = 2,        // _BinaryenTypeInt64(),\n  F32  = 3,        // _BinaryenTypeFloat32(),\n  F64  = 4,        // _BinaryenTypeFloat64(),\n  Unreachable = 5, // _BinaryenTypeUnreachable(),\n  Auto = -1        // _BinaryenTypeAuto()\n}\n\nexport enum ExpressionId {\n  Invalid = _BinaryenInvalidId(),\n  Block = _BinaryenBlockId(),\n  If = _BinaryenIfId(),\n  Loop = _BinaryenLoopId(),\n  Break = _BinaryenBreakId(),\n  Switch = _BinaryenSwitchId(),\n  Call = _BinaryenCallId(),\n  CallIndirect = _BinaryenCallIndirectId(),\n  GetLocal = _BinaryenGetLocalId(),\n  SetLocal = _BinaryenSetLocalId(),\n  GetGlobal = _BinaryenGetGlobalId(),\n  SetGlobal = _BinaryenSetGlobalId(),\n  Load = _BinaryenLoadId(),\n  Store = _BinaryenStoreId(),\n  Const = _BinaryenConstId(),\n  Unary = _BinaryenUnaryId(),\n  Binary = _BinaryenBinaryId(),\n  Select = _BinaryenSelectId(),\n  Drop = _BinaryenDropId(),\n  Return = _BinaryenReturnId(),\n  Host = _BinaryenHostId(),\n  Nop = _BinaryenNopId(),\n  Unreachable = _BinaryenUnreachableId(),\n  AtomicCmpxchg = _BinaryenAtomicCmpxchgId(),\n  AtomicRMW = _BinaryenAtomicRMWId(),\n  AtomicWait = _BinaryenAtomicWaitId(),\n  AtomicWake = _BinaryenAtomicWakeId()\n}\n\nexport enum UnaryOp {\n  ClzI32 = _BinaryenClzInt32(),\n  CtzI32 = _BinaryenCtzInt32(),\n  PopcntI32 = _BinaryenPopcntInt32(),\n  NegF32 = _BinaryenNegFloat32(),\n  AbsF32 = _BinaryenAbsFloat32(),\n  CeilF32 = _BinaryenCeilFloat32(),\n  FloorF32 = _BinaryenFloorFloat32(),\n  TruncF32 = _BinaryenTruncFloat32(),\n  NearestF32 = _BinaryenNearestFloat32(),\n  SqrtF32 = _BinaryenSqrtFloat32(),\n  EqzI32 = _BinaryenEqZInt32(),\n  ClzI64 = _BinaryenClzInt64(),\n  CtzI64 = _BinaryenCtzInt64(),\n  PopcntI64 = _BinaryenPopcntInt64(),\n  NegF64 = _BinaryenNegFloat64(),\n  AbsF64 = _BinaryenAbsFloat64(),\n  CeilF64 = _BinaryenCeilFloat64(),\n  FloorF64 = _BinaryenFloorFloat64(),\n  TruncF64 = _BinaryenTruncFloat64(),\n  NearestF64 = _BinaryenNearestFloat64(),\n  SqrtF64 = _BinaryenSqrtFloat64(),\n  EqzI64 = _BinaryenEqZInt64(),\n  ExtendI32 = _BinaryenExtendSInt32(),\n  ExtendU32 = _BinaryenExtendUInt32(),\n  WrapI64 = _BinaryenWrapInt64(),\n  TruncF32ToI32 = _BinaryenTruncSFloat32ToInt32(),\n  TruncF32ToI64 = _BinaryenTruncSFloat32ToInt64(),\n  TruncF32ToU32 = _BinaryenTruncUFloat32ToInt32(),\n  TruncF32ToU64 = _BinaryenTruncUFloat32ToInt64(),\n  TruncF64ToI32 = _BinaryenTruncSFloat64ToInt32(),\n  TruncF64ToI64 = _BinaryenTruncSFloat64ToInt64(),\n  TruncF64ToU32 = _BinaryenTruncUFloat64ToInt32(),\n  TruncF64ToU64 = _BinaryenTruncUFloat64ToInt64(),\n  ReinterpretF32 = _BinaryenReinterpretFloat32(),\n  ReinterpretF64 = _BinaryenReinterpretFloat64(),\n  ConvertI32ToF32 = _BinaryenConvertSInt32ToFloat32(),\n  ConvertI32ToF64 = _BinaryenConvertSInt32ToFloat64(),\n  ConvertU32ToF32 = _BinaryenConvertUInt32ToFloat32(),\n  ConvertU32ToF64 = _BinaryenConvertUInt32ToFloat64(),\n  ConvertI64ToF32 = _BinaryenConvertSInt64ToFloat32(),\n  ConvertI64ToF64 = _BinaryenConvertSInt64ToFloat64(),\n  ConvertU64ToF32 = _BinaryenConvertUInt64ToFloat32(),\n  ConvertU64ToF64 = _BinaryenConvertUInt64ToFloat64(),\n  PromoteF32 = _BinaryenPromoteFloat32(),\n  DemoteF64 = _BinaryenDemoteFloat64(),\n  ReinterpretI32 = _BinaryenReinterpretInt32(),\n  ReinterpretI64 = _BinaryenReinterpretInt64(),\n\n  // see: https://github.com/WebAssembly/sign-extension-ops\n  ExtendI8ToI32 = _BinaryenExtendS8Int32(),\n  ExtendI16ToI32 = _BinaryenExtendS16Int32(),\n  ExtendI8ToI64 = _BinaryenExtendS8Int64(),\n  ExtendI16ToI64 = _BinaryenExtendS16Int64(),\n  ExtendI32ToI64 = _BinaryenExtendS32Int64()\n\n  // see: https://github.com/WebAssembly/nontrapping-float-to-int-conversions\n  // TruncF32ToI32Sat\n  // TruncF32ToU32Sat\n  // TruncF64ToI32Sat\n  // TruncF64ToU32Sat\n  // TruncF32ToI64Sat\n  // TruncF32ToU64Sat\n  // TruncF64ToI64Sat\n  // TruncF64ToU64Sat\n}\n\nexport enum BinaryOp {\n  AddI32 = _BinaryenAddInt32(),\n  SubI32 = _BinaryenSubInt32(),\n  MulI32 = _BinaryenMulInt32(),\n  DivI32 = _BinaryenDivSInt32(),\n  DivU32 = _BinaryenDivUInt32(),\n  RemI32 = _BinaryenRemSInt32(),\n  RemU32 = _BinaryenRemUInt32(),\n  AndI32 = _BinaryenAndInt32(),\n  OrI32 = _BinaryenOrInt32(),\n  XorI32 = _BinaryenXorInt32(),\n  ShlI32 = _BinaryenShlInt32(),\n  ShrU32 = _BinaryenShrUInt32(),\n  ShrI32 = _BinaryenShrSInt32(),\n  RotlI32 = _BinaryenRotLInt32(),\n  RotrI32 = _BinaryenRotRInt32(),\n  EqI32 = _BinaryenEqInt32(),\n  NeI32 = _BinaryenNeInt32(),\n  LtI32 = _BinaryenLtSInt32(),\n  LtU32 = _BinaryenLtUInt32(),\n  LeI32 = _BinaryenLeSInt32(),\n  LeU32 = _BinaryenLeUInt32(),\n  GtI32 = _BinaryenGtSInt32(),\n  GtU32 = _BinaryenGtUInt32(),\n  GeI32 = _BinaryenGeSInt32(),\n  GeU32 = _BinaryenGeUInt32(),\n  AddI64 = _BinaryenAddInt64(),\n  SubI64 = _BinaryenSubInt64(),\n  MulI64 = _BinaryenMulInt64(),\n  DivI64 = _BinaryenDivSInt64(),\n  DivU64 = _BinaryenDivUInt64(),\n  RemI64 = _BinaryenRemSInt64(),\n  RemU64 = _BinaryenRemUInt64(),\n  AndI64 = _BinaryenAndInt64(),\n  OrI64 = _BinaryenOrInt64(),\n  XorI64 = _BinaryenXorInt64(),\n  ShlI64 = _BinaryenShlInt64(),\n  ShrU64 = _BinaryenShrUInt64(),\n  ShrI64 = _BinaryenShrSInt64(),\n  RotlI64 = _BinaryenRotLInt64(),\n  RotrI64 = _BinaryenRotRInt64(),\n  EqI64 = _BinaryenEqInt64(),\n  NeI64 = _BinaryenNeInt64(),\n  LtI64 = _BinaryenLtSInt64(),\n  LtU64 = _BinaryenLtUInt64(),\n  LeI64 = _BinaryenLeSInt64(),\n  LeU64 = _BinaryenLeUInt64(),\n  GtI64 = _BinaryenGtSInt64(),\n  GtU64 = _BinaryenGtUInt64(),\n  GeI64 = _BinaryenGeSInt64(),\n  GeU64 = _BinaryenGeUInt64(),\n  AddF32 = _BinaryenAddFloat32(),\n  SubF32 = _BinaryenSubFloat32(),\n  MulF32 = _BinaryenMulFloat32(),\n  DivF32 = _BinaryenDivFloat32(),\n  CopysignF32 = _BinaryenCopySignFloat32(),\n  MinF32 = _BinaryenMinFloat32(),\n  MaxF32 = _BinaryenMaxFloat32(),\n  EqF32 = _BinaryenEqFloat32(),\n  NeF32 = _BinaryenNeFloat32(),\n  LtF32 = _BinaryenLtFloat32(),\n  LeF32 = _BinaryenLeFloat32(),\n  GtF32 = _BinaryenGtFloat32(),\n  GeF32 = _BinaryenGeFloat32(),\n  AddF64 = _BinaryenAddFloat64(),\n  SubF64 = _BinaryenSubFloat64(),\n  MulF64 = _BinaryenMulFloat64(),\n  DivF64 = _BinaryenDivFloat64(),\n  CopysignF64 = _BinaryenCopySignFloat64(),\n  MinF64 = _BinaryenMinFloat64(),\n  MaxF64 = _BinaryenMaxFloat64(),\n  EqF64 = _BinaryenEqFloat64(),\n  NeF64 = _BinaryenNeFloat64(),\n  LtF64 = _BinaryenLtFloat64(),\n  LeF64 = _BinaryenLeFloat64(),\n  GtF64 = _BinaryenGtFloat64(),\n  GeF64 = _BinaryenGeFloat64()\n}\n\nexport enum HostOp {\n  CurrentMemory = _BinaryenCurrentMemory(),\n  GrowMemory = _BinaryenGrowMemory(),\n\n  // see: https://github.com/WebAssembly/bulk-memory-operations\n  // MoveMemory\n  // SetMemory\n}\n\nexport enum AtomicRMWOp {\n  Add = _BinaryenAtomicRMWAdd(),\n  Sub = _BinaryenAtomicRMWSub(),\n  And = _BinaryenAtomicRMWAnd(),\n  Or = _BinaryenAtomicRMWOr(),\n  Xor = _BinaryenAtomicRMWXor(),\n  Xchg = _BinaryenAtomicRMWXchg()\n}\n\nexport class MemorySegment {\n\n  buffer: Uint8Array;\n  offset: I64;\n\n  static create(buffer: Uint8Array, offset: I64): MemorySegment {\n    var segment = new MemorySegment();\n    segment.buffer = buffer;\n    segment.offset = offset;\n    return segment;\n  }\n}\n\nexport class Module {\n\n  ref: ModuleRef;\n\n  private cachedByValue: usize;\n\n  /** Maximum number of pages when targeting WASM32. */\n  static readonly MAX_MEMORY_WASM32: Index = 0xffff;\n\n  /** Maximum number of pages when targeting WASM64. */\n  static readonly MAX_MEMORY_WASM64: Index = 0xffff; // TODO\n\n  static create(): Module {\n    var module = new Module();\n    module.ref = _BinaryenModuleCreate();\n    module.cachedByValue = memory.allocate(16);\n    return module;\n  }\n\n  static createFrom(buffer: Uint8Array): Module {\n    var cArr = allocU8Array(buffer);\n    try {\n      let module = new Module();\n      module.ref = _BinaryenModuleRead(cArr, buffer.length);\n      module.cachedByValue = memory.allocate(3 * 8); // LLVM C-ABI, max used is 3 * usize\n      return module;\n    } finally {\n      memory.free(changetype<usize>(cArr));\n    }\n  }\n\n  private constructor() { }\n\n  // types\n\n  addFunctionType(\n    name: string,\n    result: NativeType,\n    paramTypes: NativeType[] | null\n  ): FunctionRef {\n    var cStr = allocString(name);\n    var cArr = allocI32Array(paramTypes);\n    try {\n      return _BinaryenAddFunctionType(this.ref, cStr, result, cArr, paramTypes ? paramTypes.length : 0);\n    } finally {\n      memory.free(cArr);\n      memory.free(cStr);\n    }\n  }\n\n  getFunctionTypeBySignature(\n    result: NativeType,\n    paramTypes: NativeType[] | null\n  ): FunctionTypeRef {\n    var cArr = allocI32Array(paramTypes);\n    try {\n      return _BinaryenGetFunctionTypeBySignature(this.ref, result, cArr, paramTypes ? paramTypes.length : 0);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  removeFunctionType(name: string): void {\n    var cStr = allocString(name);\n    try {\n      _BinaryenRemoveFunctionType(this.ref, cStr);\n    } finally {\n      memory.free(cStr);\n    }\n  }\n\n  // constants\n\n  createI32(value: i32): ExpressionRef {\n    var out = this.cachedByValue;\n    _BinaryenLiteralInt32(out, value);\n    return _BinaryenConst(this.ref, out);\n  }\n\n  createI64(valueLow: i32, valueHigh: i32 = 0): ExpressionRef {\n    var out = this.cachedByValue;\n    _BinaryenLiteralInt64(out, valueLow, valueHigh);\n    return _BinaryenConst(this.ref, out);\n  }\n\n  createF32(value: f32): ExpressionRef {\n    var out = this.cachedByValue;\n    _BinaryenLiteralFloat32(out, value);\n    return _BinaryenConst(this.ref, out);\n  }\n\n  createF64(value: f64): ExpressionRef {\n    var out = this.cachedByValue;\n    _BinaryenLiteralFloat64(out, value);\n    return _BinaryenConst(this.ref, out);\n  }\n\n  // expressions\n\n  createUnary(\n    op: UnaryOp,\n    expr: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenUnary(this.ref, op, expr);\n  }\n\n  createBinary(\n    op: BinaryOp,\n    left: ExpressionRef,\n    right: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenBinary(this.ref, op, left, right);\n  }\n\n  createHost(\n    op: HostOp,\n    name: string | null = null,\n    operands: ExpressionRef[] | null = null\n  ): ExpressionRef {\n    var cStr = allocString(name);\n    var cArr = allocPtrArray(operands);\n    try {\n      return _BinaryenHost(this.ref, op, cStr, cArr, operands ? (<ExpressionRef[]>operands).length : 0);\n    } finally {\n      memory.free(cArr);\n      memory.free(cStr);\n    }\n  }\n\n  createGetLocal(\n    index: i32,\n    type: NativeType\n  ): ExpressionRef {\n    return _BinaryenGetLocal(this.ref, index, type);\n  }\n\n  createTeeLocal(\n    index: i32,\n    value: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenTeeLocal(this.ref, index, value);\n  }\n\n  createGetGlobal(\n    name: string,\n    type: NativeType\n  ): ExpressionRef {\n    var cStr = allocString(name);\n    try {\n      return _BinaryenGetGlobal(this.ref, cStr, type);\n    } finally {\n      memory.free(cStr);\n    }\n  }\n\n  createLoad(\n    bytes: Index,\n    signed: bool,\n    ptr: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0\n  ): ExpressionRef {\n    return _BinaryenLoad(this.ref, bytes, signed ? 1 : 0, offset, /* always aligned */ bytes, type, ptr);\n  }\n\n  createStore(\n    bytes: Index,\n    ptr: ExpressionRef,\n    value: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0\n  ): ExpressionRef {\n    return _BinaryenStore(this.ref, bytes, offset, /* always aligned */ bytes, ptr, value, type);\n  }\n\n  createAtomicLoad(\n    bytes: Index,\n    ptr: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0\n  ): ExpressionRef {\n    return _BinaryenAtomicLoad(this.ref, bytes, offset, type, ptr);\n  }\n\n  createAtomicStore(\n    bytes: Index,\n    ptr: ExpressionRef,\n    value: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0\n  ): ExpressionRef {\n    return _BinaryenAtomicStore(this.ref, bytes, offset, ptr, value, type);\n  }\n\n  createAtomicRMW(\n    op: AtomicRMWOp,\n    bytes: Index,\n    offset: Index,\n    ptr: ExpressionRef,\n    value: ExpressionRef,\n    type: NativeType\n  ): ExpressionRef {\n    return _BinaryenAtomicRMW(this.ref, op, bytes, offset, ptr, value, type);\n  }\n\n  createAtomicCmpxchg(\n    bytes: Index,\n    offset: Index,\n    ptr: ExpressionRef,\n    expected: ExpressionRef,\n    replacement: ExpressionRef,\n    type: NativeType\n  ): ExpressionRef {\n    return _BinaryenAtomicCmpxchg(this.ref, bytes, offset, ptr, expected, replacement, type);\n  }\n\n  createAtomicWait(\n    ptr: ExpressionRef,\n    expected: ExpressionRef,\n    timeout: ExpressionRef,\n    expectedType: NativeType\n  ): ExpressionRef {\n    return _BinaryenAtomicWait(this.ref, ptr, expected, timeout, expectedType);\n  }\n\n  createAtomicWake(\n    ptr: ExpressionRef,\n    wakeCount: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenAtomicWake(this.ref, ptr, wakeCount);\n  }\n\n  // statements\n\n  createSetLocal(\n    index: Index,\n    value: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenSetLocal(this.ref, index, value);\n  }\n\n  createSetGlobal(\n    name: string,\n    value: ExpressionRef\n  ): ExpressionRef {\n    var cStr = allocString(name);\n    try {\n      return _BinaryenSetGlobal(this.ref, cStr, value);\n    } finally {\n      memory.free(cStr);\n    }\n  }\n\n  createBlock(\n    label: string | null,\n    children: ExpressionRef[],\n    type: NativeType = NativeType.None\n  ): ExpressionRef {\n    var cStr = allocString(label);\n    var cArr = allocPtrArray(children);\n    try {\n      return _BinaryenBlock(this.ref, cStr, cArr, children.length, type);\n    } finally {\n      memory.free(cArr);\n      memory.free(cStr);\n    }\n  }\n\n  createBreak(\n    label: string | null,\n    condition: ExpressionRef = 0,\n    value: ExpressionRef = 0\n  ): ExpressionRef {\n    var cStr = allocString(label);\n    try {\n      return _BinaryenBreak(this.ref, cStr, condition, value);\n    } finally {\n      memory.free(cStr);\n    }\n  }\n\n  createDrop(\n    expression: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenDrop(this.ref, expression);\n  }\n\n  createLoop(\n    label: string | null,\n    body: ExpressionRef\n  ): ExpressionRef {\n    var cStr = allocString(label);\n    try {\n      return _BinaryenLoop(this.ref, cStr, body);\n    } finally {\n      memory.free(cStr);\n    }\n  }\n\n  createIf(\n    condition: ExpressionRef,\n    ifTrue: ExpressionRef,\n    ifFalse: ExpressionRef = 0\n  ): ExpressionRef {\n    return _BinaryenIf(this.ref, condition, ifTrue, ifFalse);\n  }\n\n  createNop(): ExpressionRef {\n    return _BinaryenNop(this.ref);\n  }\n\n  createReturn(\n    expression: ExpressionRef = 0\n  ): ExpressionRef {\n    return _BinaryenReturn(this.ref, expression);\n  }\n\n  createSelect(\n    ifTrue: ExpressionRef,\n    ifFalse: ExpressionRef,\n    condition: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenSelect(this.ref, condition, ifTrue, ifFalse);\n  }\n\n  createSwitch(\n    names: string[],\n    defaultName: string | null,\n    condition: ExpressionRef,\n    value: ExpressionRef = 0\n  ): ExpressionRef {\n    var numNames = names.length;\n    var strs = new Array<usize>(numNames);\n    for (let i = 0; i < numNames; ++i) {\n      strs[i] = allocString(names[i]);\n    }\n    var cArr = allocI32Array(strs);\n    var cStr = allocString(defaultName);\n    try {\n      return _BinaryenSwitch(this.ref, cArr, numNames, cStr, condition, value);\n    } finally {\n      memory.free(cStr);\n      memory.free(cArr);\n      for (let i = numNames - 1; i >= 0; --i) memory.free(strs[i]);\n    }\n  }\n\n  createCall(\n    target: string,\n    operands: ExpressionRef[] | null,\n    returnType: NativeType\n  ): ExpressionRef {\n    var cStr = allocString(target);\n    var cArr = allocPtrArray(operands);\n    try {\n      return _BinaryenCall(this.ref, cStr, cArr, operands && operands.length || 0, returnType);\n    } finally {\n      memory.free(cArr);\n      memory.free(cStr);\n    }\n  }\n\n  createCallIndirect(\n    index: ExpressionRef,\n    operands: ExpressionRef[] | null,\n    typeName: string\n  ): ExpressionRef {\n    var cArr = allocPtrArray(operands);\n    var cStr = allocString(typeName);\n    try {\n      return _BinaryenCallIndirect(this.ref, index, cArr, operands && operands.length || 0, cStr);\n    } finally {\n      memory.free(cStr);\n      memory.free(cArr);\n    }\n  }\n\n  createUnreachable(): ExpressionRef {\n    return _BinaryenUnreachable(this.ref);\n  }\n\n  // meta\n\n  addGlobal(\n    name: string,\n    type: NativeType,\n    mutable: bool,\n    initializer: ExpressionRef\n  ): GlobalRef {\n    var cStr = allocString(name);\n    try {\n      return _BinaryenAddGlobal(this.ref, cStr, type, mutable ? 1 : 0, initializer);\n    } finally {\n      memory.free(cStr);\n    }\n  }\n\n  removeGlobal(\n    name: string\n  ): void {\n    var cStr = allocString(name);\n    try {\n      _BinaryenRemoveGlobal(this.ref, cStr);\n    } finally {\n      memory.free(cStr);\n    }\n  }\n\n  addFunction(\n    name: string,\n    type: FunctionTypeRef,\n    varTypes: NativeType[] | null,\n    body: ExpressionRef\n  ): FunctionRef {\n    var cStr = allocString(name);\n    var cArr = allocI32Array(varTypes);\n    try {\n      return _BinaryenAddFunction(this.ref, cStr, type, cArr, varTypes ? varTypes.length : 0, body);\n    } finally {\n      memory.free(cArr);\n      memory.free(cStr);\n    }\n  }\n\n  removeFunction(name: string): void {\n    var cStr = allocString(name);\n    try {\n      _BinaryenRemoveFunction(this.ref, cStr);\n    } finally {\n      memory.free(cStr);\n    }\n  }\n\n  private cachedTemporaryName: usize = 0;\n  private hasTemporaryFunction: bool = false;\n\n  addTemporaryFunction(result: NativeType, paramTypes: NativeType[] | null, body: ExpressionRef): FunctionRef {\n    this.hasTemporaryFunction = assert(!this.hasTemporaryFunction);\n    var tempName = this.cachedTemporaryName;\n    if (!tempName) this.cachedTemporaryName = tempName = allocString(\"\"); // works because strings are interned\n    var cArr = allocI32Array(paramTypes);\n    try {\n      let typeRef = _BinaryenAddFunctionType(this.ref, tempName, result, cArr, paramTypes ? paramTypes.length : 0);\n      return _BinaryenAddFunction(this.ref, tempName, typeRef, 0, 0, body);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  removeTemporaryFunction(): void {\n    this.hasTemporaryFunction = !assert(this.hasTemporaryFunction);\n    var tempName = assert(this.cachedTemporaryName);\n    _BinaryenRemoveFunction(this.ref, tempName);\n    _BinaryenRemoveFunctionType(this.ref, tempName);\n  }\n\n  addFunctionExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = allocString(internalName);\n    var cStr2 = allocString(externalName);\n    try {\n      return _BinaryenAddFunctionExport(this.ref, cStr1, cStr2);\n    } finally {\n      memory.free(cStr2);\n      memory.free(cStr1);\n    }\n  }\n\n  addTableExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = allocString(internalName);\n    var cStr2 = allocString(externalName);\n    try {\n      return _BinaryenAddTableExport(this.ref, cStr1, cStr2);\n    } finally {\n      memory.free(cStr2);\n      memory.free(cStr1);\n    }\n  }\n\n  addMemoryExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = allocString(internalName);\n    var cStr2 = allocString(externalName);\n    try {\n      return _BinaryenAddMemoryExport(this.ref, cStr1, cStr2);\n    } finally {\n      memory.free(cStr2);\n      memory.free(cStr1);\n    }\n  }\n\n  addGlobalExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = allocString(internalName);\n    var cStr2 = allocString(externalName);\n    try {\n      return _BinaryenAddGlobalExport(this.ref, cStr1, cStr2);\n    } finally {\n      memory.free(cStr2);\n      memory.free(cStr1);\n    }\n  }\n\n  removeExport(externalName: string): void {\n    var cStr = allocString(externalName);\n    try {\n      _BinaryenRemoveExport(this.ref, cStr);\n    } finally {\n      memory.free(cStr);\n    }\n  }\n\n  addFunctionImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string,\n    functionType: FunctionTypeRef\n  ): ImportRef {\n    var cStr1 = allocString(internalName);\n    var cStr2 = allocString(externalModuleName);\n    var cStr3 = allocString(externalBaseName);\n    try {\n      return _BinaryenAddFunctionImport(this.ref, cStr1, cStr2, cStr3, functionType);\n    } finally {\n      memory.free(cStr3);\n      memory.free(cStr2);\n      memory.free(cStr1);\n    }\n  }\n\n  addTableImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string\n  ): ImportRef {\n    var cStr1 = allocString(internalName);\n    var cStr2 = allocString(externalModuleName);\n    var cStr3 = allocString(externalBaseName);\n    try {\n      return _BinaryenAddTableImport(this.ref, cStr1, cStr2, cStr3);\n    } finally {\n      memory.free(cStr3);\n      memory.free(cStr2);\n      memory.free(cStr1);\n    }\n  }\n\n  addMemoryImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string\n  ): ImportRef {\n    var cStr1 = allocString(internalName);\n    var cStr2 = allocString(externalModuleName);\n    var cStr3 = allocString(externalBaseName);\n    try {\n      return _BinaryenAddMemoryImport(this.ref, cStr1, cStr2, cStr3);\n    } finally {\n      memory.free(cStr3);\n      memory.free(cStr2);\n      memory.free(cStr1);\n    }\n  }\n\n  addGlobalImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string,\n    globalType: NativeType\n  ): ImportRef {\n    var cStr1 = allocString(internalName);\n    var cStr2 = allocString(externalModuleName);\n    var cStr3 = allocString(externalBaseName);\n    try {\n      return _BinaryenAddGlobalImport(this.ref, cStr1, cStr2, cStr3, globalType);\n    } finally {\n      memory.free(cStr3);\n      memory.free(cStr2);\n      memory.free(cStr1);\n    }\n  }\n\n  setMemory(\n    initial: Index,\n    maximum: Index,\n    segments: MemorySegment[],\n    target: Target,\n    exportName: string | null = null\n  ): void {\n    var cStr = allocString(exportName);\n    var k = segments.length;\n    var segs = new Array<usize>(k);\n    var offs = new Array<ExpressionRef>(k);\n    var sizs = new Array<Index>(k);\n    for (let i = 0; i < k; ++i) {\n      let buffer = segments[i].buffer;\n      let offset = segments[i].offset;\n      segs[i] = allocU8Array(buffer);\n      offs[i] = target == Target.WASM64\n        ? this.createI64(i64_low(offset), i64_high(offset))\n        : this.createI32(i64_low(offset));\n      sizs[i] = buffer.length;\n    }\n    var cArr1 = allocI32Array(segs);\n    var cArr2 = allocI32Array(offs);\n    var cArr3 = allocI32Array(sizs);\n    try {\n      _BinaryenSetMemory(this.ref, initial, maximum, cStr, cArr1, cArr2, cArr3, k);\n    } finally {\n      memory.free(cArr3);\n      memory.free(cArr2);\n      memory.free(cArr1);\n      for (let i = k - 1; i >= 0; --i) memory.free(segs[i]);\n      memory.free(cStr);\n    }\n  }\n\n  setFunctionTable(\n    initial: Index,\n    maximum: Index,\n    funcs: string[]\n  ): void {\n    var numNames = funcs.length;\n    var names = new Array<usize>(numNames);\n    for (let i = 0; i < numNames; ++i) {\n      names[i] = allocString(funcs[i]);\n    }\n    var cArr = allocI32Array(names);\n    try {\n      _BinaryenSetFunctionTable(this.ref, initial, maximum, cArr, numNames);\n    } finally {\n      memory.free(cArr);\n      for (let i = numNames; i >= 0; --i) memory.free(names[i]);\n    }\n  }\n\n  setStart(func: FunctionRef): void {\n    _BinaryenSetStart(this.ref, func);\n  }\n\n  getOptimizeLevel(): i32 {\n    return _BinaryenGetOptimizeLevel();\n  }\n\n  setOptimizeLevel(level: i32 = 2): void {\n    _BinaryenSetOptimizeLevel(level);\n  }\n\n  getShrinkLevel(): i32 {\n    return _BinaryenGetShrinkLevel();\n  }\n\n  setShrinkLevel(level: i32 = 1): void {\n    _BinaryenSetShrinkLevel(level);\n  }\n\n  setDebugInfo(on: bool = false): void {\n    _BinaryenSetDebugInfo(on);\n  }\n\n  optimize(func: FunctionRef = 0): void {\n    if (func) {\n      _BinaryenFunctionOptimize(func, this.ref);\n    } else {\n      _BinaryenModuleOptimize(this.ref);\n    }\n  }\n\n  runPasses(passes: string[], func: FunctionRef = 0): void {\n    var numNames = passes.length;\n    var names = new Array<usize>(numNames);\n    for (let i = 0; i < numNames; ++i) {\n      names[i] = allocString(passes[i]);\n    }\n    var cArr = allocI32Array(names);\n    try {\n      if (func) {\n        _BinaryenFunctionRunPasses(func, this.ref, cArr, numNames);\n      } else {\n        _BinaryenModuleRunPasses(this.ref, cArr, numNames);\n      }\n    } finally {\n      memory.free(cArr);\n      for (let i = numNames; i >= 0; --i) memory.free(names[i]);\n    }\n  }\n\n  private cachedPrecomputeName: usize = 0; // for free'ing\n  private cachedPrecomputeNames: usize = 0;\n\n  precomputeExpression(expr: ExpressionRef): ExpressionRef {\n    // remember the previous optimize levels and set to max instead, to be sure\n    var previousOptimizeLevel = _BinaryenGetOptimizeLevel();\n    var previousShrinkLevel = _BinaryenGetShrinkLevel();\n    var previousDebugInfo = _BinaryenGetDebugInfo();\n    _BinaryenSetOptimizeLevel(4);\n    _BinaryenSetShrinkLevel(0);\n    _BinaryenSetDebugInfo(false);\n\n    // wrap the expression in a temp. function and run the precompute pass on it\n    var type = _BinaryenExpressionGetType(expr);\n    var func = this.addTemporaryFunction(type, null, expr);\n    var names = this.cachedPrecomputeNames;\n    if (!names) {\n      let name = allocString(\"precompute\");\n      this.cachedPrecomputeName = name;\n      this.cachedPrecomputeNames = names = allocI32Array([ name ]);\n    }\n    _BinaryenFunctionRunPasses(func, this.ref, names, 1);\n    expr = _BinaryenFunctionGetBody(func);\n    this.removeTemporaryFunction();\n\n    // reset optimize levels to previous\n    _BinaryenSetOptimizeLevel(previousOptimizeLevel);\n    _BinaryenSetShrinkLevel(previousShrinkLevel);\n    _BinaryenSetDebugInfo(previousDebugInfo);\n    return expr;\n  }\n\n  validate(): bool {\n    return _BinaryenModuleValidate(this.ref) == 1;\n  }\n\n  interpret(): void {\n    _BinaryenModuleInterpret(this.ref);\n  }\n\n  toBinary(sourceMapUrl: string | null): BinaryModule {\n    var out = this.cachedByValue;\n    var cStr = allocString(sourceMapUrl);\n    var binaryPtr: usize = 0;\n    var sourceMapPtr: usize = 0;\n    try {\n      _BinaryenModuleAllocateAndWrite(out, this.ref, cStr);\n      binaryPtr = readInt(out);\n      let binaryBytes = readInt(out + 4);\n      sourceMapPtr = readInt(out + 4 * 2);\n      let ret = new BinaryModule();\n      ret.output = readBuffer(binaryPtr, binaryBytes);\n      ret.sourceMap = readString(sourceMapPtr);\n      return ret;\n    } finally {\n      if (cStr) memory.free(cStr);\n      if (binaryPtr) memory.free(binaryPtr);\n      if (sourceMapPtr) memory.free(sourceMapPtr);\n    }\n  }\n\n  toText(): string {\n    throw new Error(\"not implemented\"); // JS glue overrides this\n  }\n\n  toAsmjs(): string {\n    throw new Error(\"not implemented\"); // JS glue overrides this\n  }\n\n  dispose(): void {\n    assert(this.ref);\n    memory.free(this.cachedByValue);\n    memory.free(this.cachedTemporaryName);\n    memory.free(this.cachedPrecomputeName);\n    memory.free(this.cachedPrecomputeNames);\n    _BinaryenModuleDispose(this.ref);\n    this.ref = 0;\n  }\n\n  createRelooper(): Relooper {\n    return Relooper.create(this);\n  }\n\n  cloneExpression(\n    expr: ExpressionRef,\n    noSideEffects: bool = false,\n    maxDepth: i32 = i32.MAX_VALUE\n  ): ExpressionRef { // currently supports side effect free expressions only\n    if (maxDepth < 0) return 0;\n    maxDepth -= 1;\n\n    var nested1: ExpressionRef,\n        nested2: ExpressionRef;\n\n        switch (_BinaryenExpressionGetId(expr)) {\n      case ExpressionId.Const: {\n        switch (_BinaryenExpressionGetType(expr)) {\n          case NativeType.I32: {\n            return this.createI32(_BinaryenConstGetValueI32(expr));\n          }\n          case NativeType.I64: {\n            return this.createI64(\n              _BinaryenConstGetValueI64Low(expr),\n              _BinaryenConstGetValueI64High(expr)\n            );\n          }\n          case NativeType.F32: {\n            return this.createF32(_BinaryenConstGetValueF32(expr));\n          }\n          case NativeType.F64: {\n            return this.createF64(_BinaryenConstGetValueF64(expr));\n          }\n          default: {\n            throw new Error(\"concrete type expected\");\n          }\n        }\n      }\n      case ExpressionId.GetLocal: {\n        return _BinaryenGetLocal(this.ref,\n          _BinaryenGetLocalGetIndex(expr),\n          _BinaryenExpressionGetType(expr)\n        );\n      }\n      case ExpressionId.GetGlobal: {\n        let globalName = _BinaryenGetGlobalGetName(expr);\n        if (!globalName) break;\n        return _BinaryenGetGlobal(this.ref, globalName, _BinaryenExpressionGetType(expr));\n      }\n      case ExpressionId.Load: {\n        if (!(nested1 = this.cloneExpression(_BinaryenLoadGetPtr(expr), noSideEffects, maxDepth))) {\n          break;\n        }\n        return (\n          _BinaryenLoadIsAtomic(expr)\n            ? _BinaryenAtomicLoad(this.ref,\n                _BinaryenLoadGetBytes(expr),\n                _BinaryenLoadGetOffset(expr),\n                _BinaryenExpressionGetType(expr),\n                nested1\n              )\n            : _BinaryenLoad(this.ref,\n                _BinaryenLoadGetBytes(expr),\n                _BinaryenLoadIsSigned(expr) ? 1 : 0,\n                _BinaryenLoadGetOffset(expr),\n                _BinaryenLoadGetAlign(expr),\n                _BinaryenExpressionGetType(expr),\n                nested1\n              )\n        );\n      }\n      case ExpressionId.Unary: {\n        if (!(nested1 = this.cloneExpression(_BinaryenUnaryGetValue(expr), noSideEffects, maxDepth))) {\n          break;\n        }\n        return _BinaryenUnary(this.ref, _BinaryenUnaryGetOp(expr), nested1);\n      }\n      case ExpressionId.Binary: {\n        if (!(nested1 = this.cloneExpression(_BinaryenBinaryGetLeft(expr), noSideEffects, maxDepth))) {\n          break;\n        }\n        if (!(nested2 = this.cloneExpression(_BinaryenBinaryGetRight(expr), noSideEffects, maxDepth))) {\n          break;\n        }\n        return _BinaryenBinary(this.ref, _BinaryenBinaryGetOp(expr), nested1, nested2);\n      }\n    }\n    return 0;\n  }\n\n  // source map generation\n\n  addDebugInfoFile(name: string): Index {\n    var cStr = allocString(name);\n    try {\n      return _BinaryenModuleAddDebugInfoFileName(this.ref, cStr);\n    } finally {\n      memory.free(cStr);\n    }\n  }\n\n  getDebugInfoFile(index: Index): string | null {\n    return readString(_BinaryenModuleGetDebugInfoFileName(this.ref, index));\n  }\n\n  setDebugLocation(\n    func: FunctionRef,\n    expr: ExpressionRef,\n    fileIndex: Index,\n    lineNumber: Index,\n    columnNumber: Index\n  ): void {\n    _BinaryenFunctionSetDebugLocation(func, expr, fileIndex, lineNumber, columnNumber);\n  }\n}\n\n// expressions\n\nexport function getExpressionId(expr: ExpressionRef): ExpressionId {\n  return _BinaryenExpressionGetId(expr);\n}\n\nexport function getExpressionType(expr: ExpressionRef): NativeType {\n  return _BinaryenExpressionGetType(expr);\n}\n\nexport function getConstValueI32(expr: ExpressionRef): i32 {\n  return _BinaryenConstGetValueI32(expr);\n}\n\nexport function getConstValueI64Low(expr: ExpressionRef): i32 {\n  return _BinaryenConstGetValueI64Low(expr);\n}\n\nexport function getConstValueI64High(expr: ExpressionRef): i32 {\n  return _BinaryenConstGetValueI64High(expr);\n}\n\nexport function getConstValueF32(expr: ExpressionRef): f32 {\n  return _BinaryenConstGetValueF32(expr);\n}\n\nexport function getConstValueF64(expr: ExpressionRef): f32 {\n  return _BinaryenConstGetValueF64(expr);\n}\n\nexport function getGetLocalIndex(expr: ExpressionRef): Index {\n  return _BinaryenGetLocalGetIndex(expr);\n}\n\nexport function getSetLocalIndex(expr: ExpressionRef): Index {\n  return _BinaryenSetLocalGetIndex(expr);\n}\n\nexport function getSetLocalValue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenSetLocalGetValue(expr);\n}\n\nexport function isTeeLocal(expr: ExpressionRef): bool {\n  return _BinaryenSetLocalIsTee(expr);\n}\n\nexport function getBinaryOp(expr: ExpressionRef): BinaryOp {\n  return _BinaryenBinaryGetOp(expr);\n}\n\nexport function getBinaryLeft(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenBinaryGetLeft(expr);\n}\n\nexport function getBinaryRight(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenBinaryGetRight(expr);\n}\n\nexport function getUnaryOp(expr: ExpressionRef): UnaryOp {\n  return _BinaryenUnaryGetOp(expr);\n}\n\nexport function getUnaryValue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenUnaryGetValue(expr);\n}\n\nexport function getLoadBytes(expr: ExpressionRef): u32 {\n  return _BinaryenLoadGetBytes(expr);\n}\n\nexport function getLoadOffset(expr: ExpressionRef): u32 {\n  return _BinaryenLoadGetOffset(expr);\n}\n\nexport function getLoadPtr(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenLoadGetPtr(expr);\n}\n\nexport function isLoadSigned(expr: ExpressionRef): bool {\n  return _BinaryenLoadIsSigned(expr);\n}\n\nexport function getStoreBytes(expr: ExpressionRef): u32 {\n  return _BinaryenStoreGetBytes(expr);\n}\n\nexport function getStoreOffset(expr: ExpressionRef): u32 {\n  return _BinaryenStoreGetOffset(expr);\n}\n\nexport function getStorePtr(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenStoreGetPtr(expr);\n}\n\nexport function getStoreValue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenStoreGetValue(expr);\n}\n\nexport function getBlockName(expr: ExpressionRef): string | null {\n  return readString(_BinaryenBlockGetName(expr));\n}\n\nexport function getBlockChildCount(expr: ExpressionRef): Index {\n  return _BinaryenBlockGetNumChildren(expr);\n}\n\nexport function getBlockChild(expr: ExpressionRef, index: Index): ExpressionRef {\n  return _BinaryenBlockGetChild(expr, index);\n}\n\nexport function getIfCondition(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenIfGetCondition(expr);\n}\n\nexport function getIfTrue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenIfGetIfTrue(expr);\n}\n\nexport function getIfFalse(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenIfGetIfFalse(expr);\n}\n\nexport function getLoopName(expr: ExpressionRef): string | null {\n  return readString(_BinaryenLoopGetName(expr));\n}\n\nexport function getLoopBody(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenLoopGetBody(expr);\n}\n\nexport function getBreakName(expr: ExpressionRef): string | null {\n  return readString(_BinaryenBreakGetName(expr));\n}\n\nexport function getBreakCondition(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenBreakGetCondition(expr);\n}\n\nexport function getSelectThen(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenSelectGetIfTrue(expr);\n}\n\nexport function getSelectElse(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenSelectGetIfFalse(expr);\n}\n\nexport function getSelectCondition(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenSelectGetCondition(expr);\n}\n\nexport function getDropValue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenDropGetValue(expr);\n}\n\nexport function getReturnValue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenReturnGetValue(expr);\n}\n\nexport function getCallTarget(expr: ExpressionRef): string | null {\n  return readString(_BinaryenCallGetTarget(expr));\n}\n\nexport function getHostOp(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenHostGetOp(expr);\n}\n\nexport function getHostOperandCount(expr: ExpressionRef): Index {\n  return _BinaryenHostGetNumOperands(expr);\n}\n\nexport function getHostOperand(expr: ExpressionRef, index: Index): ExpressionRef {\n  return _BinaryenHostGetOperand(expr, index);\n}\n\nexport function getHostName(expr: ExpressionRef): string | null {\n  return readString(_BinaryenHostGetNameOperand(expr));\n}\n\n// functions\n\nexport function getFunctionBody(func: FunctionRef): ExpressionRef {\n  return _BinaryenFunctionGetBody(func);\n}\n\nexport function getFunctionName(func: FunctionRef): string | null {\n  return readString(_BinaryenFunctionGetName(func));\n}\n\nexport function getFunctionParamCount(func: FunctionRef): Index {\n  return _BinaryenFunctionGetNumParams(func);\n}\n\nexport function getFunctionParamType(func: FunctionRef, index: Index): NativeType {\n  return _BinaryenFunctionGetParam(func, index);\n}\n\nexport function getFunctionResultType(func: FunctionRef): NativeType {\n  return _BinaryenFunctionGetResult(func);\n}\n\nexport class Relooper {\n\n  module: Module;\n  ref: RelooperRef;\n\n  static create(module: Module): Relooper {\n    var relooper = new Relooper();\n    relooper.module = module;\n    relooper.ref = _RelooperCreate();\n    return relooper;\n  }\n\n  private constructor() {}\n\n  addBlock(code: ExpressionRef): RelooperBlockRef {\n    return _RelooperAddBlock(this.ref, code);\n  }\n\n  addBranch(from: RelooperBlockRef, to: RelooperBlockRef, condition: ExpressionRef = 0, code: ExpressionRef = 0): void {\n    _RelooperAddBranch(from, to, condition, code);\n  }\n\n  addBlockWithSwitch(code: ExpressionRef, condition: ExpressionRef): RelooperBlockRef {\n    return _RelooperAddBlockWithSwitch(this.ref, code, condition);\n  }\n\n  addBranchForSwitch(from: RelooperBlockRef, to: RelooperBlockRef, indexes: i32[], code: ExpressionRef = 0): void {\n    var cArr = allocI32Array(indexes);\n    try {\n      _RelooperAddBranchForSwitch(from, to, cArr, indexes.length, code);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  renderAndDispose(entry: RelooperBlockRef, labelHelper: Index): ExpressionRef {\n    return _RelooperRenderAndDispose(this.ref, entry, labelHelper, this.module.ref);\n  }\n}\n\n// export function hasSideEffects(expr: ExpressionRef): bool {\n//   switch (_BinaryenExpressionGetId(expr = getPtr(expr))) {\n//     case ExpressionId.GetLocal:\n//     case ExpressionId.GetGlobal:\n//     case ExpressionId.Const:\n//     case ExpressionId.Nop:\n//     case ExpressionId.Unreachable: {\n//       return false;\n//     }\n//     case ExpressionId.Block: {\n//       for (let i = 0, k = _BinaryenBlockGetNumChildren(expr); i < k; ++i) {\n//         if (hasSideEffects(_BinaryenBlockGetChild(expr, i))) return true;\n//       }\n//       return false;\n//     }\n//     case ExpressionId.If: {\n//       return hasSideEffects(_BinaryenIfGetCondition(expr))\n//           || hasSideEffects(_BinaryenIfGetIfTrue(expr))\n//           || hasSideEffects(_BinaryenIfGetIfFalse(expr));\n//     }\n//     case ExpressionId.Unary: {\n//       return hasSideEffects(_BinaryenUnaryGetValue(expr));\n//     }\n//     case ExpressionId.Binary: {\n//       return hasSideEffects(_BinaryenBinaryGetLeft(expr))\n//           || hasSideEffects(_BinaryenBinaryGetRight(expr));\n//     }\n//     case ExpressionId.Drop: {\n//       return hasSideEffects(_BinaryenDropGetValue(expr));\n//     }\n//     case ExpressionId.Select: {\n//       return hasSideEffects(_BinaryenSelectGetIfTrue(expr))\n//           || hasSideEffects(_BinaryenSelectGetIfFalse(expr))\n//           || hasSideEffects(_BinaryenSelectGetCondition(expr));\n//     }\n//   }\n//   return true;\n// }\n\n// helpers\n// can't do stack allocation here: STACKTOP is a global in WASM but a hidden variable in asm.js\n\nfunction allocU8Array(u8s: Uint8Array | null): usize {\n  if (!u8s) return 0;\n  var numValues = u8s.length;\n  var ptr = memory.allocate(numValues);\n  var idx = ptr;\n  for (let i = 0; i < numValues; ++i) {\n    store<u8>(idx++, u8s[i]);\n  }\n  return ptr;\n}\n\nfunction allocI32Array(i32s: i32[] | null): usize {\n  if (!i32s) return 0;\n  var ptr = memory.allocate(i32s.length << 2);\n  var idx = ptr;\n  for (let i = 0, k = i32s.length; i < k; ++i) {\n    let val = i32s[i];\n    // store<i32>(idx, val) is not portable\n    store<u8>(idx    , ( val         & 0xff) as u8);\n    store<u8>(idx + 1, ((val >>   8) & 0xff) as u8);\n    store<u8>(idx + 2, ((val >>  16) & 0xff) as u8);\n    store<u8>(idx + 3, ( val >>> 24        ) as u8);\n    idx += 4;\n  }\n  return ptr;\n}\n\nfunction allocPtrArray(ptrs: usize[] | null): usize {\n  return allocI32Array(ptrs); // TODO: WASM64 one day\n}\n\nfunction stringLengthUTF8(str: string): usize {\n  var len = 0;\n  for (let i = 0, k = str.length; i < k; ++i) {\n    let u = str.charCodeAt(i);\n    if (u >= 0xD800 && u <= 0xDFFF && i + 1 < k) {\n      u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);\n    }\n    if (u <= 0x7F) {\n      ++len;\n    } else if (u <= 0x7FF) {\n      len += 2;\n    } else if (u <= 0xFFFF) {\n      len += 3;\n    } else if (u <= 0x1FFFFF) {\n      len += 4;\n    } else if (u <= 0x3FFFFFF) {\n      len += 5;\n    } else {\n      len += 6;\n    }\n  }\n  return len;\n}\n\nfunction allocString(str: string | null): usize {\n  if (str == null) return 0;\n  var ptr = memory.allocate(stringLengthUTF8(str) + 1);\n  // the following is based on Emscripten's stringToUTF8Array\n  var idx = ptr;\n  for (let i = 0, k = str.length; i < k; ++i) {\n    let u = str.charCodeAt(i);\n    if (u >= 0xD800 && u <= 0xDFFF && i + 1 < k) {\n      u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);\n    }\n    if (u <= 0x7F) {\n      store<u8>(idx++, u as u8);\n    } else if (u <= 0x7FF) {\n      store<u8>(idx++, (0xC0 |  (u >>> 6)       ) as u8);\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\n    } else if (u <= 0xFFFF) {\n      store<u8>(idx++, (0xE0 |  (u >>> 12)      ) as u8);\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\n    } else if (u <= 0x1FFFFF) {\n      store<u8>(idx++, (0xF0 |  (u >>> 18)      ) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\n    } else if (u <= 0x3FFFFFF) {\n      store<u8>(idx++, (0xF8 |  (u >>> 24)      ) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 18) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\n    } else {\n      store<u8>(idx++, (0xFC |  (u >>> 30)      ) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 24) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 18) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\n    }\n  }\n  store<u8>(idx, 0);\n  return ptr;\n}\n\nfunction readInt(ptr: usize): i32 {\n  return (\n     load<u8>(ptr    )        |\n    (load<u8>(ptr + 1) <<  8) |\n    (load<u8>(ptr + 2) << 16) |\n    (load<u8>(ptr + 3) << 24)\n  );\n}\n\nfunction readBuffer(ptr: usize, length: usize): Uint8Array {\n  var ret = new Uint8Array(length);\n  for (let i: usize = 0; i < length; ++i) {\n    ret[i] = load<u8>(ptr + i);\n  }\n  return ret;\n}\n\nexport function readString(ptr: usize): string | null {\n  if (!ptr) return null;\n  var arr = new Array<i32>();\n  // the following is based on Emscripten's UTF8ArrayToString\n  var cp: u32;\n  var u1: u32, u2: u32, u3: u32, u4: u32, u5: u32;\n  while (cp = load<u8>(ptr++)) {\n    if (!(cp & 0x80)) {\n      arr.push(cp);\n      continue;\n    }\n    u1 = load<u8>(ptr++) & 63;\n    if ((cp & 0xE0) == 0xC0) {\n      arr.push(((cp & 31) << 6) | u1);\n      continue;\n    }\n    u2 = load<u8>(ptr++) & 63;\n    if ((cp & 0xF0) == 0xE0) {\n      cp = ((cp & 15) << 12) | (u1 << 6) | u2;\n    } else {\n      u3 = load<u8>(ptr++) & 63;\n      if ((cp & 0xF8) == 0xF0) {\n        cp = ((cp & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;\n      } else {\n        u4 = load<u8>(ptr++) & 63;\n        if ((cp & 0xFC) == 0xF8) {\n          cp = ((cp & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;\n        } else {\n          u5 = load<u8>(ptr++) & 63;\n          cp = ((cp & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;\n        }\n      }\n    }\n    arr.push(cp);\n    // if (cp < 0x10000) {\n    //   arr.push(cp);\n    // } else {\n    //   var ch = cp - 0x10000;\n    //   arr.push(0xD800 | (ch >> 10));\n    //   arr.push(0xDC00 | (ch & 0x3FF));\n    // }\n  }\n  // return String.fromCharCodes(arr);\n  return String.fromCodePoints(arr);\n}\n\n/** Result structure of {@link Module#toBinary}. */\nexport class BinaryModule {\n  /** WebAssembly binary. */\n  output: Uint8Array;\n  /** Source map, if generated. */\n  sourceMap: string | null;\n}\n\n/** Tests if an expression needs an explicit 'unreachable' when it is the terminating statement. */\nexport function needsExplicitUnreachable(expr: ExpressionRef): bool {\n  // not applicable if pushing a value to the stack\n  switch (_BinaryenExpressionGetType(expr)) {\n    case NativeType.I32:\n    case NativeType.I64:\n    case NativeType.F32:\n    case NativeType.F64: return false;\n  }\n  switch (_BinaryenExpressionGetId(expr)) {\n    case ExpressionId.Unreachable:\n    case ExpressionId.Return: return false;\n    case ExpressionId.Break: return _BinaryenBreakGetCondition(expr) != 0;\n    case ExpressionId.Block: {\n      if (!_BinaryenBlockGetName(expr)) { // can't break out of it\n        let numChildren = _BinaryenBlockGetNumChildren(expr); // last child needs unreachable\n        return numChildren > 0 && needsExplicitUnreachable(_BinaryenBlockGetChild(expr, numChildren - 1));\n      }\n    }\n  }\n  return true;\n}\n","var g;\r\n\r\n// This works in non-strict mode\r\ng = (function() {\r\n\treturn this;\r\n})();\r\n\r\ntry {\r\n\t// This works if eval is allowed (see CSP)\r\n\tg = g || Function(\"return this\")() || (1, eval)(\"this\");\r\n} catch (e) {\r\n\t// This works if the window reference is available\r\n\tif (typeof window === \"object\") g = window;\r\n}\r\n\r\n// g can still be undefined, but nothing to do about it...\r\n// We return undefined, instead of nothing here, so it's\r\n// easier to handle this case. if(!global) { ...}\r\n\r\nmodule.exports = g;\r\n","/**\n * Mappings from AssemblyScript types to WebAssembly types.\n * @module types\n *//***/\n\nimport {\n  Class,\n  FunctionTarget,\n  Program,\n  DecoratorFlags\n} from \"./program\";\n\nimport {\n  NativeType,\n  ExpressionRef,\n  Module\n} from \"./module\";\n\n/** Indicates the kind of a type. */\nexport const enum TypeKind {\n\n  // signed integers\n\n  /** An 8-bit signed integer. */\n  I8,\n  /** A 16-bit signed integer. */\n  I16,\n  /** A 32-bit signed integer. */\n  I32,\n  /** A 64-bit signed integer. */\n  I64,\n  /** A 32-bit/64-bit signed integer, depending on the target. */\n  ISIZE,\n\n  // unsigned integers\n\n  /** An 8-bit unsigned integer. */\n  U8,\n  /** A 16-bit unsigned integer. */\n  U16,\n  /** A 32-bit unsigned integer. Also the base of function types. */\n  U32,\n  /** A 64-bit unsigned integer. */\n  U64,\n  /** A 32-bit/64-bit unsigned integer, depending on the target. Also the base of class types. */\n  USIZE,\n  /** A 1-bit unsigned integer. */\n  BOOL, // sic\n\n  // floats\n\n  /** A 32-bit float. */\n  F32,\n  /** A 64-bit double. */\n  F64,\n\n  // other\n\n  /** No return type. */\n  VOID\n}\n\n/** Indicates capabilities of a type. */\nexport const enum TypeFlags {\n  NONE = 0,\n  /** Is a signed type that can represent negative values. */\n  SIGNED = 1 << 0,\n  /** Is an unsigned type that cannot represent negative values. */\n  UNSIGNED = 1 << 1,\n  /** Is an integer type. */\n  INTEGER = 1 << 2,\n  /** Is a floating point type. */\n  FLOAT = 1 << 3,\n  /** Is a pointer type. */\n  POINTER = 1 << 4,\n  /** Is smaller than 32-bits. */\n  SHORT = 1 << 5,\n  /** Is larger than 32-bits. */\n  LONG = 1 << 6,\n  /** Is a value type. */\n  VALUE = 1 << 7,\n  /** Is a reference type. */\n  REFERENCE = 1 << 8,\n  /** Is a nullable type. */\n  NULLABLE = 1 << 9\n}\n\n/** Represents a resolved type. */\nexport class Type {\n\n  /** Type kind. */\n  kind: TypeKind;\n  /** Type flags. */\n  flags: TypeFlags;\n  /** Size in bits. */\n  size: u32;\n  /** Size in bytes. */\n  byteSize: i32;\n  /** Underlying class reference, if a class type. */\n  classReference: Class | null;\n  /** Underlying signature reference, if a function type. */\n  signatureReference: Signature | null;\n  /** Respective non-nullable type, if nullable. */\n  nonNullableType: Type;\n  /** Cached nullable type, if non-nullable. */\n  private cachedNullableType: Type | null = null;\n\n  /** Constructs a new resolved type. */\n  constructor(kind: TypeKind, flags: TypeFlags, size: u32) {\n    this.kind = kind;\n    this.flags = flags;\n    this.size = size;\n    this.byteSize = <i32>ceil<f64>(<f64>size / 8);\n    this.classReference = null;\n    this.signatureReference = null;\n    this.nonNullableType = this;\n  }\n\n  /** Returns the closest int type representing this type. */\n  get intType(): Type {\n    switch (this.kind) {\n      case TypeKind.I8: return Type.i8;\n      case TypeKind.I16: return Type.i16;\n      case TypeKind.F32:\n      case TypeKind.I32: return Type.i32;\n      case TypeKind.F64:\n      case TypeKind.I64: return Type.i64;\n      case TypeKind.ISIZE: return this.size == 64 ? Type.isize64 : Type.isize32;\n      case TypeKind.U8: return Type.u8;\n      case TypeKind.U16: return Type.u16;\n      case TypeKind.U32: return Type.u32;\n      case TypeKind.U64: return Type.u64;\n      case TypeKind.USIZE: return this.size == 64 ? Type.usize64 : Type.usize32;\n      case TypeKind.BOOL:\n      default: return Type.i32;\n    }\n  }\n\n  /** Tests if this is a managed type that needs GC hooks. */\n  isManaged(program: Program): bool {\n    if (program.hasGC) {\n      let classReference = this.classReference;\n      return classReference !== null && !classReference.hasDecorator(DecoratorFlags.UNMANAGED);\n    }\n    return false;\n  }\n\n  /** Computes the sign-extending shift in the target type. */\n  computeSmallIntegerShift(targetType: Type): u32 {\n    return targetType.size - this.size;\n  }\n\n  /** Computes the truncating mask in the target type. */\n  computeSmallIntegerMask(targetType: Type): u32 {\n    var size = this.is(TypeFlags.UNSIGNED) ? this.size : this.size - 1;\n    return ~0 >>> (targetType.size - size);\n  }\n\n  /** Tests if this type has (all of) the specified flags. */\n  is(flags: TypeFlags): bool { return (this.flags & flags) == flags; }\n  /** Tests if this type has any of the specified flags. */\n  isAny(flags: TypeFlags): bool { return (this.flags & flags) != 0; }\n\n  /** Composes a class type from this type and a class. */\n  asClass(classType: Class): Type {\n    assert(this.kind == TypeKind.USIZE && !this.classReference);\n    var ret = new Type(this.kind, this.flags & ~TypeFlags.VALUE | TypeFlags.REFERENCE, this.size);\n    ret.classReference = classType;\n    return ret;\n  }\n\n  /** Composes a function type from this type and a function. */\n  asFunction(signature: Signature): Type {\n    assert(this.kind == TypeKind.U32 && !this.signatureReference);\n    var ret = new Type(this.kind, this.flags & ~TypeFlags.VALUE | TypeFlags.REFERENCE, this.size);\n    ret.signatureReference = signature;\n    return ret;\n  }\n\n  /** Composes the respective nullable type of this type. */\n  asNullable(): Type {\n    assert(this.is(TypeFlags.REFERENCE));\n    if (!this.cachedNullableType) {\n      assert(!this.is(TypeFlags.NULLABLE));\n      this.cachedNullableType = new Type(this.kind, this.flags | TypeFlags.NULLABLE, this.size);\n      this.cachedNullableType.nonNullableType = this;\n      this.cachedNullableType.classReference = this.classReference;       // either a class reference\n      this.cachedNullableType.signatureReference = this.signatureReference; // or a function reference\n    }\n    return this.cachedNullableType;\n  }\n\n  /** Tests if a value of this type is assignable to a target of the specified type. */\n  isAssignableTo(target: Type, signednessIsRelevant: bool = false): bool {\n    var currentClass: Class | null;\n    var targetClass: Class | null;\n    var currentFunction: Signature | null;\n    var targetFunction: Signature | null;\n    if (this.is(TypeFlags.REFERENCE)) {\n      if (target.is(TypeFlags.REFERENCE)) {\n        if (!this.is(TypeFlags.NULLABLE) || target.is(TypeFlags.NULLABLE)) {\n          if (currentClass = this.classReference) {\n            if (targetClass = target.classReference) {\n              return currentClass.isAssignableTo(targetClass);\n            }\n          } else if (currentFunction = this.signatureReference) {\n            if (targetFunction = target.signatureReference) {\n              return currentFunction.isAssignableTo(targetFunction);\n            }\n          }\n        }\n      }\n    } else if (!target.is(TypeFlags.REFERENCE)) {\n      if (this.is(TypeFlags.INTEGER)) {\n        if (target.is(TypeFlags.INTEGER)) {\n          if (\n            !signednessIsRelevant ||\n            this == Type.bool || // a bool (0 or 1) can be safely assigned to all sorts of integers\n            this.is(TypeFlags.SIGNED) == target.is(TypeFlags.SIGNED)\n          ) {\n            return this.size <= target.size;\n          }\n        } else if (target.kind == TypeKind.F32) {\n          return this.size <= 23; // mantissa bits\n        } else if (target.kind == TypeKind.F64) {\n          return this.size <= 52; // ^\n        }\n      } else if (this.is(TypeFlags.FLOAT)) {\n        if (target.is(TypeFlags.FLOAT)) {\n          return this.size <= target.size;\n        }\n      }\n    }\n    return false;\n  }\n\n  /** Determines the common compatible type of two types, if any. */\n  static commonCompatible(left: Type, right: Type, signednessIsImportant: bool): Type | null {\n    if (right.isAssignableTo(left, signednessIsImportant)) return left;\n    else if (left.isAssignableTo(right, signednessIsImportant)) return right;\n    return null;\n  }\n\n  /** Converts this type to its TypeScript representation. */\n  toString(kindOnly: bool = false): string {\n    if (!kindOnly && this.is(TypeFlags.REFERENCE)) {\n      let classReference = this.classReference;\n      if (classReference) {\n        return this.is(TypeFlags.NULLABLE)\n          ? classReference.toString() + \" | null\"\n          : classReference.toString();\n      }\n      let signatureReference = this.signatureReference;\n      if (signatureReference) {\n        return this.is(TypeFlags.NULLABLE)\n          ? \"(\" + signatureReference.toString(true) + \") | null\"\n          : signatureReference.toString(true);\n      }\n      assert(false);\n    }\n    switch (this.kind) {\n      case TypeKind.I8: return \"i8\";\n      case TypeKind.I16: return \"i16\";\n      case TypeKind.I32: return \"i32\";\n      case TypeKind.I64: return \"i64\";\n      case TypeKind.ISIZE: return \"isize\";\n      case TypeKind.U8: return \"u8\";\n      case TypeKind.U16: return \"u16\";\n      case TypeKind.U32: return \"u32\";\n      case TypeKind.U64: return \"u64\";\n      case TypeKind.USIZE: return \"usize\";\n      case TypeKind.BOOL: return \"bool\";\n      case TypeKind.F32: return \"f32\";\n      case TypeKind.F64: return \"f64\";\n      default: assert(false);\n      case TypeKind.VOID: return \"void\";\n    }\n  }\n\n  // Binaryen specific\n\n  /** Converts this type to its respective native type. */\n  toNativeType(): NativeType {\n    switch (this.kind) {\n      default: return NativeType.I32;\n      case TypeKind.I64:\n      case TypeKind.U64: return NativeType.I64;\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: return this.size == 64 ? NativeType.I64 : NativeType.I32;\n      case TypeKind.F32: return NativeType.F32;\n      case TypeKind.F64: return NativeType.F64;\n      case TypeKind.VOID:  return NativeType.None;\n    }\n  }\n\n  /** Converts this type to its native `0` value. */\n  toNativeZero(module: Module): ExpressionRef {\n    switch (this.kind) {\n      case TypeKind.VOID: assert(false);\n      default: return module.createI32(0);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: if (this.size != 64) return module.createI32(0);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.createI64(0);\n      case TypeKind.F32: return module.createF32(0);\n      case TypeKind.F64: return module.createF64(0);\n    }\n  }\n\n  /** Converts this type to its native `1` value. */\n  toNativeOne(module: Module): ExpressionRef {\n    switch (this.kind) {\n      case TypeKind.VOID: assert(false);\n      default: return module.createI32(1);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: if (this.size != 64) return module.createI32(1);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.createI64(1);\n      case TypeKind.F32: return module.createF32(1);\n      case TypeKind.F64: return module.createF64(1);\n    }\n  }\n\n  /** Converts this type to its native `-1` value. */\n  toNativeNegOne(module: Module): ExpressionRef {\n    switch (this.kind) {\n      case TypeKind.VOID: assert(false);\n      default: return module.createI32(-1);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: if (this.size != 64) return module.createI32(-1);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.createI64(-1, -1);\n      case TypeKind.F32: return module.createF32(-1);\n      case TypeKind.F64: return module.createF64(-1);\n    }\n  }\n\n  /** Converts this type to its signature string. */\n  toSignatureString(): string {\n    switch (this.kind) {\n      default: return \"i\";\n      case TypeKind.I64:\n      case TypeKind.U64: return \"I\";\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: return this.size == 64 ? \"I\" : \"i\";\n      case TypeKind.F32: return \"f\";\n      case TypeKind.F64: return \"F\";\n      case TypeKind.VOID: return \"v\";\n    }\n  }\n\n  // Types\n\n  /** An 8-bit signed integer. */\n  static readonly i8: Type  = new Type(TypeKind.I8,\n    TypeFlags.SIGNED   |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,   8\n  );\n\n  /** A 16-bit signed integer. */\n  static readonly i16: Type = new Type(TypeKind.I16,\n    TypeFlags.SIGNED   |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  16\n  );\n\n  /** A 32-bit signed integer. */\n  static readonly i32: Type = new Type(TypeKind.I32,\n    TypeFlags.SIGNED   |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit signed integer. */\n  static readonly i64: Type = new Type(TypeKind.I64,\n    TypeFlags.SIGNED   |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** A 32-bit signed size. WASM32 only. */\n  static readonly isize32: Type = new Type(TypeKind.ISIZE,\n    TypeFlags.SIGNED   |\n    TypeFlags.INTEGER  |\n    TypeFlags.POINTER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit signed size. WASM64 only. */\n  static readonly isize64: Type = new Type(TypeKind.ISIZE,\n    TypeFlags.SIGNED   |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.POINTER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** An 8-bit unsigned integer. */\n  static readonly u8: Type = new Type(TypeKind.U8,\n    TypeFlags.UNSIGNED |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,   8\n  );\n\n  /** A 16-bit unsigned integer. */\n  static readonly u16: Type = new Type(TypeKind.U16,\n    TypeFlags.UNSIGNED |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  16\n  );\n\n  /** A 32-bit unsigned integer. */\n  static readonly u32: Type = new Type(TypeKind.U32,\n    TypeFlags.UNSIGNED |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit unsigned integer. */\n  static readonly u64: Type = new Type(TypeKind.U64,\n    TypeFlags.UNSIGNED |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** A 32-bit unsigned size. WASM32 only. */\n  static readonly usize32: Type = new Type(TypeKind.USIZE,\n    TypeFlags.UNSIGNED |\n    TypeFlags.INTEGER  |\n    TypeFlags.POINTER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit unsigned size. WASM64 only. */\n  static readonly usize64: Type = new Type(TypeKind.USIZE,\n    TypeFlags.UNSIGNED |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.POINTER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** A 1-bit unsigned integer. */\n  static readonly bool: Type = new Type(TypeKind.BOOL,\n    TypeFlags.UNSIGNED |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,   1\n  );\n\n  /** A 32-bit float. */\n  static readonly f32: Type = new Type(TypeKind.F32,\n    TypeFlags.SIGNED   |\n    TypeFlags.FLOAT    |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit float. */\n  static readonly f64: Type = new Type(TypeKind.F64,\n    TypeFlags.SIGNED   |\n    TypeFlags.LONG     |\n    TypeFlags.FLOAT    |\n    TypeFlags.VALUE,  64\n  );\n\n  /** No return type. */\n  static readonly void: Type = new Type(TypeKind.VOID, TypeFlags.NONE, 0);\n}\n\n/** Converts an array of types to an array of native types. */\nexport function typesToNativeTypes(types: Type[]): NativeType[] {\n  var numTypes = types.length;\n  var ret = new Array<NativeType>(numTypes);\n  for (let i = 0; i < numTypes; ++i) ret[i] = types[i].toNativeType();\n  return ret;\n}\n\n/** Converts an array of types to its combined string representation. */\nexport function typesToString(types: Type[]): string {\n  var numTypes = types.length;\n  if (!numTypes) return \"\";\n  var sb = new Array<string>(numTypes);\n  for (let i = 0; i < numTypes; ++i) sb[i] = types[i].toString();\n  return sb.join(\",\");\n}\n\n/** Represents a fully resolved function signature. */\nexport class Signature {\n\n  /** Parameter types, if any, excluding `this`. */\n  parameterTypes: Type[];\n  /** Parameter names, if known, excluding `this`. */\n  parameterNames: string[] | null;\n  /** Number of required parameters excluding `this`. Other parameters are considered optional. */\n  requiredParameters: i32;\n  /** Return type. */\n  returnType: Type;\n  /** This type, if an instance signature. */\n  thisType: Type | null;\n  /** Whether the last parameter is a rest parameter. */\n  hasRest: bool;\n  /** Cached {@link FunctionTarget}. */\n  cachedFunctionTarget: FunctionTarget | null = null;\n  /** Respective function type. */\n  type: Type;\n\n  /** Constructs a new signature. */\n  constructor(\n    parameterTypes: Type[] | null = null,\n    returnType: Type | null = null,\n    thisType: Type | null = null\n  ) {\n    this.parameterTypes = parameterTypes ? parameterTypes : [];\n    this.parameterNames = null;\n    this.requiredParameters = 0;\n    this.returnType = returnType ? returnType : Type.void;\n    this.thisType = thisType;\n    this.hasRest = false;\n    this.type = Type.u32.asFunction(this);\n  }\n\n  /** Gets the known or, alternatively, generic parameter name at the specified index. */\n  getParameterName(index: i32): string {\n    var parameterNames = this.parameterNames;\n    return parameterNames && parameterNames.length > index\n      ? parameterNames[index]\n      : getDefaultParameterName(index);\n  }\n\n  /** Tests if a value of this function type is assignable to a target of the specified function type. */\n  isAssignableTo(target: Signature): bool {\n    // TODO: maybe cache results?\n\n    // check `this` type\n    var thisThisType = this.thisType;\n    var targetThisType = target.thisType;\n    if (thisThisType) {\n      if (!(targetThisType && thisThisType.isAssignableTo(targetThisType))) return false;\n    } else if (targetThisType) {\n      return false;\n    }\n\n    // check rest parameter\n    if (this.hasRest != target.hasRest) return false; // TODO\n\n    // check parameter types\n    var thisParameterTypes = this.parameterTypes;\n    var targetParameterTypes = target.parameterTypes;\n    var numParameters = thisParameterTypes.length;\n    if (numParameters != targetParameterTypes.length) return false;\n    for (let i = 0; i < numParameters; ++i) {\n      let thisParameterType = thisParameterTypes[i];\n      let targetParameterType = targetParameterTypes[i];\n      if (!thisParameterType.isAssignableTo(targetParameterType)) return false;\n    }\n\n    // check return type\n    var thisReturnType = this.returnType;\n    var targetReturnType = target.returnType;\n    return thisReturnType == targetReturnType || thisReturnType.isAssignableTo(targetReturnType);\n  }\n\n  /** Converts a signature to a function type string. */\n  static makeSignatureString(parameterTypes: Type[] | null, returnType: Type, thisType: Type | null = null): string {\n    var sb = [];\n    if (thisType) sb.push(thisType.toSignatureString());\n    if (parameterTypes) {\n      for (let i = 0, k = parameterTypes.length; i < k; ++i) sb.push(parameterTypes[i].toSignatureString());\n    }\n    sb.push(returnType.toSignatureString());\n    return sb.join(\"\");\n  }\n\n  /** Converts this signature to a function type string. */\n  toSignatureString(): string {\n    return Signature.makeSignatureString(this.parameterTypes, this.returnType, this.thisType);\n  }\n\n  /** Converts this signature to a string. */\n  toString(includeThis: bool = false): string {\n    var sb = new Array<string>();\n    sb.push(\"(\");\n    var index = 0;\n    var thisType = this.thisType;\n    if (thisType) {\n      if (includeThis) {\n        sb.push(\"this: \");\n        sb.push(thisType.toString());\n        index = 1;\n      }\n    }\n    var parameters = this.parameterTypes;\n    var numParameters = parameters.length;\n    if (numParameters) {\n      let names = this.parameterNames;\n      let numNames = names ? names.length : 0;\n      let optionalStart = this.requiredParameters;\n      let restIndex = this.hasRest ? numParameters - 1 : -1;\n      for (let i = 0; i < numParameters; ++i, ++index) {\n        if (index) sb.push(\", \");\n        if (i == restIndex) sb.push(\"...\");\n        if (i < numNames) sb.push((<string[]>names)[i]);\n        else sb.push(getDefaultParameterName(i));\n        if (i >= optionalStart && i != restIndex) sb.push(\"?: \");\n        else sb.push(\": \");\n        sb.push(parameters[i].toString());\n      }\n    }\n    sb.push(\") => \");\n    sb.push(this.returnType.toString());\n    return sb.join(\"\");\n  }\n}\n\n// helpers\n\n// Cached default parameter names used where names are unknown.\nvar cachedDefaultParameterNames: string[] | null = null;\n\n/** Gets the cached default parameter name for the specified index. */\nexport function getDefaultParameterName(index: i32): string {\n  if (!cachedDefaultParameterNames) cachedDefaultParameterNames = [];\n  for (let i = cachedDefaultParameterNames.length; i <= index; ++i) {\n    cachedDefaultParameterNames.push(\"arg$\" + i.toString(10));\n  }\n  return cachedDefaultParameterNames[index - 1];\n}\n","/**\n * A TypeScript tokenizer modified for AssemblyScript.\n *\n * Skips over trivia and provides a general mark/reset mechanism for the parser to utilize on\n * ambiguous tokens.\n *\n * @module tokenizer\n *//***/\n\nimport {\n  DiagnosticCode,\n  DiagnosticMessage,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  Source,\n  CommentKind\n} from \"./ast\";\n\nimport {\n  CharCode,\n  isLineBreak,\n  isWhiteSpace,\n  isIdentifierStart,\n  isIdentifierPart,\n  isDecimalDigit,\n  isOctalDigit,\n  isKeywordCharacter\n} from \"./util\";\n\n/** Named token types. */\nexport enum Token {\n\n  // keywords\n  // discarded: ANY, BOOLEAN, NEVER, NUMBER, STRING, SYMBOL, UNDEFINED, LESSTHAN_SLASH\n\n  ABSTRACT,\n  AS,\n  ASYNC,\n  AWAIT,        // ES2017\n  BREAK,        // ES2017\n  CASE,         // ES2017\n  CATCH,        // ES2017\n  CLASS,        // ES2017\n  CONST,        // ES2017\n  CONTINUE,     // ES2017\n  CONSTRUCTOR,\n  DEBUGGER,     // ES2017\n  DECLARE,\n  DEFAULT,      // ES2017\n  DELETE,       // ES2017\n  DO,           // ES2017\n  ELSE,         // ES2017\n  ENUM,         // ES2017 future\n  EXPORT,       // ES2017\n  EXTENDS,      // ES2017\n  FALSE,        // ES\n  FINALLY,      // ES2017\n  FOR,          // ES2017\n  FROM,         // AS possible identifier\n  FUNCTION,     // ES2017\n  GET,\n  IF,           // ES2017\n  IMPLEMENTS,   // ES2017 non-lexical\n  IMPORT,       // ES2017\n  IN,           // ES2017\n  INSTANCEOF,   // ES2017\n  INTERFACE,    // ES2017 non-lexical\n  IS,\n  KEYOF,\n  LET,          // ES2017 non-lexical\n  MODULE,       // AS possible identifier\n  NAMESPACE,    // AS possible identifier\n  NEW,          // ES2017\n  NULL,         // ES\n  OF,\n  PACKAGE,      // ES2017 non-lexical\n  PRIVATE,      // ES2017 non-lexical\n  PROTECTED,    // ES2017 non-lexical\n  PUBLIC,       // ES2017 non-lexical\n  READONLY,\n  RETURN,       // ES2017\n  SET,\n  STATIC,       // ES2017 non-lexical\n  SUPER,        // ES2017\n  SWITCH,       // ES2017\n  THIS,         // ES2017\n  THROW,        // ES2017\n  TRUE,         // ES\n  TRY,          // ES2017\n  TYPE,         // AS possible identifier\n  TYPEOF,       // ES2017\n  VAR,          // ES2017\n  VOID,         // ES2017\n  WHILE,        // ES2017\n  WITH,         // ES2017\n  YIELD,        // ES2017\n\n  // punctuation\n\n  OPENBRACE,\n  CLOSEBRACE,\n  OPENPAREN,\n  CLOSEPAREN,\n  OPENBRACKET,\n  CLOSEBRACKET,\n  DOT,\n  DOT_DOT_DOT,\n  SEMICOLON,\n  COMMA,\n  LESSTHAN,\n  GREATERTHAN,\n  LESSTHAN_EQUALS,\n  GREATERTHAN_EQUALS,\n  EQUALS_EQUALS,\n  EXCLAMATION_EQUALS,\n  EQUALS_EQUALS_EQUALS,\n  EXCLAMATION_EQUALS_EQUALS,\n  EQUALS_GREATERTHAN,\n  PLUS,\n  MINUS,\n  ASTERISK_ASTERISK,\n  ASTERISK,\n  SLASH,\n  PERCENT,\n  PLUS_PLUS,\n  MINUS_MINUS,\n  LESSTHAN_LESSTHAN,\n  GREATERTHAN_GREATERTHAN,\n  GREATERTHAN_GREATERTHAN_GREATERTHAN,\n  AMPERSAND,\n  BAR,\n  CARET,\n  EXCLAMATION,\n  TILDE,\n  AMPERSAND_AMPERSAND,\n  BAR_BAR,\n  QUESTION,\n  COLON,\n  EQUALS,\n  PLUS_EQUALS,\n  MINUS_EQUALS,\n  ASTERISK_EQUALS,\n  ASTERISK_ASTERISK_EQUALS,\n  SLASH_EQUALS,\n  PERCENT_EQUALS,\n  LESSTHAN_LESSTHAN_EQUALS,\n  GREATERTHAN_GREATERTHAN_EQUALS,\n  GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS,\n  AMPERSAND_EQUALS,\n  BAR_EQUALS,\n  CARET_EQUALS,\n  AT,\n\n  // literals\n\n  IDENTIFIER,\n  STRINGLITERAL,\n  INTEGERLITERAL,\n  FLOATLITERAL,\n\n  // meta\n\n  INVALID,\n  ENDOFFILE\n}\n\nexport enum IdentifierHandling {\n  DEFAULT,\n  PREFER,\n  ALWAYS\n}\n\nexport function tokenFromKeyword(text: string): Token {\n  assert(text.length);\n  switch (text.charCodeAt(0)) {\n    case CharCode.a: {\n      switch (text) {\n        case \"abstract\": return Token.ABSTRACT;\n        case \"as\": return Token.AS;\n        case \"async\": return Token.ASYNC;\n        case \"await\": return Token.AWAIT;\n      }\n      break;\n    }\n    case CharCode.b: {\n      switch (text) {\n        case \"break\": return Token.BREAK;\n      }\n      break;\n    }\n    case CharCode.c: {\n      switch (text) {\n        case \"case\": return Token.CASE;\n        case \"catch\": return Token.CATCH;\n        case \"class\": return Token.CLASS;\n        case \"continue\": return Token.CONTINUE;\n        case \"const\": return Token.CONST;\n        case \"constructor\": return Token.CONSTRUCTOR;\n      }\n      break;\n    }\n    case CharCode.d: {\n      switch (text) {\n        case \"debugger\": return Token.DEBUGGER;\n        case \"declare\": return Token.DECLARE;\n        case \"default\": return Token.DEFAULT;\n        case \"delete\": return Token.DELETE;\n        case \"do\": return Token.DO;\n      }\n      break;\n    }\n    case CharCode.e: {\n      switch (text) {\n        case \"else\": return Token.ELSE;\n        case \"enum\": return Token.ENUM;\n        case \"export\": return Token.EXPORT;\n        case \"extends\": return Token.EXTENDS;\n      }\n      break;\n    }\n    case CharCode.f: {\n      switch (text) {\n        case \"false\": return Token.FALSE;\n        case \"finally\": return Token.FINALLY;\n        case \"for\": return Token.FOR;\n        case \"from\": return Token.FROM;\n        case \"function\": return Token.FUNCTION;\n      }\n      break;\n    }\n    case CharCode.g: {\n      switch (text) {\n        case \"get\": return Token.GET;\n      }\n      break;\n    }\n    case CharCode.i: {\n      switch (text) {\n        case \"if\": return Token.IF;\n        case \"implements\": return Token.IMPLEMENTS;\n        case \"import\": return Token.IMPORT;\n        case \"in\": return Token.IN;\n        case \"instanceof\": return Token.INSTANCEOF;\n        case \"interface\": return Token.INTERFACE;\n        case \"is\": return Token.IS;\n      }\n      break;\n    }\n    case CharCode.k: {\n      switch (text) {\n        case \"keyof\": return Token.KEYOF;\n      }\n      break;\n    }\n    case CharCode.l: {\n      switch (text) {\n        case \"let\": return Token.LET;\n      }\n      break;\n    }\n    case CharCode.m: {\n      switch (text) {\n        case \"module\": return Token.MODULE;\n      }\n      break;\n    }\n    case CharCode.n: {\n      switch (text) {\n        case \"namespace\": return Token.NAMESPACE;\n        case \"new\": return Token.NEW;\n        case \"null\": return Token.NULL;\n      }\n      break;\n    }\n    case CharCode.o: {\n      switch (text) {\n        case \"of\": return Token.OF;\n      }\n      break;\n    }\n    case CharCode.p: {\n      switch (text) {\n        case \"package\": return Token.PACKAGE;\n        case \"private\": return Token.PRIVATE;\n        case \"protected\": return Token.PROTECTED;\n        case \"public\": return Token.PUBLIC;\n      }\n      break;\n    }\n    case CharCode.r: {\n      switch (text) {\n        case \"readonly\": return Token.READONLY;\n        case \"return\": return Token.RETURN;\n      }\n      break;\n    }\n    case CharCode.s: {\n      switch (text) {\n        case \"set\": return Token.SET;\n        case \"static\": return Token.STATIC;\n        case \"super\": return Token.SUPER;\n        case \"switch\": return Token.SWITCH;\n      }\n      break;\n    }\n    case CharCode.t: {\n      switch (text) {\n        case \"this\": return Token.THIS;\n        case \"throw\": return Token.THROW;\n        case \"true\": return Token.TRUE;\n        case \"try\": return Token.TRY;\n        case \"type\": return Token.TYPE;\n        case \"typeof\": return Token.TYPEOF;\n      }\n      break;\n    }\n    case CharCode.v: {\n      switch (text) {\n        case \"var\": return Token.VAR;\n        case \"void\": return Token.VOID;\n      }\n      break;\n    }\n    case CharCode.w: {\n      switch (text) {\n        case \"while\": return Token.WHILE;\n        case \"with\": return Token.WITH;\n      }\n      break;\n    }\n    case CharCode.y: {\n      switch (text) {\n        case \"yield\": return Token.YIELD;\n      }\n      break;\n    }\n  }\n  return Token.INVALID;\n}\n\nexport function tokenIsAlsoIdentifier(token: Token): bool {\n  switch (token) {\n    case Token.ABSTRACT:\n    case Token.AS:\n    case Token.CONSTRUCTOR:\n    case Token.DECLARE:\n    case Token.DELETE:\n    case Token.FROM:\n    case Token.FOR:\n    case Token.GET:\n    case Token.IS:\n    case Token.KEYOF:\n    case Token.MODULE:\n    case Token.NAMESPACE:\n    case Token.READONLY:\n    case Token.SET:\n    case Token.TYPE: return true;\n    default: return false;\n  }\n}\n\nexport function operatorTokenToString(token: Token): string {\n  switch (token) {\n    case Token.DELETE: return \"delete\";\n    case Token.IN: return \"in\";\n    case Token.INSTANCEOF: return \"instanceof\";\n    case Token.NEW: return \"new\";\n    case Token.TYPEOF: return \"typeof\";\n    case Token.VOID: return \"void\";\n    case Token.YIELD: return \"yield\";\n    case Token.DOT_DOT_DOT: return \"...\";\n    case Token.COMMA: return \",\";\n    case Token.LESSTHAN: return \"<\";\n    case Token.GREATERTHAN: return \">\";\n    case Token.LESSTHAN_EQUALS: return \"<=\";\n    case Token.GREATERTHAN_EQUALS: return \">=\";\n    case Token.EQUALS_EQUALS: return \"==\";\n    case Token.EXCLAMATION_EQUALS: return \"!=\";\n    case Token.EQUALS_EQUALS_EQUALS: return \"===\";\n    case Token.EXCLAMATION_EQUALS_EQUALS: return \"!==\";\n    case Token.PLUS: return \"+\";\n    case Token.MINUS: return \"-\";\n    case Token.ASTERISK_ASTERISK: return \"**\";\n    case Token.ASTERISK: return \"*\";\n    case Token.SLASH: return \"/\";\n    case Token.PERCENT: return \"%\";\n    case Token.PLUS_PLUS: return \"++\";\n    case Token.MINUS_MINUS: return \"--\";\n    case Token.LESSTHAN_LESSTHAN: return \"<<\";\n    case Token.GREATERTHAN_GREATERTHAN: return \">>\";\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: return \">>>\";\n    case Token.AMPERSAND: return \"&\";\n    case Token.BAR: return \"|\";\n    case Token.CARET: return \"^\";\n    case Token.EXCLAMATION: return \"!\";\n    case Token.TILDE: return \"~\";\n    case Token.AMPERSAND_AMPERSAND: return \"&&\";\n    case Token.BAR_BAR: return \"||\";\n    case Token.EQUALS: return \"=\";\n    case Token.PLUS_EQUALS: return \"+=\";\n    case Token.MINUS_EQUALS: return \"-=\";\n    case Token.ASTERISK_EQUALS: return \"*=\";\n    case Token.ASTERISK_ASTERISK_EQUALS: return \"**=\";\n    case Token.SLASH_EQUALS: return \"/=\";\n    case Token.PERCENT_EQUALS: return \"%=\";\n    case Token.LESSTHAN_LESSTHAN_EQUALS: return \"<<=\";\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS: return \">>=\";\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS: return \">>>=\";\n    case Token.AMPERSAND_EQUALS: return \"&=\";\n    case Token.BAR_EQUALS: return \"|=\";\n    case Token.CARET_EQUALS: return \"^=\";\n    default: {\n      assert(false);\n      return \"\";\n    }\n  }\n}\n\nexport class Range {\n\n  source: Source;\n  start: i32;\n  end: i32;\n\n  // TODO: set these while tokenizing\n  // line: i32;\n  // column: i32;\n\n  constructor(source: Source, start: i32, end: i32) {\n    this.source = source;\n    this.start = start;\n    this.end = end;\n  }\n\n  static join(a: Range, b: Range): Range {\n    if (a.source != b.source) throw new Error(\"source mismatch\");\n    return new Range(a.source,\n      a.start < b.start ? a.start : b.start,\n      a.end > b.end ? a.end : b.end\n    );\n  }\n\n  get atStart(): Range {\n    return new Range(this.source, this.start, this.start);\n  }\n  get atEnd(): Range {\n    return new Range(this.source, this.end, this.end);\n  }\n\n  get line(): i32 {\n    var text = this.source.text;\n    var line = 1;\n    for (let pos = this.start; pos >= 0; --pos) {\n      if (text.charCodeAt(pos) == CharCode.LINEFEED) line++;\n    }\n    return line;\n  }\n\n  get column(): i32 {\n    var text = this.source.text;\n    var column = 0;\n    for (let pos = this.start - 1; pos >= 0; --pos) {\n      if (text.charCodeAt(pos) == CharCode.LINEFEED) break;\n      ++column;\n    }\n    return column;\n  }\n\n  toString(): string {\n    return this.source.text.substring(this.start, this.end);\n  }\n\n  debugInfoRef: usize = 0;\n}\n\ndeclare function parseFloat(str: string): f64;\n\n/** Handler for intercepting comments while tokenizing. */\nexport type CommentHandler = (kind: CommentKind, text: string, range: Range) => void;\n\n/** Tokenizes a source to individual {@link Token}s. */\nexport class Tokenizer extends DiagnosticEmitter {\n\n  source: Source;\n  end: i32 = 0;\n\n  pos: i32 = 0;\n  token: Token = -1;\n  tokenPos: i32 = 0;\n\n  nextToken: Token = -1;\n  nextTokenPos: i32 = 0;\n  nextTokenOnNewLine: bool = false;\n\n  onComment: CommentHandler | null = null;\n\n  /** Constructs a new tokenizer. */\n  constructor(source: Source, diagnostics: DiagnosticMessage[] | null = null) {\n    super(diagnostics);\n    this.source = source;\n    this.pos = 0;\n    this.end = source.text.length;\n    this.diagnostics = diagnostics ? diagnostics : new Array();\n\n    var text = source.text;\n\n    // skip bom\n    if (\n      this.pos < this.end &&\n      text.charCodeAt(this.pos) == CharCode.BYTEORDERMARK\n    ) {\n      ++this.pos;\n    }\n\n    // skip shebang\n    if (\n      this.pos + 1 < this.end &&\n      text.charCodeAt(this.pos) == CharCode.HASH &&\n      text.charCodeAt(this.pos + 1) == CharCode.EXCLAMATION\n    ) {\n      this.pos += 2;\n      while (\n        this.pos < this.end &&\n        text.charCodeAt(this.pos) != CharCode.LINEFEED\n      ) {\n        ++this.pos;\n      }\n      // 'next' now starts at lf or eof\n    }\n  }\n\n  next(identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT): Token {\n    this.nextToken = -1;\n    return this.token = this.unsafeNext(identifierHandling);\n  }\n\n  private unsafeNext(\n    identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT,\n    maxTokenLength: i32 = i32.MAX_VALUE\n  ): Token {\n    var text = this.source.text;\n    while (this.pos < this.end) {\n      this.tokenPos = this.pos;\n      let c = text.charCodeAt(this.pos);\n      switch (c) {\n        case CharCode.CARRIAGERETURN: {\n          if (!(\n            ++this.pos < this.end &&\n            text.charCodeAt(this.pos) == CharCode.LINEFEED\n          )) break;\n          // otherwise fall-through\n        }\n        case CharCode.LINEFEED:\n        case CharCode.TAB:\n        case CharCode.VERTICALTAB:\n        case CharCode.FORMFEED:\n        case CharCode.SPACE: {\n          ++this.pos;\n          break;\n        }\n        case CharCode.EXCLAMATION: {\n          ++this.pos;\n          if (\n            maxTokenLength > 1 && this.pos < this.end &&\n            text.charCodeAt(this.pos) == CharCode.EQUALS\n          ) {\n            ++this.pos;\n            if (\n              maxTokenLength > 2 && this.pos < this.end &&\n              text.charCodeAt(this.pos) == CharCode.EQUALS\n            ) {\n              ++this.pos;\n              return Token.EXCLAMATION_EQUALS_EQUALS;\n            }\n            return Token.EXCLAMATION_EQUALS;\n          }\n          return Token.EXCLAMATION;\n        }\n        case CharCode.DOUBLEQUOTE:\n        case CharCode.SINGLEQUOTE:\n        case CharCode.BACKTICK: { // TODO\n          return Token.STRINGLITERAL; // expects a call to readString\n        }\n        case CharCode.PERCENT: {\n          ++this.pos;\n          if (\n            maxTokenLength > 1 && this.pos < this.end &&\n            text.charCodeAt(this.pos) == CharCode.EQUALS\n          ) {\n            ++this.pos;\n            return Token.PERCENT_EQUALS;\n          }\n          return Token.PERCENT;\n        }\n        case CharCode.AMPERSAND: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            if (text.charCodeAt(this.pos) == CharCode.AMPERSAND) {\n              ++this.pos;\n              return Token.AMPERSAND_AMPERSAND;\n            }\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.AMPERSAND_EQUALS;\n            }\n          }\n          return Token.AMPERSAND;\n        }\n        case CharCode.OPENPAREN: {\n          ++this.pos;\n          return Token.OPENPAREN;\n        }\n        case CharCode.CLOSEPAREN: {\n          ++this.pos;\n          return Token.CLOSEPAREN;\n        }\n        case CharCode.ASTERISK: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.ASTERISK_EQUALS;\n            }\n            if (text.charCodeAt(this.pos) == CharCode.ASTERISK) {\n              ++this.pos;\n              if (\n                maxTokenLength > 2 && this.pos < this.end &&\n                text.charCodeAt(this.pos) == CharCode.EQUALS\n              ) {\n                ++this.pos;\n                return Token.ASTERISK_ASTERISK_EQUALS;\n              }\n              return Token.ASTERISK_ASTERISK;\n            }\n          }\n          return Token.ASTERISK;\n        }\n        case CharCode.PLUS: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            if (text.charCodeAt(this.pos) == CharCode.PLUS) {\n              ++this.pos;\n              return Token.PLUS_PLUS;\n            }\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.PLUS_EQUALS;\n            }\n          }\n          return Token.PLUS;\n        }\n        case CharCode.COMMA: {\n          ++this.pos;\n          return Token.COMMA;\n        }\n        case CharCode.MINUS: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            if (text.charCodeAt(this.pos) == CharCode.MINUS) {\n              ++this.pos;\n              return Token.MINUS_MINUS;\n            }\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.MINUS_EQUALS;\n            }\n          }\n          return Token.MINUS;\n        }\n        case CharCode.DOT: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            if (isDecimalDigit(text.charCodeAt(this.pos))) {\n              --this.pos;\n              return Token.FLOATLITERAL; // expects a call to readFloat\n            }\n            if (\n              maxTokenLength > 2 && this.pos + 1 < this.end &&\n              text.charCodeAt(this.pos) == CharCode.DOT &&\n              text.charCodeAt(this.pos + 1) == CharCode.DOT\n            ) {\n              this.pos += 2;\n              return Token.DOT_DOT_DOT;\n            }\n          }\n          return Token.DOT;\n        }\n        case CharCode.SLASH: {\n          let commentStartPos = this.pos;\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            if (text.charCodeAt(this.pos) == CharCode.SLASH) { // single-line\n              let commentKind = CommentKind.LINE;\n              if (\n                this.pos + 1 < this.end &&\n                text.charCodeAt(this.pos + 1) == CharCode.SLASH\n              ) {\n                ++this.pos;\n                commentKind = CommentKind.TRIPLE;\n              }\n              while (++this.pos < this.end) {\n                if (text.charCodeAt(this.pos) == CharCode.LINEFEED) {\n                  ++this.pos;\n                  break;\n                }\n              }\n              if (this.onComment) {\n                this.onComment(\n                  commentKind,\n                  text.substring(commentStartPos, this.pos),\n                  this.range(commentStartPos, this.pos)\n                );\n              }\n              break;\n            }\n            if (text.charCodeAt(this.pos) == CharCode.ASTERISK) { // multi-line\n              let closed = false;\n              while (++this.pos < this.end) {\n                c = text.charCodeAt(this.pos);\n                if (\n                  c == CharCode.ASTERISK &&\n                  this.pos + 1 < this.end &&\n                  text.charCodeAt(this.pos + 1) == CharCode.SLASH\n                ) {\n                  this.pos += 2;\n                  closed = true;\n                  break;\n                }\n              }\n              if (!closed) {\n                this.error(\n                  DiagnosticCode._0_expected,\n                  this.range(this.pos), \"*/\"\n                );\n              } else if (this.onComment) {\n                this.onComment(\n                  CommentKind.BLOCK,\n                  text.substring(commentStartPos, this.pos),\n                  this.range(commentStartPos, this.pos)\n                );\n              }\n              break;\n            }\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.SLASH_EQUALS;\n            }\n          }\n          return Token.SLASH;\n        }\n        case CharCode._0:\n        case CharCode._1:\n        case CharCode._2:\n        case CharCode._3:\n        case CharCode._4:\n        case CharCode._5:\n        case CharCode._6:\n        case CharCode._7:\n        case CharCode._8:\n        case CharCode._9: {\n          return this.testInteger()\n            ? Token.INTEGERLITERAL // expects a call to readInteger\n            : Token.FLOATLITERAL;  // expects a call to readFloat\n        }\n        case CharCode.COLON: {\n          ++this.pos;\n          return Token.COLON;\n        }\n        case CharCode.SEMICOLON: {\n          ++this.pos;\n          return Token.SEMICOLON;\n        }\n        case CharCode.LESSTHAN: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            if (text.charCodeAt(this.pos) == CharCode.LESSTHAN) {\n              ++this.pos;\n              if (\n                maxTokenLength > 2 &&\n                this.pos < this.end &&\n                text.charCodeAt(this.pos) == CharCode.EQUALS\n              ) {\n                ++this.pos;\n                return Token.LESSTHAN_LESSTHAN_EQUALS;\n              }\n              return Token.LESSTHAN_LESSTHAN;\n            }\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.LESSTHAN_EQUALS;\n            }\n          }\n          return Token.LESSTHAN;\n        }\n        case CharCode.EQUALS: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\n              ++this.pos;\n              if (\n                maxTokenLength > 2 &&\n                this.pos < this.end &&\n                text.charCodeAt(this.pos) == CharCode.EQUALS\n              ) {\n                ++this.pos;\n                return Token.EQUALS_EQUALS_EQUALS;\n              }\n              return Token.EQUALS_EQUALS;\n            }\n            if (text.charCodeAt(this.pos) == CharCode.GREATERTHAN) {\n              ++this.pos;\n              return Token.EQUALS_GREATERTHAN;\n            }\n          }\n          return Token.EQUALS;\n        }\n        case CharCode.GREATERTHAN: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            if (text.charCodeAt(this.pos) == CharCode.GREATERTHAN) {\n              ++this.pos;\n              if (maxTokenLength > 2 && this.pos < this.end) {\n                if (text.charCodeAt(this.pos) == CharCode.GREATERTHAN) {\n                  ++this.pos;\n                  if (\n                    maxTokenLength > 3 && this.pos < this.end &&\n                    text.charCodeAt(this.pos) == CharCode.EQUALS\n                  ) {\n                    ++this.pos;\n                    return Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS;\n                  }\n                  return Token.GREATERTHAN_GREATERTHAN_GREATERTHAN;\n                }\n                if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\n                  ++this.pos;\n                  return Token.GREATERTHAN_GREATERTHAN_EQUALS;\n                }\n              }\n              return Token.GREATERTHAN_GREATERTHAN;\n            }\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.GREATERTHAN_EQUALS;\n            }\n          }\n          return Token.GREATERTHAN;\n        }\n        case CharCode.QUESTION: {\n          ++this.pos;\n          return Token.QUESTION;\n        }\n        case CharCode.OPENBRACKET: {\n          ++this.pos;\n          return Token.OPENBRACKET;\n        }\n        case CharCode.CLOSEBRACKET: {\n          ++this.pos;\n          return Token.CLOSEBRACKET;\n        }\n        case CharCode.CARET: {\n          ++this.pos;\n          if (\n            maxTokenLength > 1 && this.pos < this.end &&\n            text.charCodeAt(this.pos) == CharCode.EQUALS\n          ) {\n            ++this.pos;\n            return Token.CARET_EQUALS;\n          }\n          return Token.CARET;\n        }\n        case CharCode.OPENBRACE: {\n          ++this.pos;\n          return Token.OPENBRACE;\n        }\n        case CharCode.BAR: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            if (text.charCodeAt(this.pos) == CharCode.BAR) {\n              ++this.pos;\n              return Token.BAR_BAR;\n            }\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.BAR_EQUALS;\n            }\n          }\n          return Token.BAR;\n        }\n        case CharCode.CLOSEBRACE: {\n          ++this.pos;\n          return Token.CLOSEBRACE;\n        }\n        case CharCode.TILDE: {\n          ++this.pos;\n          return Token.TILDE;\n        }\n        case CharCode.AT: {\n          ++this.pos;\n          return Token.AT;\n        }\n        default: {\n          if (isIdentifierStart(c)) {\n            if (isKeywordCharacter(c)) {\n              let posBefore = this.pos;\n              while (\n                ++this.pos < this.end &&\n                isIdentifierPart(c = text.charCodeAt(this.pos))\n              ) {\n                if (!isKeywordCharacter(c)) {\n                  this.pos = posBefore;\n                  return Token.IDENTIFIER;\n                }\n              }\n              let keywordText = text.substring(posBefore, this.pos);\n              let keywordToken = tokenFromKeyword(keywordText);\n              if (\n                keywordToken != Token.INVALID &&\n                identifierHandling !== IdentifierHandling.ALWAYS &&\n                !(\n                  identifierHandling === IdentifierHandling.PREFER &&\n                  tokenIsAlsoIdentifier(keywordToken)\n                )\n              ) {\n                return keywordToken;\n              }\n              this.pos = posBefore;\n            }\n            return Token.IDENTIFIER; // expects a call to readIdentifier\n          } else if (isWhiteSpace(c)) {\n            ++this.pos;\n            break;\n          }\n          this.error(\n            DiagnosticCode.Invalid_character,\n            this.range(this.pos, this.pos + 1)\n          );\n          ++this.pos;\n          return Token.INVALID;\n        }\n      }\n    }\n    return Token.ENDOFFILE;\n  }\n\n  peek(\n    checkOnNewLine: bool = false,\n    identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT,\n    maxCompoundLength: i32 = i32.MAX_VALUE\n  ): Token {\n    var text = this.source.text;\n    if (this.nextToken < 0) {\n      let posBefore = this.pos;\n      let tokenBefore = this.token;\n      let tokenPosBefore = this.tokenPos;\n      this.nextToken = this.unsafeNext(identifierHandling, maxCompoundLength);\n      this.nextTokenPos = this.tokenPos;\n      if (checkOnNewLine) {\n        this.nextTokenOnNewLine = false;\n        for (let pos = posBefore, end = this.nextTokenPos; pos < end; ++pos) {\n          if (isLineBreak(text.charCodeAt(pos))) {\n            this.nextTokenOnNewLine = true;\n            break;\n          }\n        }\n      }\n      this.pos = posBefore;\n      this.token = tokenBefore;\n      this.tokenPos = tokenPosBefore;\n    }\n    return this.nextToken;\n  }\n\n  skipIdentifier(): bool {\n    return this.skip(Token.IDENTIFIER, IdentifierHandling.PREFER);\n  }\n\n  skipIdentifierName(): bool {\n    return this.skip(Token.IDENTIFIER, IdentifierHandling.ALWAYS);\n  }\n\n  skip(token: Token, identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT): bool {\n    var posBefore = this.pos;\n    var tokenBefore = this.token;\n    var tokenPosBefore = this.tokenPos;\n    var maxCompoundLength = i32.MAX_VALUE;\n    switch (token) {\n      case Token.GREATERTHAN: { // where parsing type arguments\n        maxCompoundLength = 1;\n        break;\n      }\n    }\n    this.token = this.unsafeNext(identifierHandling, maxCompoundLength);\n    if (this.token == token) {\n      this.nextToken = -1;\n      return true;\n    } else {\n      this.pos = posBefore;\n      this.token = tokenBefore;\n      this.tokenPos = tokenPosBefore;\n      return false;\n    }\n  }\n\n  mark(): State {\n    var state: State;\n    if (reusableState) {\n      state = reusableState;\n      reusableState = null;\n    } else {\n      state = new State();\n    }\n    state.pos = this.pos;\n    state.token = this.token;\n    state.tokenPos = this.tokenPos;\n    return state;\n  }\n\n  discard(state: State): void {\n    reusableState = state;\n  }\n\n  reset(state: State): void {\n    this.pos = state.pos;\n    this.token = state.token;\n    this.tokenPos = state.tokenPos;\n    this.nextToken = -1;\n  }\n\n  range(start: i32 = -1, end: i32 = -1): Range {\n    if (start < 0) {\n      start = this.tokenPos;\n      end = this.pos;\n    } else if (end < 0) {\n      end = start;\n    }\n    return new Range(this.source, start, end);\n  }\n\n  readIdentifier(): string {\n    var text = this.source.text;\n    var start = this.pos;\n    while (\n      ++this.pos < this.end &&\n      isIdentifierPart(text.charCodeAt(this.pos))\n    );\n    return text.substring(start, this.pos);\n  }\n\n  readString(): string {\n    var text = this.source.text;\n    var quote = text.charCodeAt(this.pos++);\n    var start = this.pos;\n    var result = \"\";\n    while (true) {\n      if (this.pos >= this.end) {\n        result += text.substring(start, this.pos);\n        this.error(\n          DiagnosticCode.Unterminated_string_literal,\n          this.range(start - 1, this.end)\n        );\n        break;\n      }\n      let c = text.charCodeAt(this.pos);\n      if (c == quote) {\n        result += text.substring(start, this.pos++);\n        break;\n      }\n      if (c == CharCode.BACKSLASH) {\n        result += text.substring(start, this.pos);\n        result += this.readEscapeSequence();\n        start = this.pos;\n        continue;\n      }\n      if (isLineBreak(c)) {\n        result += text.substring(start, this.pos);\n        this.error(\n          DiagnosticCode.Unterminated_string_literal,\n          this.range(start - 1, this.pos)\n        );\n        break;\n      }\n      ++this.pos;\n    }\n    return result;\n  }\n\n  readEscapeSequence(): string {\n    if (++this.pos >= this.end) {\n      this.error(\n        DiagnosticCode.Unexpected_end_of_text,\n        this.range(this.end)\n      );\n      return \"\";\n    }\n\n    var text = this.source.text;\n    var c = text.charCodeAt(this.pos++);\n    switch (c) {\n      case CharCode._0: return \"\\0\";\n      case CharCode.b: return \"\\b\";\n      case CharCode.t: return \"\\t\";\n      case CharCode.n: return \"\\n\";\n      case CharCode.v: return \"\\v\";\n      case CharCode.f: return \"\\f\";\n      case CharCode.r: return \"\\r\";\n      case CharCode.SINGLEQUOTE: return \"'\";\n      case CharCode.DOUBLEQUOTE: return \"\\\"\";\n      case CharCode.u: {\n        if (\n          this.pos < this.end &&\n          text.charCodeAt(this.pos) == CharCode.OPENBRACE\n        ) {\n          ++this.pos;\n          return this.readExtendedUnicodeEscape(); // \\u{DDDDDDDD}\n        }\n        return this.readUnicodeEscape(); // \\uDDDD\n      }\n      case CharCode.CARRIAGERETURN: {\n        if (\n          this.pos < this.end &&\n          text.charCodeAt(this.pos) == CharCode.LINEFEED\n        ) {\n          ++this.pos;\n        }\n        // fall through\n      }\n      case CharCode.LINEFEED:\n      case CharCode.LINESEPARATOR:\n      case CharCode.PARAGRAPHSEPARATOR: return \"\";\n      default: return String.fromCharCode(c);\n    }\n  }\n\n  readRegexpPattern(): string {\n    var text = this.source.text;\n    var start = this.pos;\n    var escaped = false;\n    while (true) {\n      if (this.pos >= this.end) {\n        this.error(\n          DiagnosticCode.Unterminated_regular_expression_literal,\n          this.range(start, this.end)\n        );\n        break;\n      }\n      if (text.charCodeAt(this.pos) == CharCode.BACKSLASH) {\n        ++this.pos;\n        escaped = true;\n        continue;\n      }\n      let c = text.charCodeAt(this.pos);\n      if (c == CharCode.SLASH && !escaped) break;\n      if (isLineBreak(c)) {\n        this.error(\n          DiagnosticCode.Unterminated_regular_expression_literal,\n          this.range(start, this.pos)\n        );\n        break;\n      }\n      ++this.pos;\n      escaped = false;\n    }\n    return text.substring(start, this.pos);\n  }\n\n  readRegexpFlags(): string {\n    var text = this.source.text;\n    var start = this.pos;\n    var flags = 0;\n    while (this.pos < this.end) {\n      let c: i32 = text.charCodeAt(this.pos);\n      if (!isIdentifierPart(c)) break;\n      ++this.pos;\n\n      // make sure each supported flag is unique\n      switch (c) {\n        case CharCode.g: {\n          flags |= flags & 1 ? -1 : 1;\n          break;\n        }\n        case CharCode.i: {\n          flags |= flags & 2 ? -1 : 2;\n          break;\n        }\n        case CharCode.m: {\n          flags |= flags & 4 ? -1 : 4;\n          break;\n        }\n        default: {\n          flags = -1;\n          break;\n        }\n      }\n    }\n    if (flags == -1) {\n      this.error(\n        DiagnosticCode.Invalid_regular_expression_flags,\n        this.range(start, this.pos)\n      );\n    }\n    return text.substring(start, this.pos);\n  }\n\n  testInteger(): bool {\n    var text = this.source.text;\n    if (text.charCodeAt(this.pos) == CharCode._0 && this.pos + 1 < this.end) {\n      switch (text.charCodeAt(this.pos + 2)) {\n        case CharCode.X:\n        case CharCode.x:\n        case CharCode.B:\n        case CharCode.b:\n        case CharCode.O:\n        case CharCode.o: return true;\n      }\n    }\n    var pos = this.pos;\n    while (pos < this.end) {\n      let c = text.charCodeAt(pos);\n      if (c == CharCode.DOT || c == CharCode.E || c == CharCode.e) {\n        return false;\n      }\n      if ((c < CharCode._0 || c > CharCode._9) && c != CharCode._) break;\n      // does not validate separator placement (this is done in readXYInteger)\n      pos++;\n    }\n    return true;\n  }\n\n  readInteger(): I64 {\n    var text = this.source.text;\n    if (text.charCodeAt(this.pos) == CharCode._0 && this.pos + 2 < this.end) {\n      switch (text.charCodeAt(this.pos + 1)) {\n        case CharCode.X:\n        case CharCode.x: {\n          this.pos += 2;\n          return this.readHexInteger();\n        }\n        case CharCode.B:\n        case CharCode.b: {\n          this.pos += 2;\n          return this.readBinaryInteger();\n        }\n        case CharCode.O:\n        case CharCode.o: {\n          this.pos += 2;\n          return this.readOctalInteger();\n        }\n      }\n      if (isOctalDigit(text.charCodeAt(this.pos + 1))) {\n        let start = this.pos;\n        ++this.pos;\n        let value = this.readOctalInteger();\n        this.error(\n          DiagnosticCode.Octal_literals_are_not_allowed_in_strict_mode,\n          this.range(start, this.pos)\n        );\n        return value;\n      }\n    }\n    return this.readDecimalInteger();\n  }\n\n  readHexInteger(): I64 {\n    var text = this.source.text;\n    var start = this.pos;\n    var value = i64_new(0, 0);\n    var i64_16 = i64_new(16, 0);\n    var sepEnd = start;\n    while (this.pos < this.end) {\n      let pos = this.pos;\n      let c = text.charCodeAt(pos);\n      if (c >= CharCode._0 && c <= CharCode._9) {\n        // value = value * 16 + c - CharCode._0;\n        value = i64_add(\n          i64_mul(value, i64_16),\n          i64_new(c - CharCode._0, 0)\n        );\n       } else if (c >= CharCode.A && c <= CharCode.F) {\n        // value = value * 16 + 10 + c - CharCode.A;\n        value = i64_add(\n          i64_mul(value, i64_16),\n          i64_new(10 + c - CharCode.A, 0)\n        );\n      } else if (c >= CharCode.a && c <= CharCode.f) {\n        // value = value * 16 + 10 + c - CharCode.a;\n        value = i64_add(\n          i64_mul(value, i64_16),\n          i64_new(10 + c - CharCode.a, 0)\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      this.pos = pos + 1;\n    }\n    if (this.pos == start) {\n      this.error(\n        DiagnosticCode.Hexadecimal_digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == this.pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    return value;\n  }\n\n  readDecimalInteger(): I64 {\n    var text = this.source.text;\n    var start = this.pos;\n    var value = i64_new(0, 0);\n    var i64_10 = i64_new(10, 0);\n    var sepEnd = start;\n    while (this.pos < this.end) {\n      let pos = this.pos;\n      let c = text.charCodeAt(pos);\n      if (c >= CharCode._0 && c <= CharCode._9) {\n        // value = value * 10 + c - CharCode._0;\n        value = i64_add(\n          i64_mul(value, i64_10),\n          i64_new(c - CharCode._0, 0)\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      this.pos = pos + 1;\n    }\n    if (this.pos == start) {\n      this.error(\n        DiagnosticCode.Digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == this.pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    return value;\n  }\n\n  readOctalInteger(): I64 {\n    var text = this.source.text;\n    var start = this.pos;\n    var value = i64_new(0, 0);\n    var i64_8 = i64_new(8, 0);\n    var sepEnd = start;\n    while (this.pos < this.end) {\n      let pos = this.pos;\n      let c = text.charCodeAt(pos);\n      if (c >= CharCode._0 && c <= CharCode._7) {\n        // value = value * 8 + c - CharCode._0;\n        value = i64_add(\n          i64_mul(value, i64_8),\n          i64_new(c - CharCode._0, 0)\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      ++this.pos;\n    }\n    if (this.pos == start) {\n      this.error(\n        DiagnosticCode.Octal_digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == this.pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    return value;\n  }\n\n  readBinaryInteger(): I64 {\n    var text = this.source.text;\n    var start = this.pos;\n    var value = i64_new(0, 0);\n    var i64_2 = i64_new(2, 0);\n    var i64_1 = i64_new(1, 0);\n    var sepEnd = start;\n    while (this.pos < this.end) {\n      let pos = this.pos;\n      let c = text.charCodeAt(pos);\n      if (c == CharCode._0) {\n        // value = value * 2;\n        value = i64_mul(\n          value,\n          i64_2\n        );\n      } else if (c == CharCode._1) {\n        // value = value * 2 + 1;\n        value = i64_add(\n          i64_mul(value, i64_2),\n          i64_1\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      this.pos = pos + 1;\n    }\n    if (this.pos == start) {\n      this.error(\n        DiagnosticCode.Binary_digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == this.pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    return value;\n  }\n\n  readFloat(): f64 {\n    // var text = this.source.text;\n    // if (text.charCodeAt(this.pos) == CharCode._0 && this.pos + 2 < this.end) {\n    //   switch (text.charCodeAt(this.pos + 1)) {\n    //     case CharCode.X:\n    //     case CharCode.x: {\n    //       this.pos += 2;\n    //       return this.readHexFloat();\n    //     }\n    //   }\n    // }\n    return this.readDecimalFloat();\n  }\n\n  readDecimalFloat(): f64 {\n    // TODO: numeric separators (parseFloat can't handle these)\n    var start = this.pos;\n    var text = this.source.text;\n    while (this.pos < this.end && isDecimalDigit(text.charCodeAt(this.pos))) {\n      ++this.pos;\n    }\n    if (this.pos < this.end && text.charCodeAt(this.pos) == CharCode.DOT) {\n      ++this.pos;\n      while (this.pos < this.end && isDecimalDigit(text.charCodeAt(this.pos))) {\n        ++this.pos;\n      }\n    }\n    if (this.pos < this.end) {\n      let c = text.charCodeAt(this.pos);\n      if (c == CharCode.E || c == CharCode.e) {\n        if (\n          ++this.pos < this.end && (\n            text.charCodeAt(this.pos) == CharCode.MINUS ||\n            text.charCodeAt(this.pos) == CharCode.PLUS\n          ) &&\n          isDecimalDigit(text.charCodeAt(this.pos + 1))\n        ) {\n          ++this.pos;\n        }\n        while (this.pos < this.end && isDecimalDigit(text.charCodeAt(this.pos))) {\n          ++this.pos;\n        }\n      }\n    }\n    return parseFloat(text.substring(start, this.pos));\n  }\n\n  readHexFloat(): f64 {\n    throw new Error(\"not implemented\"); // TBD\n  }\n\n  readUnicodeEscape(): string {\n    var remain = 4;\n    var value = 0;\n    var text = this.source.text;\n    while (this.pos < this.end) {\n      let c = text.charCodeAt(this.pos++);\n      if (c >= CharCode._0 && c <= CharCode._9) {\n        value = value * 16 + c - CharCode._0;\n      } else if (c >= CharCode.A && c <= CharCode.F) {\n        value = value * 16 + 10 + c - CharCode.A;\n      } else if (c >= CharCode.a && c <= CharCode.f) {\n        value = value * 16 + 10 + c - CharCode.a;\n      } else {\n        this.error(\n          DiagnosticCode.Hexadecimal_digit_expected,\n          this.range(this.pos - 1, this.pos)\n        );\n        return \"\";\n      }\n      if (--remain == 0) break;\n    }\n    if (remain) {\n      this.error(\n        DiagnosticCode.Unexpected_end_of_text,\n        this.range(this.pos)\n      );\n      return \"\";\n    }\n    return String.fromCharCode(value);\n  }\n\n  private readExtendedUnicodeEscape(): string {\n    var start = this.pos;\n    var value = this.readHexInteger();\n    var value32 = i64_low(value);\n    var invalid = false;\n\n    assert(!i64_high(value));\n    if (value32 > 0x10FFFF) {\n      this.error(\n        DiagnosticCode.An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive,\n        this.range(start, this.pos)\n      );\n      invalid = true;\n    }\n\n    var text = this.source.text;\n    if (this.pos >= this.end) {\n      this.error(\n        DiagnosticCode.Unexpected_end_of_text,\n        this.range(start, this.end)\n      );\n      invalid = true;\n    } else if (text.charCodeAt(this.pos) == CharCode.CLOSEBRACE) {\n      ++this.pos;\n    } else {\n      this.error(\n        DiagnosticCode.Unterminated_Unicode_escape_sequence,\n        this.range(start, this.pos)\n      );\n      invalid = true;\n    }\n\n    if (invalid) return \"\";\n    return value32 < 65536\n      ? String.fromCharCode(value32)\n      : String.fromCharCode(\n        (((value32 - 65536) / 1024 | 0) + 0xD800) as i32,\n        ( (value32 - 65536) % 1024      + 0xDC00) as i32\n      );\n  }\n\n  finish(): void {\n  }\n}\n\n/** Tokenizer state as returned by {@link Tokenizer#mark} and consumed by {@link Tokenizer#reset}. */\nexport class State {\n  /** Current position. */\n  pos: i32;\n  /** Current token. */\n  token: Token;\n  /** Current token's position. */\n  tokenPos: i32;\n}\n\n// Reusable state object to reduce allocations\nvar reusableState: State | null = null;\n","/**\n * The AssemblyScript compiler.\n * @module compiler\n *//***/\n\nimport {\n  compileCall as compileBuiltinCall,\n  compileAllocate,\n  compileAbort,\n  compileIterateRoots,\n  ensureGCHook\n} from \"./builtins\";\n\nimport {\n  DiagnosticCode,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  Module,\n  MemorySegment,\n  ExpressionRef,\n  UnaryOp,\n  BinaryOp,\n  NativeType,\n  FunctionRef,\n  ExpressionId,\n  FunctionTypeRef,\n  GlobalRef,\n  getExpressionId,\n  getExpressionType,\n  getConstValueI32,\n  getConstValueI64Low,\n  getConstValueI64High,\n  getConstValueF32,\n  getConstValueF64,\n  getGetLocalIndex,\n  getBlockChildCount,\n  getBlockChild,\n  getBlockName,\n  needsExplicitUnreachable\n} from \"./module\";\n\nimport {\n  CommonFlags,\n  PATH_DELIMITER,\n  INNER_DELIMITER,\n  INSTANCE_DELIMITER,\n  STATIC_DELIMITER,\n  GETTER_PREFIX,\n  SETTER_PREFIX\n} from \"./common\";\n\nimport {\n  Program,\n  ClassPrototype,\n  Class,\n  Element,\n  ElementKind,\n  Enum,\n  Field,\n  FunctionPrototype,\n  Function,\n  FunctionTarget,\n  Global,\n  Local,\n  Namespace,\n  EnumValue,\n  Property,\n  VariableLikeElement,\n  FlowFlags,\n  ConstantValueKind,\n  Flow,\n  OperatorKind,\n  DecoratorFlags\n} from \"./program\";\n\nimport {\n  Resolver, ReportMode\n} from \"./resolver\";\n\nimport {\n  Token,\n  operatorTokenToString\n} from \"./tokenizer\";\n\nimport {\n  Node,\n  NodeKind,\n  TypeNode,\n  Source,\n  Range,\n  DecoratorKind,\n\n  Statement,\n  BlockStatement,\n  BreakStatement,\n  ClassDeclaration,\n  ContinueStatement,\n  DeclarationStatement,\n  DoStatement,\n  EmptyStatement,\n  EnumDeclaration,\n  ExportStatement,\n  ExpressionStatement,\n  FunctionDeclaration,\n  ForStatement,\n  IfStatement,\n  ImportStatement,\n  InstanceOfExpression,\n  InterfaceDeclaration,\n  NamespaceDeclaration,\n  ReturnStatement,\n  SwitchStatement,\n  ThrowStatement,\n  TryStatement,\n  VariableDeclaration,\n  VariableStatement,\n  VoidStatement,\n  WhileStatement,\n\n  Expression,\n  AssertionExpression,\n  BinaryExpression,\n  CallExpression,\n  CommaExpression,\n  ElementAccessExpression,\n  FloatLiteralExpression,\n  FunctionExpression,\n  IdentifierExpression,\n  IntegerLiteralExpression,\n  LiteralExpression,\n  LiteralKind,\n  NewExpression,\n  ObjectLiteralExpression,\n  ParenthesizedExpression,\n  PropertyAccessExpression,\n  TernaryExpression,\n  ArrayLiteralExpression,\n  StringLiteralExpression,\n  UnaryPostfixExpression,\n  UnaryPrefixExpression,\n  FieldDeclaration,\n\n  nodeIsConstantValue,\n  isLastStatement,\n  findDecorator\n} from \"./ast\";\n\nimport {\n  Type,\n  TypeKind,\n  TypeFlags,\n  Signature,\n\n  typesToNativeTypes\n} from \"./types\";\n\nimport {\n  writeI8,\n  writeI16,\n  writeI32,\n  writeI64,\n  writeF32,\n  writeF64\n} from \"./util\";\n\n/** Compilation target. */\nexport enum Target {\n  /** WebAssembly with 32-bit pointers. */\n  WASM32,\n  /** WebAssembly with 64-bit pointers. Experimental and not supported by any runtime yet. */\n  WASM64\n}\n\n/** Compiler options. */\nexport class Options {\n\n  /** WebAssembly target. Defaults to {@link Target.WASM32}. */\n  target: Target = Target.WASM32;\n  /** If true, compiles everything instead of just reachable code. */\n  noTreeShaking: bool = false;\n  /** If true, replaces assertions with nops. */\n  noAssert: bool = false;\n  /** If true, imports the memory provided by the embedder. */\n  importMemory: bool = false;\n  /** If true, imports the function table provided by the embedder. */\n  importTable: bool = false;\n  /** If true, generates information necessary for source maps. */\n  sourceMap: bool = false;\n  /** Static memory start offset. */\n  memoryBase: i32 = 0;\n  /** Global aliases. */\n  globalAliases: Map<string,string> | null = null;\n  /** Additional features to activate. */\n  features: Feature = Feature.NONE;\n\n  /** Hinted optimize level. Not applied by the compiler itself. */\n  optimizeLevelHint: i32 = 0;\n  /** Hinted shrink level. Not applied by the compiler itself. */\n  shrinkLevelHint: i32 = 0;\n\n  /** Tests if the target is WASM64 or, otherwise, WASM32. */\n  get isWasm64(): bool {\n    return this.target == Target.WASM64;\n  }\n\n  /** Gets the unsigned size type matching the target. */\n  get usizeType(): Type {\n    return this.target == Target.WASM64 ? Type.usize64 : Type.usize32;\n  }\n\n  /** Gets the signed size type matching the target. */\n  get isizeType(): Type {\n    return this.target == Target.WASM64 ? Type.isize64 : Type.isize32;\n  }\n\n  /** Gets the native size type matching the target. */\n  get nativeSizeType(): NativeType {\n    return this.target == Target.WASM64 ? NativeType.I64 : NativeType.I32;\n  }\n\n  /** Tests if a specific feature is activated. */\n  hasFeature(feature: Feature): bool {\n    return (this.features & feature) != 0;\n  }\n}\n\n/** Indicates specific features to activate. */\nexport const enum Feature {\n  /** No additional features. */\n  NONE = 0,\n  /** Sign extension operations. */\n  SIGN_EXTENSION = 1 << 0, // see: https://github.com/WebAssembly/sign-extension-ops\n  /** Mutable global imports and exports. */\n  MUTABLE_GLOBAL = 1 << 1  // see: https://github.com/WebAssembly/mutable-global\n}\n\n/** Indicates the desired kind of a conversion. */\nexport const enum ConversionKind {\n  /** No conversion. */\n  NONE,\n  /** Implicit conversion. */\n  IMPLICIT,\n  /** Explicit conversion. */\n  EXPLICIT\n}\n\n/** Indicates the desired wrap mode of a conversion. */\nexport const enum WrapMode {\n  /** No wrapping. */\n  NONE,\n  /** Wrap small integer values. */\n  WRAP\n}\n\n/** Compiler interface. */\nexport class Compiler extends DiagnosticEmitter {\n\n  /** Program reference. */\n  program: Program;\n  /** Resolver reference. */\n  resolver: Resolver;\n  /** Provided options. */\n  options: Options;\n  /** Module instance being compiled. */\n  module: Module;\n  /** Current function in compilation. */\n  currentFunction: Function;\n  /** Current outer function in compilation, if compiling a function expression. */\n  currentOuterFunction: Function | null = null;\n  /** Current inline functions stack. */\n  currentInlineFunctions: Function[] = [];\n  /** Current enum in compilation. */\n  currentEnum: Enum | null = null;\n  /** Current type in compilation. */\n  currentType: Type = Type.void;\n  /** Start function being compiled. */\n  startFunctionInstance: Function;\n  /** Start function statements. */\n  startFunctionBody: ExpressionRef[];\n  /** Counting memory offset. */\n  memoryOffset: I64;\n  /** Memory segments being compiled. */\n  memorySegments: MemorySegment[] = [];\n  /** Map of already compiled static string segments. */\n  stringSegments: Map<string,MemorySegment> = new Map();\n  /** Function table being compiled. */\n  functionTable: string[] = [ \"null\" ];\n  /** Argument count helper global. */\n  argcVar: GlobalRef = 0;\n  /** Argument count helper setter. */\n  argcSet: FunctionRef = 0;\n  /** Indicates whether the iterateRoots function must be generated. */\n  needsIterateRoots: bool = false;\n\n  /** Compiles a {@link Program} to a {@link Module} using the specified options. */\n  static compile(program: Program, options: Options | null = null): Module {\n    return new Compiler(program, options).compile();\n  }\n\n  /** Constructs a new compiler for a {@link Program} using the specified options. */\n  constructor(program: Program, options: Options | null = null) {\n    super(program.diagnostics);\n    this.program = program;\n    this.resolver = program.resolver;\n    if (!options) options = new Options();\n    this.options = options;\n    this.memoryOffset = i64_new(\n      // leave space for `null`. also functions as a sentinel for erroneous stores at offset 0.\n      // note that Binaryen's asm.js output utilizes the first 8 bytes for reinterpretations (#1547)\n      max(options.memoryBase, 8)\n    );\n    this.module = Module.create();\n  }\n\n  /** Performs compilation of the underlying {@link Program} to a {@link Module}. */\n  compile(): Module {\n    var options = this.options;\n    var module = this.module;\n    var program = this.program;\n\n    // initialize lookup maps, built-ins, imports, exports, etc.\n    program.initialize(options);\n\n    // set up the start function\n    var startFunctionInstance = new Function(program.startFunction, \"start\", new Signature([], Type.void));\n    this.startFunctionInstance = startFunctionInstance;\n    var startFunctionBody = new Array<ExpressionRef>();\n    this.startFunctionBody = startFunctionBody;\n    this.currentFunction = startFunctionInstance;\n\n    // add a mutable heap base dummy\n    if (options.isWasm64) {\n      module.addGlobal(\n        \"HEAP_BASE\",\n        NativeType.I64,\n        true,\n        module.createI64(0, 0)\n      );\n    } else {\n      module.addGlobal(\n        \"HEAP_BASE\",\n        NativeType.I32,\n        false,\n        module.createI32(0)\n      );\n    }\n\n    // compile entry file(s) while traversing reachable elements\n    var sources = program.sources;\n    for (let i = 0, k = sources.length; i < k; ++i) {\n      if (sources[i].isEntry) this.compileSource(sources[i]);\n    }\n\n    // compile the start function if not empty or called by main\n    if (startFunctionBody.length || program.mainFunction !== null) {\n      let signature = startFunctionInstance.signature;\n      let funcRef = module.addFunction(\n        startFunctionInstance.internalName,\n        this.ensureFunctionType(\n          signature.parameterTypes,\n          signature.returnType,\n          signature.thisType\n        ),\n        typesToNativeTypes(startFunctionInstance.additionalLocals),\n        module.createBlock(null, startFunctionBody)\n      );\n      startFunctionInstance.finalize(module, funcRef);\n      if (!program.mainFunction) module.setStart(funcRef);\n    }\n\n    // update the heap base pointer\n    var memoryOffset = this.memoryOffset;\n    memoryOffset = i64_align(memoryOffset, options.usizeType.byteSize);\n    this.memoryOffset = memoryOffset;\n    module.removeGlobal(\"HEAP_BASE\");\n    if (options.isWasm64) {\n      module.addGlobal(\n        \"HEAP_BASE\",\n        NativeType.I64,\n        false,\n        module.createI64(i64_low(memoryOffset), i64_high(memoryOffset))\n      );\n    } else {\n      module.addGlobal(\n        \"HEAP_BASE\",\n        NativeType.I32,\n        false,\n        module.createI32(i64_low(memoryOffset))\n      );\n    }\n\n    // determine initial page size\n    var numPages = this.memorySegments.length\n      ? i64_low(i64_shr_u(i64_align(memoryOffset, 0x10000), i64_new(16, 0)))\n      : 0;\n    module.setMemory(\n      numPages,\n      this.options.isWasm64\n        ? Module.MAX_MEMORY_WASM64\n        : Module.MAX_MEMORY_WASM32,\n      this.memorySegments,\n      options.target,\n      \"memory\"\n    );\n\n    // import memory if requested (default memory is named '0' by Binaryen)\n    if (options.importMemory) module.addMemoryImport(\"0\", \"env\", \"memory\");\n\n    // set up function table\n    var functionTable = this.functionTable;\n    module.setFunctionTable(functionTable.length, 0xffffffff, functionTable);\n    module.addTableExport(\"0\", \"table\");\n    module.addFunction(\"null\", this.ensureFunctionType(null, Type.void), null, module.createBlock(null, []));\n\n    // import table if requested (default table is named '0' by Binaryen)\n    if (options.importTable) module.addTableImport(\"0\", \"env\", \"table\");\n\n    // set up module exports\n    for (let [name, moduleExport] of program.moduleLevelExports) {\n      this.makeModuleExport(name, moduleExport.element);\n    }\n\n    // set up gc\n    if (this.needsIterateRoots) compileIterateRoots(this);\n\n    return module;\n  }\n\n  /** Applies the respective module export(s) for the specified element. */\n  private makeModuleExport(name: string, element: Element, prefix: string = \"\"): void {\n\n    // traverse members\n    var members = element.members;\n    if (members) {\n      let subPrefix = prefix + name + (element.kind == ElementKind.CLASS\n        ? INSTANCE_DELIMITER\n        : STATIC_DELIMITER\n      );\n      if (element.kind == ElementKind.NAMESPACE) {\n        for (let member of members.values()) {\n          if (!member.is(CommonFlags.EXPORT)) continue;\n          this.makeModuleExport(member.simpleName, member, subPrefix);\n        }\n      } else {\n        for (let member of members.values()) {\n          if (member.is(CommonFlags.PRIVATE)) continue;\n          this.makeModuleExport(member.simpleName, member, subPrefix);\n        }\n      }\n    }\n\n    switch (element.kind) {\n\n      // export global\n      case ElementKind.GLOBAL: {\n        let isConst = element.is(CommonFlags.CONST) || element.is(CommonFlags.STATIC | CommonFlags.READONLY);\n        if (!isConst && !this.options.hasFeature(Feature.MUTABLE_GLOBAL)) {\n          let declaration = (<Global>element).declaration;\n          if (declaration) {\n            this.error(\n              DiagnosticCode.Cannot_export_a_mutable_global,\n              declaration.name.range\n            );\n          }\n        } else {\n          this.module.addGlobalExport(element.internalName, prefix + name);\n        }\n        break;\n      }\n      case ElementKind.ENUMVALUE: {\n        if (!assert(element.parent).is(CommonFlags.CONST) && !this.options.hasFeature(Feature.MUTABLE_GLOBAL)) {\n          let declaration = (<EnumValue>element).declaration;\n          if (declaration) {\n            this.error(\n              DiagnosticCode.Cannot_export_a_mutable_global,\n              declaration.name.range\n            );\n          }\n        } else {\n          this.module.addGlobalExport(element.internalName, prefix + name);\n        }\n        break;\n      }\n\n      // export function\n      case ElementKind.FUNCTION: {\n        let instance = <Function>element;\n        let signature = instance.signature;\n        if (signature.requiredParameters < signature.parameterTypes.length) {\n          // utilize trampoline to fill in omitted arguments\n          instance = this.ensureTrampoline(instance);\n          this.ensureArgcSet();\n        }\n        if (instance.is(CommonFlags.COMPILED)) this.module.addFunctionExport(instance.internalName, prefix + name);\n        break;\n      }\n\n      // export getter and setter\n      case ElementKind.PROPERTY: {\n        let getter = assert((<Property>element).getterPrototype);\n        this.makeModuleExport(GETTER_PREFIX + name, getter, prefix);\n        let setter = (<Property>element).setterPrototype;\n        if (setter) this.makeModuleExport(SETTER_PREFIX + name, setter, prefix);\n        break;\n      }\n\n      // export a getter and a setter\n      case ElementKind.FIELD: {\n        let module = this.module;\n        let type = (<Field>element).type;\n        let nativeType = type.toNativeType();\n        let offset = (<Field>element).memoryOffset;\n        let usizeType = this.options.usizeType;\n        let nativeSizeType = this.options.nativeSizeType;\n\n        // make a getter\n        let getterName = prefix + GETTER_PREFIX + name;\n        module.addFunction(\n          getterName,\n          this.ensureFunctionType(null, type, usizeType),\n          null,\n          module.createLoad(\n            type.byteSize,\n            type.is(TypeFlags.SIGNED),\n            module.createGetLocal(0, nativeSizeType),\n            nativeType,\n            offset\n          )\n        );\n        module.addFunctionExport(getterName, getterName);\n\n        // make a setter\n        if (!element.is(CommonFlags.READONLY)) {\n          let setterName = prefix + SETTER_PREFIX + name;\n          module.addFunction(\n            setterName,\n            this.ensureFunctionType([ type ], Type.void, usizeType),\n            null,\n            module.createStore(\n              type.byteSize,\n              module.createGetLocal(0, nativeSizeType),\n              module.createGetLocal(1, nativeType),\n              nativeType,\n              offset\n            )\n          );\n          module.addFunctionExport(setterName, setterName);\n        }\n        break;\n      }\n\n      // skip prototype and export instances\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        for (let instance of (<FunctionPrototype>element).instances.values()) {\n          let instanceName = name;\n          if (instance.is(CommonFlags.GENERIC)) {\n            let fullName = instance.internalName;\n            instanceName += fullName.substring(fullName.lastIndexOf(\"<\"));\n          }\n          this.makeModuleExport(instanceName, instance, prefix);\n        }\n        break;\n      }\n      case ElementKind.CLASS_PROTOTYPE: {\n        for (let instance of (<ClassPrototype>element).instances.values()) {\n          let instanceName = name;\n          if (instance.is(CommonFlags.GENERIC)) {\n            let fullName = instance.internalName;\n            instanceName += fullName.substring(fullName.lastIndexOf(\"<\"));\n          }\n          let ctor = instance.constructorInstance;\n          if (ctor) this.makeModuleExport(instanceName + INSTANCE_DELIMITER + ctor.simpleName, ctor, prefix);\n          this.makeModuleExport(instanceName, instance, prefix);\n        }\n        break;\n      }\n\n      // all possible members already handled above\n      case ElementKind.ENUM:\n      case ElementKind.CLASS:\n      case ElementKind.NAMESPACE: break;\n\n      default: assert(false);\n    }\n  }\n\n  // sources\n\n  /** Compiles a source by looking it up by path first. */\n  compileSourceByPath(normalizedPathWithoutExtension: string, reportNode: Node): void {\n    var source = this.program.lookupSourceByPath(normalizedPathWithoutExtension);\n    if (source) this.compileSource(source);\n    else {\n      this.error(\n        DiagnosticCode.File_0_not_found,\n        reportNode.range, normalizedPathWithoutExtension\n      );\n    }\n  }\n\n  /** Compiles a source. */\n  compileSource(source: Source): void {\n    if (source.is(CommonFlags.COMPILED)) return;\n    source.set(CommonFlags.COMPILED);\n\n    // compile top-level statements\n    var noTreeShaking = this.options.noTreeShaking;\n    var isEntry = source.isEntry;\n    var startFunctionInstance = this.startFunctionInstance;\n    var startFunctionBody = this.startFunctionBody;\n    var statements = source.statements;\n    for (let i = 0, k = statements.length; i < k; ++i) {\n      let statement = statements[i];\n      switch (statement.kind) {\n        case NodeKind.CLASSDECLARATION: {\n          if (\n            (noTreeShaking || (isEntry && statement.is(CommonFlags.EXPORT))) &&\n            !(<ClassDeclaration>statement).isGeneric\n          ) {\n            this.compileClassDeclaration(<ClassDeclaration>statement, [], null);\n          }\n          break;\n        }\n        case NodeKind.INTERFACEDECLARATION: break;\n        case NodeKind.ENUMDECLARATION: {\n          if (noTreeShaking || (isEntry && statement.is(CommonFlags.EXPORT))) {\n            this.compileEnumDeclaration(<EnumDeclaration>statement);\n          }\n          break;\n        }\n        case NodeKind.FUNCTIONDECLARATION: {\n          if (\n            (noTreeShaking || (isEntry && statement.is(CommonFlags.EXPORT))) &&\n            !(<FunctionDeclaration>statement).isGeneric\n          ) {\n            this.compileFunctionDeclaration(<FunctionDeclaration>statement, []);\n          }\n          break;\n        }\n        case NodeKind.IMPORT: {\n          this.compileSourceByPath(\n            (<ImportStatement>statement).normalizedPath,\n            (<ImportStatement>statement).path\n          );\n          break;\n        }\n        case NodeKind.NAMESPACEDECLARATION: {\n          if (noTreeShaking || (isEntry && statement.is(CommonFlags.EXPORT))) {\n            this.compileNamespaceDeclaration(<NamespaceDeclaration>statement);\n          }\n          break;\n        }\n        case NodeKind.VARIABLE: { // global, always compiled as initializers might have side effects\n          let variableInit = this.compileVariableStatement(<VariableStatement>statement);\n          if (variableInit) startFunctionBody.push(variableInit);\n          break;\n        }\n        case NodeKind.EXPORT: {\n          if ((<ExportStatement>statement).normalizedPath != null) {\n            this.compileSourceByPath(\n              <string>(<ExportStatement>statement).normalizedPath,\n              <StringLiteralExpression>(<ExportStatement>statement).path\n            );\n          }\n          if (noTreeShaking || isEntry) {\n            this.compileExportStatement(<ExportStatement>statement);\n          }\n          break;\n        }\n        default: { // otherwise a top-level statement that is part of the start function's body\n          let previousFunction = this.currentFunction;\n          this.currentFunction = startFunctionInstance;\n          startFunctionBody.push(this.compileStatement(statement));\n          this.currentFunction = previousFunction;\n          break;\n        }\n      }\n    }\n  }\n\n  // globals\n\n  compileGlobalDeclaration(declaration: VariableDeclaration): Global | null {\n    // look up the initialized program element\n    var element = assert(this.program.elementsLookup.get(declaration.fileLevelInternalName));\n    assert(element.kind == ElementKind.GLOBAL);\n    if (!this.compileGlobal(<Global>element)) return null; // reports\n    return <Global>element;\n  }\n\n  compileGlobal(global: Global): bool {\n    if (global.is(CommonFlags.COMPILED)) return true;\n    global.set(CommonFlags.COMPILED);\n\n    var module = this.module;\n    var declaration = global.declaration;\n    var initExpr: ExpressionRef = 0;\n\n    if (global.type == Type.void) { // type is void if not yet resolved or not annotated\n      if (declaration) {\n\n        // resolve now if annotated\n        if (declaration.type) {\n          let resolvedType = this.resolver.resolveType(declaration.type); // reports\n          if (!resolvedType) return false;\n          if (resolvedType == Type.void) {\n            this.error(\n              DiagnosticCode.Type_expected,\n              declaration.type.range\n            );\n            return false;\n          }\n          global.type = resolvedType;\n\n        // infer from initializer if not annotated\n        } else if (declaration.initializer) { // infer type using void/NONE for literal inference\n          initExpr = this.compileExpressionRetainType( // reports\n            declaration.initializer,\n            Type.void,\n            WrapMode.WRAP\n          );\n          if (this.currentType == Type.void) {\n            this.error(\n              DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n              declaration.initializer.range, this.currentType.toString(), \"<auto>\"\n            );\n            return false;\n          }\n          global.type = this.currentType;\n\n        // must either be annotated or have an initializer\n        } else {\n          this.error(\n            DiagnosticCode.Type_expected,\n            declaration.name.range.atEnd\n          );\n          return false;\n        }\n      } else {\n        assert(false); // must have a declaration if 'void' (and thus resolved later on)\n      }\n    }\n\n    // ambient builtins like 'HEAP_BASE' need to be resolved but are added explicitly\n    if (global.is(CommonFlags.AMBIENT) && global.hasDecorator(DecoratorFlags.BUILTIN)) return true;\n\n    var nativeType = global.type.toNativeType();\n    var isDeclaredConstant = global.is(CommonFlags.CONST) || global.is(CommonFlags.STATIC | CommonFlags.READONLY);\n\n    // handle imports\n    if (global.is(CommonFlags.AMBIENT)) {\n\n      // constant global\n      if (isDeclaredConstant || this.options.hasFeature(Feature.MUTABLE_GLOBAL)) {\n        global.set(CommonFlags.MODULE_IMPORT);\n        if (declaration) {\n          mangleImportName(global, declaration);\n        } else {\n          mangleImportName_moduleName = \"env\";\n          mangleImportName_elementName = global.simpleName;\n        }\n        module.addGlobalImport(\n          global.internalName,\n          mangleImportName_moduleName,\n          mangleImportName_elementName,\n          nativeType\n        );\n        global.set(CommonFlags.COMPILED);\n        return true;\n\n      // importing mutable globals is not supported in the MVP\n      } else {\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          assert(declaration).range\n        );\n      }\n      return false;\n    }\n\n    // the MVP does not yet support initializer expressions other than constant values (and constant\n    // get_globals), hence such initializations must be performed in the start function for now.\n    var initializeInStart = false;\n\n    // evaluate initializer if present\n    if (declaration !== null && declaration.initializer !== null) {\n      if (!initExpr) {\n        initExpr = this.compileExpression(\n          declaration.initializer,\n          global.type,\n          ConversionKind.IMPLICIT,\n          WrapMode.WRAP\n        );\n      }\n\n      if (getExpressionId(initExpr) != ExpressionId.Const) {\n        if (isDeclaredConstant) {\n          initExpr = module.precomputeExpression(initExpr);\n          if (getExpressionId(initExpr) != ExpressionId.Const) {\n            this.warning(\n              DiagnosticCode.Compiling_constant_with_non_constant_initializer_as_mutable,\n              declaration.range\n            );\n            initializeInStart = true;\n          }\n        } else {\n          initializeInStart = true;\n        }\n      }\n\n      // explicitly inline if annotated\n      if (global.hasDecorator(DecoratorFlags.INLINE)) {\n        if (!initializeInStart) { // reported above\n          assert(getExpressionId(initExpr) == ExpressionId.Const);\n          let exprType = getExpressionType(initExpr);\n          switch (exprType) {\n            case NativeType.I32: {\n              global.constantValueKind = ConstantValueKind.INTEGER;\n              global.constantIntegerValue = i64_new(getConstValueI32(initExpr), 0);\n              break;\n            }\n            case NativeType.I64: {\n              global.constantValueKind = ConstantValueKind.INTEGER;\n              global.constantIntegerValue = i64_new(\n                getConstValueI64Low(initExpr),\n                getConstValueI64High(initExpr)\n              );\n              break;\n            }\n            case NativeType.F32: {\n              global.constantValueKind = ConstantValueKind.FLOAT;\n              global.constantFloatValue = getConstValueF32(initExpr);\n              break;\n            }\n            case NativeType.F64: {\n              global.constantValueKind = ConstantValueKind.FLOAT;\n              global.constantFloatValue = getConstValueF64(initExpr);\n              break;\n            }\n            default: {\n              assert(false);\n              return false;\n            }\n          }\n          global.set(CommonFlags.INLINED); // inline the value from now on\n        }\n      }\n\n    // initialize to zero if there's no initializer\n    } else {\n      initExpr = global.type.toNativeZero(module);\n    }\n\n    var internalName = global.internalName;\n\n    if (initializeInStart) { // initialize to mutable zero and set the actual value in start\n      module.addGlobal(internalName, nativeType, true, global.type.toNativeZero(module));\n      this.startFunctionBody.push(module.createSetGlobal(internalName, initExpr));\n\n    } else { // compile normally\n      module.addGlobal(internalName, nativeType, !isDeclaredConstant, initExpr);\n    }\n    return true;\n  }\n\n  // enums\n\n  compileEnumDeclaration(declaration: EnumDeclaration): Enum | null {\n    var element = assert(this.program.elementsLookup.get(declaration.fileLevelInternalName));\n    assert(element.kind == ElementKind.ENUM);\n    if (!this.compileEnum(<Enum>element)) return null;\n    return <Enum>element;\n  }\n\n  compileEnum(element: Enum): bool {\n    if (element.is(CommonFlags.COMPILED)) return true;\n    element.set(CommonFlags.COMPILED);\n\n    var module = this.module;\n    this.currentEnum = element;\n    var previousValue: EnumValue | null = null;\n    var previousValueIsMut = false;\n\n    if (element.members) {\n      for (let member of element.members.values()) {\n        if (member.kind != ElementKind.ENUMVALUE) continue; // happens if an enum is also a namespace\n        let initInStart = false;\n        let val = <EnumValue>member;\n        let valueDeclaration = val.declaration;\n        val.set(CommonFlags.COMPILED);\n        let initExpr: ExpressionRef;\n        if (valueDeclaration.value) {\n          initExpr = this.compileExpression(\n            <Expression>valueDeclaration.value,\n            Type.i32,\n            ConversionKind.IMPLICIT,\n            WrapMode.NONE\n          );\n          if (getExpressionId(initExpr) != ExpressionId.Const) {\n            if (element.is(CommonFlags.CONST)) {\n              initExpr = module.precomputeExpression(initExpr);\n              if (getExpressionId(initExpr) != ExpressionId.Const) {\n                this.error(\n                  DiagnosticCode.In_const_enum_declarations_member_initializer_must_be_constant_expression,\n                  valueDeclaration.value.range\n                );\n                initInStart = true;\n              }\n            } else {\n              initInStart = true;\n            }\n          }\n        } else if (previousValue == null) {\n          initExpr = module.createI32(0);\n        } else {\n          if (previousValueIsMut) {\n            this.error(\n              DiagnosticCode.Enum_member_must_have_initializer,\n              valueDeclaration.range\n            );\n          }\n          initExpr = module.createBinary(BinaryOp.AddI32,\n            module.createGetGlobal(previousValue.internalName, NativeType.I32),\n            module.createI32(1)\n          );\n          initExpr = module.precomputeExpression(initExpr);\n          if (getExpressionId(initExpr) != ExpressionId.Const) {\n            if (element.is(CommonFlags.CONST)) {\n              this.error(\n                DiagnosticCode.In_const_enum_declarations_member_initializer_must_be_constant_expression,\n                valueDeclaration.range\n              );\n            }\n            initInStart = true;\n          }\n        }\n        if (initInStart) {\n          module.addGlobal(val.internalName, NativeType.I32, true, module.createI32(0));\n          this.startFunctionBody.push(module.createSetGlobal(val.internalName, initExpr));\n          previousValueIsMut = true;\n        } else {\n          module.addGlobal(val.internalName, NativeType.I32, !element.is(CommonFlags.CONST), initExpr);\n          previousValueIsMut = false;\n        }\n        previousValue = <EnumValue>val;\n      }\n    }\n    this.currentEnum = null;\n    return true;\n  }\n\n  // functions\n\n  /** Compiles a top-level function given its declaration. */\n  compileFunctionDeclaration(\n    declaration: FunctionDeclaration,\n    typeArguments: TypeNode[],\n    contextualTypeArguments: Map<string,Type> | null = null\n  ): Function | null {\n    var element = assert(this.program.elementsLookup.get(declaration.fileLevelInternalName));\n    assert(element.kind == ElementKind.FUNCTION_PROTOTYPE);\n    return this.compileFunctionUsingTypeArguments( // reports\n      <FunctionPrototype>element,\n      typeArguments,\n      contextualTypeArguments,\n      null, // no outer scope (is top level)\n      (<FunctionPrototype>element).declaration.name\n    );\n  }\n\n  /** Resolves the specified type arguments prior to compiling the resulting function instance. */\n  compileFunctionUsingTypeArguments(\n    prototype: FunctionPrototype,\n    typeArguments: TypeNode[],\n    contextualTypeArguments: Map<string,Type> | null,\n    outerScope: Flow | null,\n    reportNode: Node\n  ): Function | null {\n    var instance = this.resolver.resolveFunctionInclTypeArguments(\n      prototype,\n      typeArguments,\n      contextualTypeArguments,\n      reportNode\n    );\n    if (!instance) return null;\n    instance.outerScope = outerScope;\n    if (!this.compileFunction(instance)) return null; // reports\n    return instance;\n  }\n\n  /** Either reuses or creates the function type matching the specified signature. */\n  ensureFunctionType(\n    parameterTypes: Type[] | null,\n    returnType: Type,\n    thisType: Type | null = null\n  ): FunctionTypeRef {\n    var numParameters = parameterTypes ? parameterTypes.length : 0;\n    var paramTypes: NativeType[];\n    var index = 0;\n    if (thisType) {\n      paramTypes = new Array(1 + numParameters);\n      paramTypes[0] = thisType.toNativeType();\n      index = 1;\n    } else {\n      paramTypes = new Array(numParameters);\n    }\n    if (parameterTypes) {\n      for (let i = 0; i < numParameters; ++i, ++index) {\n        paramTypes[index] = parameterTypes[i].toNativeType();\n      }\n    }\n    var resultType = returnType.toNativeType();\n    var module = this.module;\n    var typeRef = module.getFunctionTypeBySignature(resultType, paramTypes);\n    if (!typeRef) {\n      let name = Signature.makeSignatureString(parameterTypes, returnType, thisType);\n      typeRef = module.addFunctionType(name, resultType, paramTypes);\n    }\n    return typeRef;\n  }\n\n  /** Compiles a readily resolved function instance. */\n  compileFunction(instance: Function): bool {\n    if (instance.is(CommonFlags.COMPILED)) return true;\n    assert(!(instance.is(CommonFlags.AMBIENT) && instance.hasDecorator(DecoratorFlags.BUILTIN)));\n    instance.set(CommonFlags.COMPILED);\n\n    // check that modifiers are matching\n    var declaration = instance.prototype.declaration;\n    var body = declaration.body;\n    if (body) {\n      if (instance.is(CommonFlags.AMBIENT)) {\n        this.error(\n          DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\n          declaration.name.range\n        );\n      }\n    } else {\n      if (!instance.is(CommonFlags.AMBIENT)) {\n        this.error(\n          DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n          declaration.name.range\n        );\n      }\n    }\n\n    var ref: FunctionRef;\n    var signature = instance.signature;\n    var typeRef = this.ensureFunctionType(signature.parameterTypes, signature.returnType, signature.thisType);\n    var module = this.module;\n    if (body) {\n      let isConstructor = instance.is(CommonFlags.CONSTRUCTOR);\n      let returnType = instance.signature.returnType;\n\n      // compile body\n      let previousFunction = this.currentFunction;\n      this.currentFunction = instance;\n      let flow = instance.flow;\n      let stmt: ExpressionRef;\n      if (body.kind == NodeKind.EXPRESSION) { // () => expression\n        assert(!instance.isAny(CommonFlags.CONSTRUCTOR | CommonFlags.GET | CommonFlags.SET | CommonFlags.MAIN));\n        assert(instance.is(CommonFlags.ARROW));\n        stmt = this.compileExpression(\n          (<ExpressionStatement>body).expression,\n          returnType,\n          ConversionKind.IMPLICIT,\n          WrapMode.NONE\n        );\n        flow.set(FlowFlags.RETURNS);\n        if (!flow.canOverflow(stmt, returnType)) flow.set(FlowFlags.RETURNS_WRAPPED);\n        flow.finalize();\n      } else {\n        assert(body.kind == NodeKind.BLOCK);\n        let stmts = this.compileStatements((<BlockStatement>body).statements);\n        if (instance.is(CommonFlags.MAIN)) {\n          module.addGlobal(\"~started\", NativeType.I32, true, module.createI32(0));\n          stmts.unshift(\n            module.createIf(\n              module.createUnary(\n                UnaryOp.EqzI32,\n                module.createGetGlobal(\"~started\", NativeType.I32)\n              ),\n              module.createBlock(null, [\n                module.createCall(\"start\", null, NativeType.None),\n                module.createSetGlobal(\"~started\", module.createI32(1))\n              ])\n            )\n          );\n        }\n        flow.finalize();\n        if (isConstructor) {\n          let nativeSizeType = this.options.nativeSizeType;\n          assert(instance.is(CommonFlags.INSTANCE));\n\n          // implicitly return `this` if the constructor doesn't always return on its own\n          if (!flow.is(FlowFlags.RETURNS)) {\n\n            // if all branches are guaranteed to allocate, skip the final conditional allocation\n            if (flow.is(FlowFlags.ALLOCATES)) {\n              stmts.push(module.createGetLocal(0, nativeSizeType));\n\n            // if not all branches are guaranteed to allocate, also append a conditional allocation\n            } else {\n              let parent = assert(instance.parent);\n              assert(parent.kind == ElementKind.CLASS);\n              stmts.push(module.createTeeLocal(0,\n                this.makeConditionalAllocate(<Class>parent, declaration.name)\n              ));\n            }\n          }\n\n        // make sure all branches return\n        } else if (returnType != Type.void && !flow.is(FlowFlags.RETURNS)) {\n          this.error(\n            DiagnosticCode.A_function_whose_declared_type_is_not_void_must_return_a_value,\n            declaration.signature.returnType.range\n          );\n        }\n        stmt = !stmts.length\n          ? module.createNop()\n          : stmts.length == 1\n            ? stmts[0]\n            : module.createBlock(null, stmts, returnType.toNativeType());\n      }\n      this.currentFunction = previousFunction;\n\n      // create the function\n      ref = module.addFunction(\n        instance.internalName,\n        typeRef,\n        typesToNativeTypes(instance.additionalLocals),\n        stmt\n      );\n\n      // concrete functions cannot have an annotated external name\n      if (instance.hasDecorator(DecoratorFlags.EXTERNAL)) {\n        let decorator = assert(findDecorator(DecoratorKind.EXTERNAL, declaration.decorators));\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          decorator.range\n        );\n      }\n\n    } else {\n      instance.set(CommonFlags.MODULE_IMPORT);\n      mangleImportName(instance, declaration); // TODO: check for duplicates\n\n      // create the function import\n      ref = module.addFunctionImport(\n        instance.internalName,\n        mangleImportName_moduleName,\n        mangleImportName_elementName,\n        typeRef\n      );\n    }\n\n    instance.finalize(module, ref);\n    return true;\n  }\n\n  // namespaces\n\n  compileNamespaceDeclaration(declaration: NamespaceDeclaration): void {\n    var members = declaration.members;\n    var noTreeShaking = this.options.noTreeShaking;\n    for (let i = 0, k = members.length; i < k; ++i) {\n      let member = members[i];\n      switch (member.kind) {\n        case NodeKind.CLASSDECLARATION: {\n          if (\n            (noTreeShaking || member.is(CommonFlags.EXPORT)) &&\n            !(<ClassDeclaration>member).isGeneric\n          ) {\n            this.compileClassDeclaration(<ClassDeclaration>member, []);\n          }\n          break;\n        }\n        case NodeKind.INTERFACEDECLARATION: {\n          if (\n            (noTreeShaking || member.is(CommonFlags.EXPORT)) &&\n            !(<InterfaceDeclaration>member).isGeneric\n          ) {\n            this.compileInterfaceDeclaration(<InterfaceDeclaration>member, []);\n          }\n          break;\n        }\n        case NodeKind.ENUMDECLARATION: {\n          if (noTreeShaking || member.is(CommonFlags.EXPORT)) {\n            this.compileEnumDeclaration(<EnumDeclaration>member);\n          }\n          break;\n        }\n        case NodeKind.FUNCTIONDECLARATION: {\n          if (\n            (noTreeShaking || member.is(CommonFlags.EXPORT)) &&\n            !(<FunctionDeclaration>member).isGeneric\n          ) {\n            this.compileFunctionDeclaration(<FunctionDeclaration>member, []);\n          }\n          break;\n        }\n        case NodeKind.NAMESPACEDECLARATION: {\n          if (noTreeShaking || member.is(CommonFlags.EXPORT)) {\n            this.compileNamespaceDeclaration(<NamespaceDeclaration>member);\n          }\n          break;\n        }\n        case NodeKind.VARIABLE: {\n          if (noTreeShaking || member.is(CommonFlags.EXPORT)) {\n            let variableInit = this.compileVariableStatement(<VariableStatement>member, true);\n            if (variableInit) this.startFunctionBody.push(variableInit);\n          }\n          break;\n        }\n        default: assert(false);\n      }\n    }\n  }\n\n  compileNamespace(ns: Namespace): void {\n    if (!ns.members) return;\n\n    var noTreeShaking = this.options.noTreeShaking;\n    for (let element of ns.members.values()) {\n      switch (element.kind) {\n        case ElementKind.CLASS_PROTOTYPE: {\n          if (\n            (\n              noTreeShaking ||\n              (<ClassPrototype>element).is(CommonFlags.EXPORT)\n            ) && !(<ClassPrototype>element).is(CommonFlags.GENERIC)\n          ) {\n            this.compileClassUsingTypeArguments(<ClassPrototype>element, []);\n          }\n          break;\n        }\n        case ElementKind.ENUM: {\n          this.compileEnum(<Enum>element);\n          break;\n        }\n        case ElementKind.FUNCTION_PROTOTYPE: {\n          if (\n            (\n              noTreeShaking || (<FunctionPrototype>element).is(CommonFlags.EXPORT)\n            ) && !(<FunctionPrototype>element).is(CommonFlags.GENERIC)\n          ) {\n            if (element.hasDecorator(DecoratorFlags.BUILTIN)) break;\n            this.compileFunctionUsingTypeArguments(\n              <FunctionPrototype>element,\n              [],\n              null, // no contextual type arguments\n              null, // no outer scope\n              (<FunctionPrototype>element).declaration.name\n            );\n          }\n          break;\n        }\n        case ElementKind.GLOBAL: {\n          this.compileGlobal(<Global>element);\n          break;\n        }\n        case ElementKind.NAMESPACE: {\n          this.compileNamespace(<Namespace>element);\n          break;\n        }\n      }\n    }\n  }\n\n  // exports\n\n  compileExportStatement(statement: ExportStatement): void {\n    var fileLevelExports = this.program.fileLevelExports;\n    var members = statement.members;\n    if (!members) return; // filespace\n    for (let i = 0, k = members.length; i < k; ++i) {\n      let member = members[i];\n      let element = fileLevelExports.get(\n        statement.range.source.internalPath + PATH_DELIMITER + member.externalName.text\n      );\n      if (!element) continue; // reported in Program#initialize\n      switch (element.kind) {\n        case ElementKind.CLASS_PROTOTYPE: {\n          if (!(<ClassPrototype>element).is(CommonFlags.GENERIC)) {\n            this.compileClassUsingTypeArguments(<ClassPrototype>element, []);\n          }\n          break;\n        }\n        case ElementKind.ENUM: {\n          this.compileEnum(<Enum>element);\n          break;\n        }\n        case ElementKind.FUNCTION_PROTOTYPE: {\n          if (\n            !(<FunctionPrototype>element).is(CommonFlags.GENERIC) &&\n            statement.range.source.isEntry\n          ) {\n            this.compileFunctionUsingTypeArguments(\n              <FunctionPrototype>element,\n              [],\n              null, // no contextual type arguments\n              null, // no outer scope\n              (<FunctionPrototype>element).declaration.name\n            );\n          }\n          break;\n        }\n        case ElementKind.GLOBAL: {\n          this.compileGlobal(<Global>element);\n          break;\n        }\n        case ElementKind.NAMESPACE: {\n          this.compileNamespace(<Namespace>element);\n          break;\n        }\n      }\n    }\n  }\n\n  // classes\n\n  compileClassDeclaration(\n    declaration: ClassDeclaration,\n    typeArguments: TypeNode[],\n    contextualTypeArguments: Map<string,Type> | null = null\n  ): void {\n    var element = assert(this.program.elementsLookup.get(declaration.fileLevelInternalName));\n    assert(element.kind == ElementKind.CLASS_PROTOTYPE);\n    this.compileClassUsingTypeArguments(\n      <ClassPrototype>element,\n      typeArguments,\n      contextualTypeArguments,\n      declaration\n    );\n  }\n\n  compileClassUsingTypeArguments(\n    prototype: ClassPrototype,\n    typeArguments: TypeNode[],\n    contextualTypeArguments: Map<string,Type> | null = null,\n    alternativeReportNode: Node | null = null\n  ): void {\n    var instance = this.resolver.resolveClassInclTypeArguments(\n      prototype,\n      typeArguments,\n      contextualTypeArguments,\n      alternativeReportNode || prototype.declaration\n    );\n    if (!instance) return;\n    this.compileClass(instance);\n  }\n\n  compileClass(instance: Class): bool {\n    if (instance.is(CommonFlags.COMPILED)) return true;\n    instance.set(CommonFlags.COMPILED);\n\n    var staticMembers = instance.prototype.members;\n    if (staticMembers) {\n      for (let element of staticMembers.values()) {\n        switch (element.kind) {\n          case ElementKind.GLOBAL: {\n            this.compileGlobal(<Global>element);\n            break;\n          }\n          case ElementKind.FUNCTION_PROTOTYPE: {\n            if (\n              !(<FunctionPrototype>element).is(CommonFlags.GENERIC)\n            ) {\n              this.compileFunctionUsingTypeArguments(\n                <FunctionPrototype>element,\n                [], null, null,\n                (<FunctionPrototype>element).declaration.name\n              );\n            }\n            break;\n          }\n          case ElementKind.PROPERTY: {\n            let getter = (<Property>element).getterPrototype;\n            if (getter) {\n              this.compileFunctionUsingTypeArguments(\n                getter,\n                [], null, null,\n                getter.declaration.name\n              );\n            }\n            let setter = (<Property>element).setterPrototype;\n            if (setter) {\n              this.compileFunctionUsingTypeArguments(\n                setter,\n                [], null, null,\n                setter.declaration.name\n              );\n            }\n            break;\n          }\n        }\n      }\n    }\n    var ctorInstance = instance.constructorInstance;\n    if (ctorInstance) this.compileFunction(ctorInstance);\n    var instanceMembers = instance.members;\n    if (instanceMembers) {\n      for (let element of instanceMembers.values()) {\n        switch (element.kind) {\n          case ElementKind.FUNCTION_PROTOTYPE: {\n            if (\n              !(<FunctionPrototype>element).is(CommonFlags.GENERIC)\n            ) {\n              this.compileFunctionUsingTypeArguments(\n                <FunctionPrototype>element,\n                [],\n                instance.contextualTypeArguments,\n                null, // no outer scope\n                (<FunctionPrototype>element).declaration.name\n              );\n            }\n            break;\n          }\n          case ElementKind.FIELD: {\n            element.set(CommonFlags.COMPILED);\n            break;\n          }\n          case ElementKind.PROPERTY: {\n            let getter = (<Property>element).getterPrototype;\n            if (getter) {\n              this.compileFunctionUsingTypeArguments(\n                getter,\n                [], instance.contextualTypeArguments, null,\n                getter.declaration.name\n              );\n            }\n            let setter = (<Property>element).setterPrototype;\n            if (setter) {\n              this.compileFunctionUsingTypeArguments(\n                setter,\n                [], instance.contextualTypeArguments, null,\n                setter.declaration.name\n              );\n            }\n            break;\n          }\n        }\n      }\n    }\n    return true;\n  }\n\n  compileInterfaceDeclaration(\n    declaration: InterfaceDeclaration,\n    typeArguments: TypeNode[],\n    contextualTypeArguments: Map<string,Type> | null = null,\n    alternativeReportNode: Node | null = null\n  ): void {\n    // TODO\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      declaration.range\n    );\n  }\n\n  // memory\n\n  /** Adds a static memory segment with the specified data. */\n  addMemorySegment(buffer: Uint8Array, alignment: i32 = 8): MemorySegment {\n    var memoryOffset = i64_align(this.memoryOffset, alignment);\n    var segment = MemorySegment.create(buffer, memoryOffset);\n    this.memorySegments.push(segment);\n    this.memoryOffset = i64_add(memoryOffset, i64_new(buffer.length, 0));\n    return segment;\n  }\n\n  // function table\n\n  /** Ensures that a table entry exists for the specified function and returns its index. */\n  ensureFunctionTableEntry(func: Function): i32 {\n    assert(func.is(CommonFlags.COMPILED));\n    if (func.functionTableIndex >= 0) {\n      return func.functionTableIndex;\n    }\n    var functionTable = this.functionTable;\n    var index = functionTable.length;\n    if (!func.is(CommonFlags.TRAMPOLINE) && func.signature.requiredParameters < func.signature.parameterTypes.length) {\n      // insert the trampoline if the function has optional parameters\n      func = this.ensureTrampoline(func);\n    }\n    functionTable.push(func.internalName);\n    func.functionTableIndex = index;\n    return index;\n  }\n\n  // statements\n\n  compileStatement(statement: Statement): ExpressionRef {\n    var module = this.module;\n    var stmt: ExpressionRef;\n    switch (statement.kind) {\n      case NodeKind.BLOCK: {\n        stmt = this.compileBlockStatement(<BlockStatement>statement);\n        break;\n      }\n      case NodeKind.BREAK: {\n        stmt = this.compileBreakStatement(<BreakStatement>statement);\n        break;\n      }\n      case NodeKind.CONTINUE: {\n        stmt = this.compileContinueStatement(<ContinueStatement>statement);\n        break;\n      }\n      case NodeKind.DO: {\n        stmt = this.compileDoStatement(<DoStatement>statement);\n        break;\n      }\n      case NodeKind.EMPTY: {\n        stmt = this.compileEmptyStatement(<EmptyStatement>statement);\n        break;\n      }\n      case NodeKind.EXPRESSION: {\n        stmt = this.compileExpressionStatement(<ExpressionStatement>statement);\n        break;\n      }\n      case NodeKind.FOR: {\n        stmt = this.compileForStatement(<ForStatement>statement);\n        break;\n      }\n      case NodeKind.IF: {\n        stmt = this.compileIfStatement(<IfStatement>statement);\n        break;\n      }\n      case NodeKind.RETURN: {\n        stmt = this.compileReturnStatement(<ReturnStatement>statement);\n        break;\n      }\n      case NodeKind.SWITCH: {\n        stmt = this.compileSwitchStatement(<SwitchStatement>statement);\n        break;\n      }\n      case NodeKind.THROW: {\n        stmt = this.compileThrowStatement(<ThrowStatement>statement);\n        break;\n      }\n      case NodeKind.TRY: {\n        stmt = this.compileTryStatement(<TryStatement>statement);\n        break;\n      }\n      case NodeKind.VARIABLE: {\n        stmt = this.compileVariableStatement(<VariableStatement>statement);\n        if (!stmt) stmt = module.createNop();\n        break;\n      }\n      case NodeKind.VOID: {\n        stmt = this.compileVoidStatement(<VoidStatement>statement);\n        break;\n      }\n      case NodeKind.WHILE: {\n        stmt = this.compileWhileStatement(<WhileStatement>statement);\n        break;\n      }\n      case NodeKind.TYPEDECLARATION: {\n        // type declarations must be top-level because function bodies are evaluated when\n        // reachaable only.\n        if (this.currentFunction == this.startFunctionInstance) {\n          return module.createNop();\n        }\n        // otherwise fall-through\n      }\n      default: {\n        assert(false);\n        stmt = module.createUnreachable();\n      }\n    }\n    if (this.options.sourceMap) this.addDebugLocation(stmt, statement.range);\n    return stmt;\n  }\n\n  compileStatements(statements: Statement[]): ExpressionRef[] {\n    var numStatements = statements.length;\n    var stmts = new Array<ExpressionRef>(numStatements);\n    stmts.length = 0;\n    var flow = this.currentFunction.flow;\n    for (let i = 0; i < numStatements; ++i) {\n      let stmt = this.compileStatement(statements[i]);\n      switch (getExpressionId(stmt)) {\n        case ExpressionId.Block: {\n          if (!getBlockName(stmt)) {\n            for (let j = 0, k = getBlockChildCount(stmt); j < k; ++j) stmts.push(getBlockChild(stmt, j));\n            break;\n          }\n          // fall-through\n        }\n        default: stmts.push(stmt);\n        case ExpressionId.Nop:\n      }\n      if (flow.isAny(FlowFlags.ANY_TERMINATING)) {\n        if (needsExplicitUnreachable(stmt)) stmts.push(this.module.createUnreachable());\n        break;\n      }\n    }\n    return stmts;\n  }\n\n  compileBlockStatement(statement: BlockStatement): ExpressionRef {\n    var statements = statement.statements;\n    var parentFlow = this.currentFunction.flow;\n    var flow = parentFlow.fork();\n    this.currentFunction.flow = flow;\n\n    var stmts = this.compileStatements(statements);\n    var stmt = stmts.length == 0\n      ? this.module.createNop()\n      : stmts.length == 1\n        ? stmts[0]\n        : this.module.createBlock(null, stmts,getExpressionType(stmts[stmts.length - 1]));\n\n    this.currentFunction.flow = flow.free();\n    parentFlow.inherit(flow);\n    return stmt;\n  }\n\n  compileBreakStatement(statement: BreakStatement): ExpressionRef {\n    var module = this.module;\n    if (statement.label) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        statement.label.range\n      );\n      return module.createUnreachable();\n    }\n    var flow = this.currentFunction.flow;\n    var breakLabel = flow.breakLabel;\n    if (breakLabel == null) {\n      this.error(\n        DiagnosticCode.A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement,\n        statement.range\n      );\n      return module.createUnreachable();\n    }\n    flow.set(FlowFlags.BREAKS);\n    return module.createBreak(breakLabel);\n  }\n\n  compileContinueStatement(statement: ContinueStatement): ExpressionRef {\n    var module = this.module;\n    var label = statement.label;\n    if (label) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        label.range\n      );\n      return module.createUnreachable();\n    }\n    // Check if 'continue' is allowed here\n    var flow = this.currentFunction.flow;\n    var continueLabel = flow.continueLabel;\n    if (continueLabel == null) {\n      this.error(\n        DiagnosticCode.A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement,\n        statement.range\n      );\n      return module.createUnreachable();\n    }\n    flow.set(FlowFlags.CONTINUES);\n    return module.createBreak(continueLabel);\n  }\n\n  compileDoStatement(statement: DoStatement): ExpressionRef {\n    var currentFunction = this.currentFunction;\n    var module = this.module;\n\n    var label = currentFunction.enterBreakContext();\n    var parentFlow = currentFunction.flow;\n    var flow = parentFlow.fork();\n    currentFunction.flow = flow;\n    var breakLabel = \"break|\" + label;\n    flow.breakLabel = breakLabel;\n    var continueLabel = \"continue|\" + label;\n    flow.continueLabel = continueLabel;\n\n    var body = this.compileStatement(statement.statement);\n    var condExpr = this.makeIsTrueish(\n      this.compileExpression(statement.condition, Type.i32, ConversionKind.NONE, WrapMode.NONE),\n      this.currentType\n    );\n    // TODO: check if condition is always false and if so, omit it (just a block)\n\n    // Switch back to the parent flow\n    currentFunction.flow = flow.free();\n    currentFunction.leaveBreakContext();\n    var terminated = flow.isAny(FlowFlags.ANY_TERMINATING);\n    flow.unset(\n      FlowFlags.BREAKS |\n      FlowFlags.CONDITIONALLY_BREAKS |\n      FlowFlags.CONTINUES |\n      FlowFlags.CONDITIONALLY_CONTINUES\n    );\n    parentFlow.inherit(flow);\n\n    var block: ExpressionRef[] = [\n      module.createLoop(continueLabel,\n        terminated\n          ? body // skip trailing continue if unnecessary\n          : module.createBlock(null, [\n              body,\n              module.createBreak(continueLabel, condExpr)\n            ], NativeType.None)\n      )\n    ];\n    if (terminated) block.push(module.createUnreachable());\n    return module.createBlock(breakLabel, block);\n  }\n\n  compileEmptyStatement(statement: EmptyStatement): ExpressionRef {\n    return this.module.createNop();\n  }\n\n  compileExpressionStatement(statement: ExpressionStatement): ExpressionRef {\n    var expr = this.compileExpression(statement.expression, Type.void, ConversionKind.NONE, WrapMode.NONE);\n    if (this.currentType != Type.void) {\n      expr = this.module.createDrop(expr);\n      this.currentType = Type.void;\n    }\n    return expr;\n  }\n\n  compileForStatement(statement: ForStatement): ExpressionRef {\n    // A for statement initiates a new branch with its own scoped variables\n    // possibly declared in its initializer, and break context.\n    var currentFunction = this.currentFunction;\n    var label = currentFunction.enterBreakContext();\n    var parentFlow = currentFunction.flow;\n    var flow = parentFlow.fork();\n    currentFunction.flow = flow;\n    var breakLabel = flow.breakLabel = \"break|\" + label;\n    flow.breakLabel = breakLabel;\n    var continueLabel = \"continue|\" + label;\n    flow.continueLabel = continueLabel;\n    var repeatLabel = \"repeat|\" + label;\n\n    // Compile in correct order\n    var module = this.module;\n    var initExpr = statement.initializer\n      ? this.compileStatement(<Statement>statement.initializer)\n      : 0;\n    var condExpr: ExpressionRef = 0;\n    var alwaysTrue = false;\n    if (statement.condition) {\n      condExpr = this.makeIsTrueish(\n        this.compileExpressionRetainType(<Expression>statement.condition, Type.bool, WrapMode.NONE),\n        this.currentType\n      );\n      // check if the condition is always true\n      let condPre = module.precomputeExpression(condExpr);\n      if (getExpressionId(condPre) == ExpressionId.Const) {\n        assert(getExpressionType(condPre) == NativeType.I32);\n        if (getConstValueI32(condPre) != 0) alwaysTrue = true;\n        // TODO: could skip compilation if the condition is always false here, but beware that the\n        // initializer could still declare new 'var's that are used later on.\n      }\n      // recompile to original\n      condExpr = this.makeIsTrueish(\n        this.compileExpressionRetainType(<Expression>statement.condition, Type.bool, WrapMode.NONE),\n        this.currentType\n      );\n    } else {\n      // omitted condition is always true\n      condExpr = module.createI32(1);\n      alwaysTrue = true;\n    }\n    var incrExpr = statement.incrementor\n      ? this.compileExpression(<Expression>statement.incrementor, Type.void, ConversionKind.IMPLICIT, WrapMode.NONE)\n      : 0;\n    var bodyStatement = statement.statement;\n    var bodyExpr = bodyStatement.kind == NodeKind.BLOCK && (<BlockStatement>bodyStatement).statements.length == 1\n      ? this.compileStatement((<BlockStatement>bodyStatement).statements[0])\n      : this.compileStatement(bodyStatement);\n\n    // Switch back to the parent flow\n    currentFunction.flow = flow.free();\n    currentFunction.leaveBreakContext();\n    var usesContinue = flow.isAny(FlowFlags.CONTINUES | FlowFlags.CONDITIONALLY_CONTINUES);\n    flow.unset(\n      FlowFlags.BREAKS |\n      FlowFlags.CONDITIONALLY_BREAKS |\n      FlowFlags.CONTINUES |\n      FlowFlags.CONDITIONALLY_CONTINUES\n    );\n    if (alwaysTrue) parentFlow.inherit(flow);\n    else parentFlow.inheritConditional(flow);\n\n    var breakBlock = new Array<ExpressionRef>(); // outer 'break' block\n    if (initExpr) breakBlock.push(initExpr);\n\n    var repeatBlock = new Array<ExpressionRef>(); // block repeating the loop\n    if (usesContinue) {\n      repeatBlock.push(\n        module.createBlock(continueLabel, [ // inner 'continue' block\n          module.createBreak(breakLabel, module.createUnary(UnaryOp.EqzI32, condExpr)),\n          bodyExpr\n        ], NativeType.None)\n      );\n    } else { // can omit the 'continue' block\n      repeatBlock.push(\n        module.createBreak(breakLabel, module.createUnary(UnaryOp.EqzI32, condExpr))\n      );\n      repeatBlock.push(bodyExpr);\n    }\n    if (incrExpr) repeatBlock.push(incrExpr);\n    repeatBlock.push(\n      module.createBreak(repeatLabel)\n    );\n\n    breakBlock.push(\n      module.createLoop(repeatLabel, module.createBlock(null, repeatBlock, NativeType.None))\n    );\n\n    return module.createBlock(breakLabel, breakBlock);\n  }\n\n  compileIfStatement(statement: IfStatement): ExpressionRef {\n    var module = this.module;\n    var currentFunction = this.currentFunction;\n    var ifTrue = statement.ifTrue;\n    var ifFalse = statement.ifFalse;\n\n    // The condition doesn't initiate a branch yet\n    var condExpr = this.makeIsTrueish(\n      this.compileExpressionRetainType(statement.condition, Type.bool, WrapMode.NONE),\n      this.currentType\n    );\n\n    if (\n      !this.options.noTreeShaking ||\n      this.currentFunction.isAny(CommonFlags.GENERIC | CommonFlags.GENERIC_CONTEXT)\n    ) {\n      // Try to eliminate unnecesssary branches if the condition is constant\n      let condExprPrecomp = module.precomputeExpression(condExpr);\n      if (\n        getExpressionId(condExprPrecomp) == ExpressionId.Const &&\n        getExpressionType(condExprPrecomp) == NativeType.I32\n      ) {\n        return getConstValueI32(condExprPrecomp)\n          ? this.compileStatement(ifTrue)\n          : ifFalse\n            ? this.compileStatement(ifFalse)\n            : module.createNop();\n\n      // Otherwise recompile to the original and let the optimizer decide\n      } else /* if (condExpr != condExprPrecomp) <- not guaranteed */ {\n        condExpr = this.makeIsTrueish(\n          this.compileExpressionRetainType(statement.condition, Type.bool, WrapMode.NONE),\n          this.currentType\n        );\n      }\n    }\n\n    // Each arm initiates a branch\n    var parentFlow = currentFunction.flow;\n    var ifTrueFlow = parentFlow.fork();\n    currentFunction.flow = ifTrueFlow;\n    var ifTrueExpr = this.compileStatement(ifTrue);\n    currentFunction.flow = ifTrueFlow.free();\n\n    var ifFalseExpr: ExpressionRef = 0;\n    if (ifFalse) {\n      let ifFalseFlow = parentFlow.fork();\n      currentFunction.flow = ifFalseFlow;\n      ifFalseExpr = this.compileStatement(ifFalse);\n      currentFunction.flow = ifFalseFlow.free();\n      parentFlow.inheritMutual(ifTrueFlow, ifFalseFlow);\n    } else {\n      parentFlow.inheritConditional(ifTrueFlow);\n    }\n    return module.createIf(condExpr, ifTrueExpr, ifFalseExpr);\n  }\n\n  compileReturnStatement(statement: ReturnStatement): ExpressionRef {\n    var module = this.module;\n    var currentFunction = this.currentFunction;\n    var expr: ExpressionRef = 0;\n    var flow = currentFunction.flow;\n\n    // Remember that this flow returns\n    flow.set(FlowFlags.RETURNS);\n\n    if (statement.value) {\n      let returnType = flow.returnType;\n      if (returnType == Type.void) {\n        this.compileExpressionRetainType(statement.value, returnType, WrapMode.NONE);\n        this.error(\n          DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n          statement.value.range, this.currentType.toString(), returnType.toString()\n        );\n        this.currentType = Type.void;\n        return module.createUnreachable();\n      }\n      expr = this.compileExpression(\n        statement.value,\n        returnType,\n        ConversionKind.IMPLICIT,\n        currentFunction.is(CommonFlags.MODULE_EXPORT)\n          ? WrapMode.WRAP\n          : WrapMode.NONE\n      );\n\n      // Remember whether returning a properly wrapped value\n      if (!flow.canOverflow(expr, returnType)) flow.set(FlowFlags.RETURNS_WRAPPED);\n    }\n\n    // If the last statement anyway, make it the block's return value\n    if (isLastStatement(statement)) return expr ? expr : module.createNop();\n\n    // When inlining, break to the end of the inlined function's block (no need to wrap)\n    return flow.is(FlowFlags.INLINE_CONTEXT)\n      ? module.createBreak(assert(flow.returnLabel), 0, expr)\n      : module.createReturn(expr);\n  }\n\n  compileSwitchStatement(statement: SwitchStatement): ExpressionRef {\n    var module = this.module;\n    var currentFunction = this.currentFunction;\n\n    var cases = statement.cases;\n    var numCases = cases.length;\n    if (!numCases) {\n      return this.compileExpression(statement.condition, Type.void, ConversionKind.IMPLICIT, WrapMode.NONE);\n    }\n\n    // Everything within a switch uses the same break context\n    var context = currentFunction.enterBreakContext();\n    var parentFlow = currentFunction.flow;\n\n    // introduce a local for evaluating the condition (exactly once)\n    var tempLocal = currentFunction.getTempLocal(Type.u32, false);\n    var tempLocalIndex = tempLocal.index;\n\n    // Prepend initializer to inner block. Does not initiate a new branch, yet.\n    var breaks = new Array<ExpressionRef>(1 + numCases);\n    breaks[0] = module.createSetLocal( // initializer\n      tempLocalIndex,\n      this.compileExpression(statement.condition, Type.u32, ConversionKind.IMPLICIT, WrapMode.NONE)\n    );\n\n    // make one br_if per (possibly dynamic) labeled case (binaryen optimizes to br_table where possible)\n    var breakIndex = 1;\n    var defaultIndex = -1;\n    for (let i = 0; i < numCases; ++i) {\n      let case_ = cases[i];\n      let label = case_.label;\n      if (label) {\n        breaks[breakIndex++] = module.createBreak(\"case\" + i.toString(10) + \"|\" + context,\n          module.createBinary(BinaryOp.EqI32,\n            module.createGetLocal(tempLocalIndex, NativeType.I32),\n            this.compileExpression(label, Type.u32, ConversionKind.IMPLICIT, WrapMode.NONE)\n          )\n        );\n      } else {\n        defaultIndex = i;\n      }\n    }\n\n    currentFunction.freeTempLocal(tempLocal);\n\n    // otherwise br to default respectively out of the switch if there is no default case\n    breaks[breakIndex] = module.createBreak((defaultIndex >= 0\n        ? \"case\" + defaultIndex.toString(10)\n        : \"break\"\n      ) + \"|\" + context);\n\n    // nest blocks in order\n    var currentBlock = module.createBlock(\"case0|\" + context, breaks, NativeType.None);\n    var alwaysReturns = true;\n    var alwaysReturnsWrapped = true;\n    var alwaysThrows = true;\n    var alwaysAllocates = true;\n    for (let i = 0; i < numCases; ++i) {\n      let case_ = cases[i];\n      let statements = case_.statements;\n      let numStatements = statements.length;\n\n      // Each switch case initiates a new branch\n      let flow = parentFlow.fork();\n      currentFunction.flow = flow;\n      let breakLabel = \"break|\" + context;\n      flow.breakLabel = breakLabel;\n\n      let isLast = i == numCases - 1;\n      let nextLabel = isLast ? breakLabel : \"case\" + (i + 1).toString(10) + \"|\" + context;\n      let stmts = new Array<ExpressionRef>(1 + numStatements);\n      stmts[0] = currentBlock;\n      let count = 1;\n      let terminated = false;\n      for (let j = 0; j < numStatements; ++j) {\n        let stmt = this.compileStatement(statements[j]);\n        if (getExpressionId(stmt) != ExpressionId.Nop) {\n          stmts[count++] = stmt;\n          if (flow.isAny(FlowFlags.ANY_TERMINATING)) {\n            terminated = true;\n            break;\n          }\n        }\n      }\n      stmts.length = count;\n      if (terminated || isLast) {\n        if (!flow.is(FlowFlags.RETURNS)) alwaysReturns = false;\n        if (!flow.is(FlowFlags.RETURNS_WRAPPED)) alwaysReturnsWrapped = false;\n        if (!flow.is(FlowFlags.THROWS)) alwaysThrows = false;\n        if (!flow.is(FlowFlags.ALLOCATES)) alwaysAllocates = false;\n      }\n\n      // Switch back to the parent flow\n      flow.unset(\n        FlowFlags.BREAKS |\n        FlowFlags.CONDITIONALLY_BREAKS\n      );\n      currentFunction.flow = flow.free();\n      currentBlock = module.createBlock(nextLabel, stmts, NativeType.None); // must be a labeled block\n    }\n    currentFunction.leaveBreakContext();\n\n    // If the switch has a default (guaranteed to handle any value), propagate common flags\n    if (defaultIndex >= 0) {\n      if (alwaysReturns) parentFlow.set(FlowFlags.RETURNS);\n      if (alwaysReturnsWrapped) parentFlow.set(FlowFlags.RETURNS_WRAPPED);\n      if (alwaysThrows) parentFlow.set(FlowFlags.THROWS);\n      if (alwaysAllocates) parentFlow.set(FlowFlags.ALLOCATES);\n    }\n    return currentBlock;\n  }\n\n  compileThrowStatement(statement: ThrowStatement): ExpressionRef {\n    var flow = this.currentFunction.flow;\n\n    // Remember that this branch throws\n    flow.set(FlowFlags.THROWS);\n\n    // FIXME: without try-catch it is safe to assume RETURNS as well for now\n    flow.set(FlowFlags.RETURNS);\n\n    // TODO: requires exception-handling spec.\n    return compileAbort(this, null, statement);\n  }\n\n  compileTryStatement(statement: TryStatement): ExpressionRef {\n    // TODO\n    // can't yet support something like: try { return ... } finally { ... }\n    // worthwhile to investigate lowering returns to block results (here)?\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      statement.range\n    );\n    return this.module.createUnreachable();\n  }\n\n  /**\n   * Compiles a variable statement. Returns `0` if an initializer is not\n   * necessary.\n   */\n  compileVariableStatement(statement: VariableStatement, isKnownGlobal: bool = false): ExpressionRef {\n    var program = this.program;\n    var currentFunction = this.currentFunction;\n    var declarations = statement.declarations;\n    var numDeclarations = declarations.length;\n\n    // top-level variables and constants become globals\n    if (isKnownGlobal || (\n      currentFunction == this.startFunctionInstance &&\n      statement.parent && statement.parent.kind == NodeKind.SOURCE\n    )) {\n      // NOTE that the above condition also covers top-level variables declared with 'let', even\n      // though such variables could also become start function locals if, and only if, not used\n      // within any function declared in the same source, which is unknown at this point. the only\n      // efficient way to deal with this would be to keep track of all occasions it is used and\n      // replace these instructions afterwards, dynamically. (TOOD: what about a Binaryen pass?)\n      for (let i = 0; i < numDeclarations; ++i) {\n        this.compileGlobalDeclaration(declarations[i]);\n      }\n      return 0;\n    }\n\n    // other variables become locals\n    var initializers = new Array<ExpressionRef>();\n    var flow = this.currentFunction.flow;\n    var resolver = this.resolver;\n    for (let i = 0; i < numDeclarations; ++i) {\n      let declaration = declarations[i];\n      let name = declaration.name.text;\n      let type: Type | null = null;\n      let initExpr: ExpressionRef = 0;\n      if (declaration.type) {\n        type = resolver.resolveType( // reports\n          declaration.type,\n          flow.contextualTypeArguments\n        );\n        if (!type) continue;\n        if (declaration.initializer) {\n          initExpr = this.compileExpression( // reports\n            declaration.initializer,\n            type,\n            ConversionKind.IMPLICIT,\n            WrapMode.NONE\n          );\n        }\n      } else if (declaration.initializer) { // infer type using void/NONE for proper literal inference\n        initExpr = this.compileExpressionRetainType( // reports\n          declaration.initializer,\n          Type.void,\n          WrapMode.NONE\n        );\n        if (this.currentType == Type.void) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n            declaration.range, this.currentType.toString(), \"<auto>\"\n          );\n          continue;\n        }\n        type = this.currentType;\n      } else {\n        this.error(\n          DiagnosticCode.Type_expected,\n          declaration.name.range.atEnd\n        );\n        continue;\n      }\n      let isInlined = false;\n      if (declaration.is(CommonFlags.CONST)) {\n        if (initExpr) {\n          initExpr = this.module.precomputeExpression(initExpr);\n          if (getExpressionId(initExpr) == ExpressionId.Const) {\n            let local = new Local(program, name, -1, type);\n            switch (getExpressionType(initExpr)) {\n              case NativeType.I32: {\n                local = local.withConstantIntegerValue(\n                  i64_new(\n                    getConstValueI32(initExpr),\n                    0\n                  )\n                );\n                break;\n              }\n              case NativeType.I64: {\n                local = local.withConstantIntegerValue(\n                  i64_new(\n                    getConstValueI64Low(initExpr),\n                    getConstValueI64High(initExpr)\n                  )\n                );\n                break;\n              }\n              case NativeType.F32: {\n                local = local.withConstantFloatValue(<f64>getConstValueF32(initExpr));\n                break;\n              }\n              case NativeType.F64: {\n                local = local.withConstantFloatValue(getConstValueF64(initExpr));\n                break;\n              }\n              default: {\n                assert(false);\n                return this.module.createUnreachable();\n              }\n            }\n            // Create a virtual local that doesn't actually exist in WebAssembly\n            let scopedLocals = currentFunction.flow.scopedLocals;\n            if (!scopedLocals) currentFunction.flow.scopedLocals = scopedLocals = new Map();\n            else if (scopedLocals.has(name)) {\n              this.error(\n                DiagnosticCode.Duplicate_identifier_0,\n                declaration.name.range, name\n              );\n              return this.module.createUnreachable();\n            }\n            scopedLocals.set(name, local);\n            isInlined = true;\n          } else {\n            this.warning(\n              DiagnosticCode.Compiling_constant_with_non_constant_initializer_as_mutable,\n              declaration.range\n            );\n          }\n        } else {\n          this.error(\n            DiagnosticCode._const_declarations_must_be_initialized,\n            declaration.range\n          );\n        }\n      }\n      if (!isInlined) {\n        let local: Local;\n        if (\n          declaration.isAny(CommonFlags.LET | CommonFlags.CONST) ||\n          flow.is(FlowFlags.INLINE_CONTEXT)\n        ) { // here: not top-level\n          local = flow.addScopedLocal(type, name, false, declaration); // reports\n        } else {\n          local = currentFunction.addLocal(type, name, declaration); // reports\n        }\n        if (initExpr) {\n          initializers.push(this.compileAssignmentWithValue(declaration.name, initExpr));\n          if (local.type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\n            flow.setLocalWrapped(local.index, !flow.canOverflow(initExpr, type));\n          }\n        } else if (local.type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\n          flow.setLocalWrapped(local.index, true); // zero\n        }\n      }\n    }\n    return initializers.length   // we can unwrap these here because the\n      ? initializers.length == 1 // source didn't tell us exactly what to do\n        ? initializers[0]\n        : this.module.createBlock(null, initializers, NativeType.None)\n      : 0;\n  }\n\n  compileVoidStatement(statement: VoidStatement): ExpressionRef {\n    return this.compileExpression(statement.expression, Type.void, ConversionKind.EXPLICIT, WrapMode.NONE);\n  }\n\n  compileWhileStatement(statement: WhileStatement): ExpressionRef {\n    var module = this.module;\n\n    // The condition does not yet initialize a branch\n    var condExpr = this.makeIsTrueish(\n      this.compileExpressionRetainType(statement.condition, Type.bool, WrapMode.NONE),\n      this.currentType\n    );\n\n    if (\n      !this.options.noTreeShaking ||\n      this.currentFunction.isAny(CommonFlags.GENERIC | CommonFlags.GENERIC_CONTEXT)\n    ) {\n      // Try to eliminate unnecesssary loops if the condition is constant\n      let condExprPrecomp = module.precomputeExpression(condExpr);\n      if (\n        getExpressionId(condExprPrecomp) == ExpressionId.Const &&\n        getExpressionType(condExprPrecomp) == NativeType.I32\n      ) {\n        if (!getConstValueI32(condExprPrecomp)) return module.createNop();\n\n      // Otherwise recompile to the original and let the optimizer decide\n      } else /* if (condExpr != condExprPrecomp) <- not guaranteed */ {\n        condExpr = this.makeIsTrueish(\n          this.compileExpressionRetainType(statement.condition, Type.bool, WrapMode.NONE),\n          this.currentType\n        );\n      }\n    }\n\n    // Statements initiate a new branch with its own break context\n    var currentFunction = this.currentFunction;\n    var label = currentFunction.enterBreakContext();\n    var parentFlow = currentFunction.flow;\n    var flow = parentFlow.fork();\n    currentFunction.flow = flow;\n    var breakLabel = \"break|\" + label;\n    flow.breakLabel = breakLabel;\n    var continueLabel = \"continue|\" + label;\n    flow.continueLabel = continueLabel;\n\n    var body = this.compileStatement(statement.statement);\n    var alwaysTrue = false; // TODO\n    var terminated = flow.isAny(FlowFlags.ANY_TERMINATING);\n\n    // Switch back to the parent flow\n    currentFunction.flow = flow.free();\n    currentFunction.leaveBreakContext();\n    flow.unset(\n      FlowFlags.BREAKS |\n      FlowFlags.CONDITIONALLY_BREAKS |\n      FlowFlags.CONTINUES |\n      FlowFlags.CONDITIONALLY_CONTINUES\n    );\n    if (alwaysTrue) parentFlow.inherit(flow);\n    else parentFlow.inheritConditional(flow);\n\n    return module.createBlock(breakLabel, [\n      module.createLoop(continueLabel,\n        module.createIf(condExpr,\n          terminated\n            ? body // skip trailing continue if unnecessary\n            : module.createBlock(null, [\n                body,\n                module.createBreak(continueLabel)\n              ], NativeType.None)\n        )\n      )\n    ]);\n  }\n\n  // expressions\n\n  /**\n   * Compiles the value of an inlined constant element.\n   * @param retainType If true, the annotated type of the constant is retained. Otherwise, the value\n   *  is precomputed according to context.\n   */\n  compileInlineConstant(\n    element: VariableLikeElement,\n    contextualType: Type,\n    retainType: bool\n  ): ExpressionRef {\n    assert(element.is(CommonFlags.INLINED));\n    var type = element.type;\n    switch (\n      !retainType &&\n      type.is(TypeFlags.INTEGER) &&\n      contextualType.is(TypeFlags.INTEGER) &&\n      type.size < contextualType.size\n        ? (this.currentType = contextualType).kind // essentially precomputes a (sign-)extension\n        : (this.currentType = type).kind\n    ) {\n      case TypeKind.I8:\n      case TypeKind.I16: {\n        let shift = type.computeSmallIntegerShift(Type.i32);\n        return this.module.createI32(\n          element.constantValueKind == ConstantValueKind.INTEGER\n            ? i64_low(element.constantIntegerValue) << shift >> shift\n            : 0\n        ); // recognized by canOverflow\n      }\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.BOOL: {\n        let mask = element.type.computeSmallIntegerMask(Type.i32);\n        return this.module.createI32(\n          element.constantValueKind == ConstantValueKind.INTEGER\n            ? i64_low(element.constantIntegerValue) & mask\n            : 0\n        ); // recognized by canOverflow\n      }\n      case TypeKind.I32:\n      case TypeKind.U32: {\n        return this.module.createI32(\n          element.constantValueKind == ConstantValueKind.INTEGER\n            ? i64_low(element.constantIntegerValue)\n            : 0\n        );\n      }\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        if (!element.program.options.isWasm64) {\n          return this.module.createI32(\n            element.constantValueKind == ConstantValueKind.INTEGER\n              ? i64_low(element.constantIntegerValue)\n              : 0\n          );\n        }\n        // fall-through\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        return element.constantValueKind == ConstantValueKind.INTEGER\n          ? this.module.createI64(\n              i64_low(element.constantIntegerValue),\n              i64_high(element.constantIntegerValue)\n            )\n          : this.module.createI64(0);\n      }\n      case TypeKind.F64: {\n        // monkey-patch for converting built-in floats to f32 implicitly\n        if (!(element.hasDecorator(DecoratorFlags.BUILTIN) && contextualType == Type.f32)) {\n          return this.module.createF64((<VariableLikeElement>element).constantFloatValue);\n        }\n        // otherwise fall-through: basically precomputes f32.demote/f64 of NaN / Infinity\n        this.currentType = Type.f32;\n      }\n      case TypeKind.F32: {\n        return this.module.createF32((<VariableLikeElement>element).constantFloatValue);\n      }\n      default: {\n        assert(false);\n        return this.module.createUnreachable();\n      }\n    }\n  }\n\n  compileExpression(\n    expression: Expression,\n    contextualType: Type,\n    conversionKind: ConversionKind,\n    wrapMode: WrapMode\n  ): ExpressionRef {\n    this.currentType = contextualType;\n\n    var expr: ExpressionRef;\n    switch (expression.kind) {\n      case NodeKind.ASSERTION: {\n        expr = this.compileAssertionExpression(<AssertionExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.BINARY: {\n        expr = this.compileBinaryExpression(<BinaryExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.CALL: {\n        expr = this.compileCallExpression(<CallExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.COMMA: {\n        expr = this.compileCommaExpression(<CommaExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.ELEMENTACCESS: {\n        expr = this.compileElementAccessExpression(<ElementAccessExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.FUNCTION: {\n        expr = this.compileFunctionExpression(<FunctionExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.IDENTIFIER:\n      case NodeKind.FALSE:\n      case NodeKind.NULL:\n      case NodeKind.THIS:\n      case NodeKind.SUPER:\n      case NodeKind.TRUE: {\n        expr = this.compileIdentifierExpression(\n          <IdentifierExpression>expression,\n          contextualType,\n          conversionKind == ConversionKind.NONE // retain type of inlined constants\n        );\n        break;\n      }\n      case NodeKind.INSTANCEOF: {\n        expr = this.compileInstanceOfExpression(<InstanceOfExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.LITERAL: {\n        expr = this.compileLiteralExpression(<LiteralExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.NEW: {\n        expr = this.compileNewExpression(<NewExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.PARENTHESIZED: {\n        expr = this.compileParenthesizedExpression(<ParenthesizedExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.PROPERTYACCESS: {\n        expr = this.compilePropertyAccessExpression(\n          <PropertyAccessExpression>expression,\n          contextualType,\n          conversionKind == ConversionKind.NONE // retain type of inlined constants\n        );\n        break;\n      }\n      case NodeKind.TERNARY: {\n        expr = this.compileTernaryExpression(<TernaryExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.UNARYPOSTFIX: {\n        expr = this.compileUnaryPostfixExpression(<UnaryPostfixExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.UNARYPREFIX: {\n        expr = this.compileUnaryPrefixExpression(<UnaryPrefixExpression>expression, contextualType);\n        break;\n      }\n      default: {\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          expression.range\n        );\n        expr = this.module.createUnreachable();\n      }\n    }\n\n    var currentType = this.currentType;\n    if (conversionKind != ConversionKind.NONE && currentType != contextualType) {\n      expr = this.convertExpression(expr, currentType, contextualType, conversionKind, wrapMode, expression);\n      this.currentType = contextualType;\n    } else if (wrapMode == WrapMode.WRAP) {\n      expr = this.ensureSmallIntegerWrap(expr, currentType);\n    }\n\n    if (this.options.sourceMap) this.addDebugLocation(expr, expression.range);\n    return expr;\n  }\n\n  compileExpressionRetainType(\n    expression: Expression,\n    contextualType: Type,\n    wrapMode: WrapMode\n  ): ExpressionRef {\n    return this.compileExpression(\n      expression,\n      contextualType == Type.void\n        ? Type.i32\n        : contextualType,\n      ConversionKind.NONE,\n      wrapMode\n    );\n  }\n\n  precomputeExpression(\n    expression: Expression,\n    contextualType: Type,\n    conversionKind: ConversionKind,\n    wrapMode: WrapMode\n  ): ExpressionRef {\n    return this.module.precomputeExpression(\n      this.compileExpression(expression, contextualType, conversionKind, wrapMode)\n    );\n  }\n\n  convertExpression(\n    expr: ExpressionRef,\n    fromType: Type,\n    toType: Type,\n    conversionKind: ConversionKind,\n    wrapMode: WrapMode,\n    reportNode: Node\n  ): ExpressionRef {\n    assert(conversionKind != ConversionKind.NONE);\n    var module = this.module;\n\n    // void to any\n    if (fromType.kind == TypeKind.VOID) {\n      assert(toType.kind != TypeKind.VOID); // convertExpression should not be called with void -> void\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        reportNode.range, fromType.toString(), toType.toString()\n      );\n      return module.createUnreachable();\n    }\n\n    // any to void\n    if (toType.kind == TypeKind.VOID) return module.createDrop(expr);\n\n    if (!fromType.isAssignableTo(toType)) {\n      if (conversionKind == ConversionKind.IMPLICIT) {\n        this.error(\n          DiagnosticCode.Conversion_from_type_0_to_1_requires_an_explicit_cast,\n          reportNode.range, fromType.toString(), toType.toString()\n        ); // recoverable\n      }\n    }\n\n    if (fromType.is(TypeFlags.FLOAT)) {\n\n      // float to float\n      if (toType.is(TypeFlags.FLOAT)) {\n        if (fromType.kind == TypeKind.F32) {\n\n          // f32 to f64\n          if (toType.kind == TypeKind.F64) {\n            expr = module.createUnary(UnaryOp.PromoteF32, expr);\n          }\n\n          // otherwise f32 to f32\n\n        // f64 to f32\n        } else if (toType.kind == TypeKind.F32) {\n          expr = module.createUnary(UnaryOp.DemoteF64, expr);\n        }\n\n        // otherwise f64 to f64\n\n      // float to int\n      } else if (toType.is(TypeFlags.INTEGER)) {\n\n        // f32 to int\n        if (fromType.kind == TypeKind.F32) {\n          if (toType.is(TypeFlags.SIGNED)) {\n            if (toType.is(TypeFlags.LONG)) {\n              expr = module.createUnary(UnaryOp.TruncF32ToI64, expr);\n            } else {\n              expr = module.createUnary(UnaryOp.TruncF32ToI32, expr);\n            }\n          } else {\n            if (toType.is(TypeFlags.LONG)) {\n              expr = module.createUnary(UnaryOp.TruncF32ToU64, expr);\n            } else {\n              expr = module.createUnary(UnaryOp.TruncF32ToU32, expr);\n            }\n          }\n\n        // f64 to int\n        } else {\n          if (toType.is(TypeFlags.SIGNED)) {\n            if (toType.is(TypeFlags.LONG)) {\n              expr = module.createUnary(UnaryOp.TruncF64ToI64, expr);\n            } else {\n              expr = module.createUnary(UnaryOp.TruncF64ToI32, expr);\n            }\n          } else {\n            if (toType.is(TypeFlags.LONG)) {\n              expr = module.createUnary(UnaryOp.TruncF64ToU64, expr);\n            } else {\n              expr = module.createUnary(UnaryOp.TruncF64ToU32, expr);\n            }\n          }\n        }\n\n      // float to void\n      } else {\n        assert(toType.flags == TypeFlags.NONE, \"void type expected\");\n        expr = module.createDrop(expr);\n      }\n\n    // int to float\n    } else if (fromType.is(TypeFlags.INTEGER) && toType.is(TypeFlags.FLOAT)) {\n\n      // int to f32\n      if (toType.kind == TypeKind.F32) {\n        if (fromType.is(TypeFlags.LONG)) {\n          expr = module.createUnary(\n            fromType.is(TypeFlags.SIGNED)\n              ? UnaryOp.ConvertI64ToF32\n              : UnaryOp.ConvertU64ToF32,\n            expr\n          );\n        } else {\n          expr = module.createUnary(\n            fromType.is(TypeFlags.SIGNED)\n              ? UnaryOp.ConvertI32ToF32\n              : UnaryOp.ConvertU32ToF32,\n            expr\n          );\n        }\n\n      // int to f64\n      } else {\n        if (fromType.is(TypeFlags.LONG)) {\n          expr = module.createUnary(\n            fromType.is(TypeFlags.SIGNED)\n              ? UnaryOp.ConvertI64ToF64\n              : UnaryOp.ConvertU64ToF64,\n            expr\n          );\n        } else {\n          expr = module.createUnary(\n            fromType.is(TypeFlags.SIGNED)\n              ? UnaryOp.ConvertI32ToF64\n              : UnaryOp.ConvertU32ToF64,\n            expr\n          );\n        }\n      }\n\n    // int to int\n    } else {\n      // i64 to ...\n      if (fromType.is(TypeFlags.LONG)) {\n\n        // i64 to i32 or smaller\n        if (!toType.is(TypeFlags.LONG)) {\n          expr = module.createUnary(UnaryOp.WrapI64, expr); // discards upper bits\n        }\n\n      // i32 or smaller to i64\n      } else if (toType.is(TypeFlags.LONG)) {\n        expr = module.createUnary(\n          fromType.is(TypeFlags.SIGNED) ? UnaryOp.ExtendI32 : UnaryOp.ExtendU32,\n          this.ensureSmallIntegerWrap(expr, fromType) // must clear garbage bits\n        );\n        wrapMode = WrapMode.NONE;\n\n      // i32 to i32\n      } else {\n        // small i32 to ...\n        if (fromType.is(TypeFlags.SHORT)) {\n          // small i32 to larger i32\n          if (fromType.size < toType.size) {\n            expr = this.ensureSmallIntegerWrap(expr, fromType); // must clear garbage bits\n            wrapMode = WrapMode.NONE;\n          }\n        }\n      }\n    }\n\n    this.currentType = toType;\n    return wrapMode == WrapMode.WRAP\n      ? this.ensureSmallIntegerWrap(expr, toType)\n      : expr;\n  }\n\n  compileAssertionExpression(expression: AssertionExpression, contextualType: Type): ExpressionRef {\n    var toType = this.resolver.resolveType( // reports\n      expression.toType,\n      this.currentFunction.flow.contextualTypeArguments\n    );\n    if (!toType) return this.module.createUnreachable();\n    return this.compileExpression(expression.expression, toType, ConversionKind.EXPLICIT, WrapMode.NONE);\n  }\n\n  private f32ModInstance: Function | null = null;\n  private f64ModInstance: Function | null = null;\n  private f32PowInstance: Function | null = null;\n  private f64PowInstance: Function | null = null;\n\n  compileBinaryExpression(\n    expression: BinaryExpression,\n    contextualType: Type\n  ): ExpressionRef {\n    var module = this.module;\n    var left = expression.left;\n    var right = expression.right;\n\n    var leftExpr: ExpressionRef;\n    var leftType: Type;\n    var rightExpr: ExpressionRef;\n    var rightType: Type;\n    var commonType: Type | null;\n\n    var expr: ExpressionRef;\n    var compound = false;\n\n    var operator = expression.operator;\n    switch (operator) {\n      case Token.LESSTHAN: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.LT);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n        rightType = this.currentType;\n        if (commonType = Type.commonCompatible(leftType, rightType, true)) {\n          leftExpr = this.convertExpression(\n            leftExpr,\n            leftType,\n            leftType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            left\n          );\n          rightExpr = this.convertExpression(\n            rightExpr,\n            rightType,\n            rightType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \"<\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.createUnreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            expr = module.createBinary(BinaryOp.LtI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.createBinary(BinaryOp.LtI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.LtI64\n                : BinaryOp.LtI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.LtU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.LtU64\n                : BinaryOp.LtU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.LtU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.LtF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.LtF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.GREATERTHAN: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.GT);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n        rightType = this.currentType;\n        if (commonType = Type.commonCompatible(leftType, rightType, true)) {\n          leftExpr = this.convertExpression(\n            leftExpr,\n            leftType,\n            leftType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            left\n          );\n          rightExpr = this.convertExpression(\n            rightExpr,\n            rightType,\n            rightType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \">\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.createUnreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            expr = module.createBinary(BinaryOp.GtI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.GtI64\n                : BinaryOp.GtI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.createBinary(BinaryOp.GtI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.GtU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.GtU64\n                : BinaryOp.GtU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.GtU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.GtF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.GtF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.LESSTHAN_EQUALS: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.LE);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n        rightType = this.currentType;\n        if (commonType = Type.commonCompatible(leftType, rightType, true)) {\n          leftExpr = this.convertExpression(\n            leftExpr,\n            leftType,\n            leftType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            left\n          );\n          rightExpr = this.convertExpression(\n            rightExpr,\n            rightType,\n            rightType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \"<=\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.createUnreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            expr = module.createBinary(BinaryOp.LeI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.LeI64\n                : BinaryOp.LeI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.createBinary(BinaryOp.LeI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.LeU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.LeU64\n                : BinaryOp.LeU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.LeU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.LeF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.LeF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.GREATERTHAN_EQUALS: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.GE);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n        rightType = this.currentType;\n        if (commonType = Type.commonCompatible(leftType, rightType, true)) {\n          leftExpr = this.convertExpression(\n            leftExpr,\n            leftType,\n            leftType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            left\n          );\n          rightExpr = this.convertExpression(\n            rightExpr,\n            rightType,\n            rightType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \">=\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.createUnreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            expr = module.createBinary(BinaryOp.GeI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.GeI64\n                : BinaryOp.GeI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.createBinary(BinaryOp.GeI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.GeU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.GeU64\n                : BinaryOp.GeU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.GeU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.GeF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.GeF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n\n      case Token.EQUALS_EQUALS_EQUALS:\n      case Token.EQUALS_EQUALS: {\n\n        // NOTE that this favors correctness, in terms of emitting a binary expression, over\n        // checking for a possible use of unary EQZ. while the most classic of all optimizations,\n        // that's not what the source told us to do. for reference, `!left` emits unary EQZ.\n\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n         // check operator overload\n        if (operator == Token.EQUALS_EQUALS && this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.EQ);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          // still allow '==' with references\n        }\n\n        rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n        rightType = this.currentType;\n        if (commonType = Type.commonCompatible(leftType, rightType, false)) {\n          leftExpr = this.convertExpression(\n            leftExpr,\n            leftType,\n            leftType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            left\n          );\n          rightExpr = this.convertExpression(\n            rightExpr,\n            rightType,\n            rightType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, operatorTokenToString(expression.operator), leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.createUnreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.EqI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.EqI64\n                : BinaryOp.EqI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.EqI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.EqF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.EqF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.EXCLAMATION_EQUALS_EQUALS:\n      case Token.EXCLAMATION_EQUALS: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n         // check operator overload\n        if (operator == Token.EXCLAMATION_EQUALS && this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.NE);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          // still allow '!=' with references\n        }\n\n        rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n        rightType = this.currentType;\n        if (commonType = Type.commonCompatible(leftType, rightType, false)) {\n          leftExpr = this.convertExpression(\n            leftExpr,\n            leftType,\n            leftType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            left\n          );\n          rightExpr = this.convertExpression(\n            rightExpr,\n            rightType,\n            rightType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, operatorTokenToString(expression.operator), leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.createUnreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.NeI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.NeI64\n                : BinaryOp.NeI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.NeI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.NeF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.NeF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.EQUALS: {\n        return this.compileAssignment(left, right, contextualType);\n      }\n      case Token.PLUS_EQUALS: compound = true;\n      case Token.PLUS: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.ADD);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\n        } else {\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n          rightType = this.currentType;\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(\n              leftExpr,\n              leftType,\n              leftType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              left\n            );\n            rightExpr = this.convertExpression(\n              rightExpr,\n              rightType,\n              rightType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"+\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.createUnreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:   // addition might overflow\n          case TypeKind.I16:  // ^\n          case TypeKind.U8:   // ^\n          case TypeKind.U16:  // ^\n          case TypeKind.BOOL: // ^\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.AddI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.AddI64\n                : BinaryOp.AddI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.AddI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.AddF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.AddF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.MINUS_EQUALS: compound = true;\n      case Token.MINUS: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.SUB);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n          rightType = this.currentType;\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(\n              leftExpr,\n              leftType,\n              leftType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              left\n            );\n            rightExpr = this.convertExpression(\n              rightExpr,\n              rightType,\n              rightType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"-\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.createUnreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:   // subtraction might overflow\n          case TypeKind.I16:  // ^\n          case TypeKind.U8:   // ^\n          case TypeKind.U16:  // ^\n          case TypeKind.BOOL: // ^\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.SubI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.SubI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.SubF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.SubF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.ASTERISK_EQUALS: compound = true;\n      case Token.ASTERISK: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.MUL);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        if (compound) {\n          leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType);\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.WRAP);\n        } else {\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n          rightType = this.currentType;\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(\n              leftExpr,\n              leftType,\n              leftType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              left\n            );\n            rightExpr = this.convertExpression(\n              rightExpr,\n              rightType,\n              rightType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"*\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.createUnreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL:\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.MulI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.MulI64\n                : BinaryOp.MulI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.MulI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.MulF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.MulF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.ASTERISK_ASTERISK_EQUALS: compound = true;\n      case Token.ASTERISK_ASTERISK: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.POW);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        let instance: Function | null;\n\n        // Mathf.pow if lhs is f32 (result is f32)\n        if (this.currentType.kind == TypeKind.F32) {\n          rightExpr = this.compileExpression(right, Type.f32, ConversionKind.IMPLICIT, WrapMode.NONE);\n          rightType = this.currentType;\n          if (!(instance = this.f32PowInstance)) {\n            let namespace = this.program.elementsLookup.get(\"Mathf\");\n            if (!namespace) {\n              this.error(\n                DiagnosticCode.Cannot_find_name_0,\n                expression.range, \"Mathf\"\n              );\n              expr = module.createUnreachable();\n              break;\n            }\n            let prototype = namespace.members ? namespace.members.get(\"pow\") : null;\n            if (!prototype) {\n              this.error(\n                DiagnosticCode.Cannot_find_name_0,\n                expression.range, \"Mathf.pow\"\n              );\n              expr = module.createUnreachable();\n              break;\n            }\n            assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n            this.f32PowInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n          }\n\n        // Math.pow otherwise (result is f64)\n        // TODO: should the result be converted back?\n        } else {\n          leftExpr = this.convertExpression(\n            leftExpr,\n            this.currentType,\n            Type.f64,\n            ConversionKind.IMPLICIT,\n            WrapMode.NONE,\n            left\n          );\n          leftType = this.currentType;\n          rightExpr = this.compileExpression(\n            right,\n            Type.f64,\n            ConversionKind.IMPLICIT,\n            WrapMode.NONE\n          );\n          rightType = this.currentType;\n          if (!(instance = this.f64PowInstance)) {\n            let namespace = this.program.elementsLookup.get(\"Math\");\n            if (!namespace) {\n              this.error(\n                DiagnosticCode.Cannot_find_name_0,\n                expression.range, \"Math\"\n              );\n              expr = module.createUnreachable();\n              break;\n            }\n            let prototype = namespace.members ? namespace.members.get(\"pow\") : null;\n            if (!prototype) {\n              this.error(\n                DiagnosticCode.Cannot_find_name_0,\n                expression.range, \"Math.pow\"\n              );\n              expr = module.createUnreachable();\n              break;\n            }\n            assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n            this.f64PowInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n          }\n        }\n        if (!(instance && this.compileFunction(instance))) {\n          expr = module.createUnreachable();\n        } else {\n          expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ]);\n        }\n        break;\n      }\n      case Token.SLASH_EQUALS: compound = true;\n      case Token.SLASH: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.DIV);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        if (compound) {\n          leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType);\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.WRAP);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n          rightType = this.currentType;\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(\n              leftExpr,\n              leftType,\n              leftType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.WRAP, // !\n              left\n            );\n            rightExpr = this.convertExpression(\n              rightExpr,\n              rightType,\n              rightType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.WRAP, // !\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"/\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.createUnreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:  // signed div on signed small integers might overflow, e.g. -128/-1\n          case TypeKind.I16: // ^\n          case TypeKind.I32: {\n            expr = module.createBinary(BinaryOp.DivI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.DivI64\n                : BinaryOp.DivI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.createBinary(BinaryOp.DivI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.DivU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.DivU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.DivU64\n                : BinaryOp.DivU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.DivU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.DivF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.DivF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.PERCENT_EQUALS: compound = true;\n      case Token.PERCENT: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.REM);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        if (compound) {\n          leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType);\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.WRAP);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n          rightType = this.currentType;\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(\n              leftExpr,\n              leftType,\n              leftType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.WRAP, // !\n              left\n            );\n            rightExpr = this.convertExpression(\n              rightExpr,\n              rightType,\n              rightType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.WRAP, // !\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"%\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.createUnreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16: {\n            expr = module.createBinary(BinaryOp.RemI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I32: {\n            expr = module.createBinary(BinaryOp.RemI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.RemI64\n                : BinaryOp.RemI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.createBinary(BinaryOp.RemI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.RemU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.RemU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.RemU64\n                : BinaryOp.RemU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.RemU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            let instance = this.f32ModInstance;\n            if (!instance) {\n              let namespace = this.program.elementsLookup.get(\"Mathf\");\n              if (!namespace) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"Mathf\"\n                );\n                expr = module.createUnreachable();\n                break;\n              }\n              let prototype = namespace.members ? namespace.members.get(\"mod\") : null;\n              if (!prototype) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"Mathf.mod\"\n                );\n                expr = module.createUnreachable();\n                break;\n              }\n              assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n              this.f32ModInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n            }\n            if (!(instance && this.compileFunction(instance))) {\n              expr = module.createUnreachable();\n            } else {\n              expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ]);\n            }\n            break;\n          }\n          case TypeKind.F64: {\n            let instance = this.f64ModInstance;\n            if (!instance) {\n              let namespace = this.program.elementsLookup.get(\"Math\");\n              if (!namespace) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"Math\"\n                );\n                expr = module.createUnreachable();\n                break;\n              }\n              let prototype = namespace.members ? namespace.members.get(\"mod\") : null;\n              if (!prototype) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"Math.mod\"\n                );\n                expr = module.createUnreachable();\n                break;\n              }\n              assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n              this.f64ModInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n            }\n            if (!(instance && this.compileFunction(instance))) {\n              expr = module.createUnreachable();\n            } else {\n              expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ]);\n            }\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.LESSTHAN_LESSTHAN_EQUALS: compound = true;\n      case Token.LESSTHAN_LESSTHAN: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHL);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\n        rightType = this.currentType;\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL:\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.ShlI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.ShlI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.ShlI64\n                : BinaryOp.ShlI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\n            );\n            return module.createUnreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.GREATERTHAN_GREATERTHAN_EQUALS: compound = true;\n      case Token.GREATERTHAN_GREATERTHAN: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHR);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType); // must clear garbage bits\n        rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.WRAP);\n        rightType = this.currentType;\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16: {\n            expr = module.createBinary(BinaryOp.ShrI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I32: {\n            expr = module.createBinary(BinaryOp.ShrI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.createBinary(BinaryOp.ShrI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.ShrI64\n                : BinaryOp.ShrI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.ShrU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.ShrU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.ShrU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.ShrU64\n                : BinaryOp.ShrU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\n            );\n            return module.createUnreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS: compound = true;\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHR_U);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType); // must clear garbage bits\n        rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\n        rightType = this.currentType;\n        switch (this.currentType.kind) {\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: { // assumes that unsigned shr on unsigned small integers does not overflow\n            expr = module.createBinary(BinaryOp.ShrU32, leftExpr, rightExpr);\n          }\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.ShrU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.ShrU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.ShrU64\n                : BinaryOp.ShrU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\n            );\n            return module.createUnreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.AMPERSAND_EQUALS: compound = true;\n      case Token.AMPERSAND: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overloadd\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_AND);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n          rightType = this.currentType;\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(\n              leftExpr,\n              leftType,\n              leftType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              left\n            );\n            rightExpr = this.convertExpression(\n              rightExpr,\n              rightType,\n              rightType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"&\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.createUnreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL:\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.AndI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.AndI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.AndI64\n                : BinaryOp.AndI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\n            );\n            return module.createUnreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.BAR_EQUALS: compound = true;\n      case Token.BAR: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_OR);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n          rightType = this.currentType;\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(\n              leftExpr,\n              leftType,\n              leftType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              left\n            );\n            rightExpr = this.convertExpression(\n              rightExpr,\n              rightType,\n              rightType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"|\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.createUnreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.OrI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.OrI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.OrI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.OrI64\n                : BinaryOp.OrI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\n            );\n            return module.createUnreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.CARET_EQUALS: compound = true;\n      case Token.CARET: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_XOR);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n          rightType = this.currentType;\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(\n              leftExpr,\n              leftType,\n              leftType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              left\n            );\n            rightExpr = this.convertExpression(\n              rightExpr,\n              rightType,\n              rightType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"^\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.createUnreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.XorI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.XorI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.XorI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.XorI64\n                : BinaryOp.XorI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\n            );\n            return module.createUnreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n\n      // logical (no overloading)\n\n      case Token.AMPERSAND_AMPERSAND: { // left && right\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n        rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\n        rightType = this.currentType;\n\n        // simplify if cloning left without side effects is possible\n        if (expr = module.cloneExpression(leftExpr, true, 0)) {\n          this.makeIsTrueish(leftExpr, this.currentType);\n          expr = module.createIf(\n            this.makeIsTrueish(leftExpr, this.currentType),\n            rightExpr,\n            expr\n          );\n\n        // if not possible, tee left to a temp. local\n        } else {\n          let flow = this.currentFunction.flow;\n          let tempLocal = this.currentFunction.getAndFreeTempLocal(\n            this.currentType,\n            !flow.canOverflow(leftExpr, this.currentType)\n          );\n          expr = module.createIf(\n            this.makeIsTrueish(\n              module.createTeeLocal(tempLocal.index, leftExpr),\n              this.currentType\n            ),\n            rightExpr,\n            module.createGetLocal(\n              assert(tempLocal).index, // to be sure\n              this.currentType.toNativeType()\n            )\n          );\n        }\n        break;\n      }\n      case Token.BAR_BAR: { // left || right\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n        rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\n        rightType = this.currentType;\n\n        // simplify if cloning left without side effects is possible\n        if (expr = this.module.cloneExpression(leftExpr, true, 0)) {\n          expr = this.module.createIf(\n            this.makeIsTrueish(leftExpr, this.currentType),\n            expr,\n            rightExpr\n          );\n\n        // if not possible, tee left to a temp. local\n        } else {\n          let flow = this.currentFunction.flow;\n          let tempLocal = this.currentFunction.getAndFreeTempLocal(\n            this.currentType,\n            !flow.canOverflow(leftExpr, this.currentType)\n          );\n          expr = module.createIf(\n            this.makeIsTrueish(\n              module.createTeeLocal(tempLocal.index, leftExpr),\n              this.currentType\n            ),\n            module.createGetLocal(\n              assert(tempLocal).index, // to be sure\n              this.currentType.toNativeType()\n            ),\n            rightExpr\n          );\n        }\n        break;\n      }\n      default: {\n        assert(false);\n        expr = this.module.createUnreachable();\n      }\n    }\n    return compound\n      ? this.compileAssignmentWithValue(left, expr, contextualType != Type.void)\n      : expr;\n  }\n\n  compileUnaryOverload(\n    operatorInstance: Function,\n    value: Expression,\n    valueExpr: ExpressionRef,\n    reportNode: Node\n  ): ExpressionRef {\n    var argumentExpressions: Expression[];\n    var thisArg: ExpressionRef = 0;\n    if (operatorInstance.is(CommonFlags.INSTANCE)) {\n      thisArg = valueExpr;  // can reuse the previously evaluated expr as the this value here\n      argumentExpressions = [];\n    } else {\n      argumentExpressions = [ value ]; // annotated type might differ -> recompile\n    }\n    return this.compileCallDirect(\n      operatorInstance,\n      argumentExpressions,\n      reportNode,\n      thisArg,\n      operatorInstance.hasDecorator(DecoratorFlags.INLINE)\n    );\n  }\n\n  compileBinaryOverload(\n    operatorInstance: Function,\n    left: Expression,\n    leftExpr: ExpressionRef,\n    right: Expression,\n    reportNode: Node\n  ): ExpressionRef {\n    var argumentExpressions: Expression[];\n    var thisArg: ExpressionRef = 0;\n    if (operatorInstance.is(CommonFlags.INSTANCE)) {\n      let parent = assert(operatorInstance.parent);\n      assert(parent.kind == ElementKind.CLASS);\n      thisArg = leftExpr; // can reuse the previously evaluated leftExpr as the this value here\n      argumentExpressions = [ right ];\n    } else {\n      argumentExpressions = [ left, right ]; // annotated type of LHS might differ -> recompile\n    }\n    var ret = this.compileCallDirect(\n      operatorInstance,\n      argumentExpressions,\n      reportNode,\n      thisArg,\n      operatorInstance.hasDecorator(DecoratorFlags.INLINE)\n    );\n    return ret;\n  }\n\n  compileAssignment(expression: Expression, valueExpression: Expression, contextualType: Type): ExpressionRef {\n    var program = this.program;\n    var resolver = program.resolver;\n    var currentFunction = this.currentFunction;\n    var target = resolver.resolveExpression(expression, currentFunction); // reports\n    if (!target) return this.module.createUnreachable();\n\n    // to compile just the value, we need to know the target's type\n    var targetType: Type;\n    switch (target.kind) {\n      case ElementKind.GLOBAL: {\n        if (!this.compileGlobal(<Global>target)) { // reports; not yet compiled if a static field compiled as a global\n          return this.module.createUnreachable();\n        }\n        assert((<Global>target).type != Type.void); // compileGlobal must guarantee this\n        // fall-through\n      }\n      case ElementKind.LOCAL:\n      case ElementKind.FIELD: {\n        targetType = (<VariableLikeElement>target).type;\n        break;\n      }\n      case ElementKind.PROPERTY: {\n        let setterPrototype = (<Property>target).setterPrototype;\n        if (setterPrototype) {\n          let instance = this.resolver.resolveFunction(setterPrototype, null);\n          if (!instance) return this.module.createUnreachable();\n          assert(instance.signature.parameterTypes.length == 1); // parser must guarantee this\n          targetType = instance.signature.parameterTypes[0];\n          break;\n        }\n        this.error(\n          DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n          expression.range, (<Property>target).internalName\n        );\n        return this.module.createUnreachable();\n      }\n      case ElementKind.CLASS: {\n        if (resolver.currentElementExpression) { // indexed access\n          let isUnchecked = currentFunction.flow.is(FlowFlags.UNCHECKED_CONTEXT);\n          let indexedSet = (<Class>target).lookupOverload(OperatorKind.INDEXED_SET, isUnchecked);\n          if (!indexedSet) {\n            let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\n            if (!indexedGet) {\n              this.error(\n                DiagnosticCode.Index_signature_is_missing_in_type_0,\n                expression.range, (<Class>target).internalName\n              );\n            } else {\n              this.error(\n                DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\n                expression.range, (<Class>target).internalName\n              );\n            }\n            return this.module.createUnreachable();\n          }\n          assert(indexedSet.signature.parameterTypes.length == 2); // parser must guarantee this\n          targetType = indexedSet.signature.parameterTypes[1];    // 2nd parameter is the element\n          break;\n        }\n        // fall-through\n      }\n      default: {\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          expression.range\n        );\n        return this.module.createUnreachable();\n      }\n    }\n\n    // compile the value and do the assignment\n    assert(targetType != Type.void);\n    var valueExpr = this.compileExpression(valueExpression, targetType, ConversionKind.IMPLICIT, WrapMode.NONE);\n    return this.compileAssignmentWithValue(\n      expression,\n      valueExpr,\n      contextualType != Type.void\n    );\n  }\n\n  compileAssignmentWithValue(\n    expression: Expression,\n    valueWithCorrectType: ExpressionRef,\n    tee: bool = false\n  ): ExpressionRef {\n    var module = this.module;\n    var target = this.resolver.resolveExpression(expression, this.currentFunction); // reports\n    if (!target) return module.createUnreachable();\n\n    switch (target.kind) {\n      case ElementKind.LOCAL: {\n        let type = (<Local>target).type;\n        assert(type != Type.void);\n        this.currentType = tee ? type : Type.void;\n        if ((<Local>target).is(CommonFlags.CONST)) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            expression.range, target.internalName\n          );\n          return module.createUnreachable();\n        }\n        let flow = this.currentFunction.flow;\n        if (type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\n          flow.setLocalWrapped((<Local>target).index, !flow.canOverflow(valueWithCorrectType, type));\n        }\n        return tee\n          ? module.createTeeLocal((<Local>target).index, valueWithCorrectType)\n          : module.createSetLocal((<Local>target).index, valueWithCorrectType);\n      }\n      case ElementKind.GLOBAL: {\n        if (!this.compileGlobal(<Global>target)) return module.createUnreachable();\n        let type = (<Global>target).type;\n        assert(type != Type.void);\n        this.currentType = tee ? type : Type.void;\n        if ((<Local>target).is(CommonFlags.CONST)) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            expression.range,\n            target.internalName\n          );\n          return module.createUnreachable();\n        }\n        valueWithCorrectType = this.ensureSmallIntegerWrap(valueWithCorrectType, type); // guaranteed\n        if (tee) {\n          let nativeType = type.toNativeType();\n          let internalName = target.internalName;\n          return module.createBlock(null, [ // emulated teeGlobal\n            module.createSetGlobal(internalName, valueWithCorrectType),\n            module.createGetGlobal(internalName, nativeType)\n          ], nativeType);\n        } else {\n          return module.createSetGlobal(target.internalName, valueWithCorrectType);\n        }\n      }\n      case ElementKind.FIELD: {\n        const declaration = (<Field>target).declaration;\n        if (\n          (<Field>target).is(CommonFlags.READONLY) &&\n          !(\n            this.currentFunction.is(CommonFlags.CONSTRUCTOR) ||\n            declaration == null ||\n            declaration.initializer != null\n          )\n        ) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            expression.range, (<Field>target).internalName\n          );\n          return module.createUnreachable();\n        }\n        let thisExpression = assert(this.resolver.currentThisExpression);\n        let thisExpr = this.compileExpressionRetainType(\n          thisExpression,\n          this.options.usizeType,\n          WrapMode.NONE\n        );\n        let type = (<Field>target).type;\n        this.currentType = tee ? type : Type.void;\n        let nativeType = type.toNativeType();\n        if (type.kind == TypeKind.BOOL) {\n          // make sure bools are wrapped (usually are) when storing as 8 bits\n          valueWithCorrectType = this.ensureSmallIntegerWrap(valueWithCorrectType, type);\n        }\n        if (tee) {\n          let currentFunction = this.currentFunction;\n          let flow = currentFunction.flow;\n          let tempLocal = currentFunction.getAndFreeTempLocal(\n            type,\n            !flow.canOverflow(valueWithCorrectType, type)\n          );\n          let tempLocalIndex = tempLocal.index;\n          // TODO: simplify if valueWithCorrectType has no side effects\n          // TODO: call __gc_link here if a GC is present\n          return module.createBlock(null, [\n            module.createSetLocal(tempLocalIndex, valueWithCorrectType),\n            module.createStore(\n              type.byteSize,\n              thisExpr,\n              module.createGetLocal(tempLocalIndex, nativeType),\n              nativeType,\n              (<Field>target).memoryOffset\n            ),\n            module.createGetLocal(tempLocalIndex, nativeType)\n          ], nativeType);\n        } else {\n          // TODO: call __gc_link here if a GC is present\n          return module.createStore(\n            type.byteSize,\n            thisExpr,\n            valueWithCorrectType,\n            nativeType,\n            (<Field>target).memoryOffset\n          );\n        }\n      }\n      case ElementKind.PROPERTY: {\n        let setterPrototype = (<Property>target).setterPrototype;\n        if (setterPrototype) {\n          let setterInstance = this.resolver.resolveFunction(setterPrototype, null);\n          if (!setterInstance) return module.createUnreachable();\n\n          // call just the setter if the return value isn't of interest\n          if (!tee) {\n            if (setterInstance.is(CommonFlags.INSTANCE)) {\n              let thisExpression = assert(this.resolver.currentThisExpression);\n              let thisExpr = this.compileExpressionRetainType(\n                thisExpression,\n                this.options.usizeType,\n                WrapMode.NONE\n              );\n              return this.makeCallDirect(setterInstance, [ thisExpr, valueWithCorrectType ]);\n            } else {\n              return this.makeCallDirect(setterInstance, [ valueWithCorrectType ]);\n            }\n          }\n\n          // otherwise call the setter first, then the getter\n          let getterPrototype = (<Property>target).getterPrototype;\n          assert(getterPrototype != null); // must have one if there is a setter\n          let getterInstance = this.resolver.resolveFunction(<FunctionPrototype>getterPrototype, null);\n          if (!getterInstance) return module.createUnreachable();\n          let returnType = getterInstance.signature.returnType;\n          let nativeReturnType = returnType.toNativeType();\n          if (setterInstance.is(CommonFlags.INSTANCE)) {\n            let thisExpression = assert(this.resolver.currentThisExpression);\n            let thisExpr = this.compileExpressionRetainType(\n              thisExpression,\n              this.options.usizeType,\n              WrapMode.NONE\n            );\n            let tempLocal = this.currentFunction.getAndFreeTempLocal(returnType, false);\n            let tempLocalIndex = tempLocal.index;\n            return module.createBlock(null, [\n              this.makeCallDirect(setterInstance, [ // set and remember the target\n                module.createTeeLocal(tempLocalIndex, thisExpr),\n                valueWithCorrectType\n              ]),\n              this.makeCallDirect(getterInstance, [ // get from remembered target\n                module.createGetLocal(tempLocalIndex, nativeReturnType)\n              ])\n            ], nativeReturnType);\n          } else {\n            // note that this must be performed here because `resolved` is shared\n            return module.createBlock(null, [\n              this.makeCallDirect(setterInstance, [ valueWithCorrectType ]),\n              this.makeCallDirect(getterInstance)\n            ], nativeReturnType);\n          }\n        } else {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            expression.range, target.internalName\n          );\n        }\n        return module.createUnreachable();\n      }\n      case ElementKind.CLASS: {\n        let elementExpression = this.resolver.currentElementExpression;\n        if (elementExpression) {\n          let isUnchecked = this.currentFunction.flow.is(FlowFlags.UNCHECKED_CONTEXT);\n          let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\n          if (!indexedGet) {\n            this.error(\n              DiagnosticCode.Index_signature_is_missing_in_type_0,\n              expression.range, target.internalName\n            );\n            return module.createUnreachable();\n          }\n          let indexedSet = (<Class>target).lookupOverload(OperatorKind.INDEXED_SET, isUnchecked);\n          if (!indexedSet) {\n            this.error(\n              DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\n              expression.range, target.internalName\n            );\n            this.currentType = tee ? indexedGet.signature.returnType : Type.void;\n            return module.createUnreachable();\n          }\n          let targetType = (<Class>target).type;\n          let thisExpression = assert(this.resolver.currentThisExpression);\n          let thisExpr = this.compileExpressionRetainType(\n            thisExpression,\n            this.options.usizeType,\n            WrapMode.NONE\n          );\n          let elementExpr = this.compileExpression(\n            elementExpression,\n            Type.i32,\n            ConversionKind.IMPLICIT,\n            WrapMode.NONE\n          );\n          if (tee) {\n            let currentFunction = this.currentFunction;\n            let tempLocalTarget = currentFunction.getTempLocal(targetType, false);\n            let tempLocalElement = currentFunction.getAndFreeTempLocal(this.currentType, false);\n            let returnType = indexedGet.signature.returnType;\n            this.currentFunction.freeTempLocal(tempLocalTarget);\n            return module.createBlock(null, [\n              this.makeCallDirect(indexedSet, [\n                module.createTeeLocal(tempLocalTarget.index, thisExpr),\n                module.createTeeLocal(tempLocalElement.index, elementExpr),\n                valueWithCorrectType\n              ]),\n              this.makeCallDirect(indexedGet, [\n                module.createGetLocal(tempLocalTarget.index, tempLocalTarget.type.toNativeType()),\n                module.createGetLocal(tempLocalElement.index, tempLocalElement.type.toNativeType())\n              ])\n            ], returnType.toNativeType());\n          } else {\n            return this.makeCallDirect(indexedSet, [\n              thisExpr,\n              elementExpr,\n              valueWithCorrectType\n            ]);\n          }\n        }\n        // fall-through\n      }\n    }\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      expression.range\n    );\n    return module.createUnreachable();\n  }\n\n  compileCallExpression(expression: CallExpression, contextualType: Type): ExpressionRef {\n    var module = this.module;\n    var currentFunction = this.currentFunction;\n    var target = this.resolver.resolveExpression(expression.expression, currentFunction); // reports\n    if (!target) return module.createUnreachable();\n\n    var signature: Signature | null;\n    var indexArg: ExpressionRef;\n    switch (target.kind) {\n\n      // direct call: concrete function\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        let prototype = <FunctionPrototype>target;\n        let typeArguments = expression.typeArguments;\n\n        // builtins handle present respectively omitted type arguments on their own\n        if (prototype.hasDecorator(DecoratorFlags.BUILTIN)) {\n          return this.compileCallExpressionBuiltin(prototype, expression, contextualType);\n        }\n\n        let instance: Function | null = null;\n\n        // resolve generic call if type arguments have been provided\n        if (typeArguments) {\n          if (!prototype.is(CommonFlags.GENERIC)) {\n            this.error(\n              DiagnosticCode.Type_0_is_not_generic,\n              expression.expression.range, prototype.internalName\n            );\n            return module.createUnreachable();\n          }\n          instance = this.resolver.resolveFunctionInclTypeArguments(\n            prototype,\n            typeArguments,\n            this.currentFunction.flow.contextualTypeArguments,\n            expression\n          );\n\n        // infer generic call if type arguments have been omitted\n        } else if (prototype.is(CommonFlags.GENERIC)) {\n          let inferredTypes = new Map<string,Type | null>();\n          let typeParameters = assert(prototype.declaration.typeParameters);\n          let numTypeParameters = typeParameters.length;\n          for (let i = 0; i < numTypeParameters; ++i) {\n            inferredTypes.set(typeParameters[i].name.text, null);\n          }\n          // let numInferred = 0;\n          let parameterTypes = prototype.declaration.signature.parameters;\n          let numParameterTypes = parameterTypes.length;\n          let argumentExpressions = expression.arguments;\n          let numArguments = argumentExpressions.length;\n          let argumentExprs = new Array<ExpressionRef>(numArguments);\n          for (let i = 0; i < numParameterTypes; ++i) {\n            let typeNode = parameterTypes[i].type;\n            let name = typeNode.kind == NodeKind.TYPE ? (<TypeNode>typeNode).name.text : null;\n            let argumentExpression = i < numArguments\n              ? argumentExpressions[i]\n              : prototype.declaration.signature.parameters[i].initializer;\n            if (!argumentExpression) { // missing initializer -> too few arguments\n              this.error(\n                DiagnosticCode.Expected_0_arguments_but_got_1,\n                expression.range, numParameterTypes.toString(10), numArguments.toString(10)\n              );\n              return module.createUnreachable();\n            }\n            if (name !== null && inferredTypes.has(name)) {\n              let inferredType = inferredTypes.get(name);\n              if (inferredType) {\n                argumentExprs[i] = this.compileExpressionRetainType(argumentExpression, inferredType, WrapMode.NONE);\n                let commonType: Type | null;\n                if (!(commonType = Type.commonCompatible(inferredType, this.currentType, true))) {\n                  if (!(commonType = Type.commonCompatible(inferredType, this.currentType, false))) {\n                    this.error(\n                      DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n                      parameterTypes[i].type.range, this.currentType.toString(), inferredType.toString()\n                    );\n                    return module.createUnreachable();\n                  }\n                }\n                inferredType = commonType;\n              } else {\n                argumentExprs[i] = this.compileExpressionRetainType(argumentExpression, Type.i32, WrapMode.NONE);\n                inferredType = this.currentType;\n                // ++numInferred;\n              }\n              inferredTypes.set(name, inferredType);\n            } else {\n              let concreteType = this.resolver.resolveType(\n                parameterTypes[i].type,\n                this.currentFunction.flow.contextualTypeArguments\n              );\n              if (!concreteType) return module.createUnreachable();\n              argumentExprs[i] = this.compileExpression(\n                argumentExpression,\n                concreteType,\n                ConversionKind.IMPLICIT,\n                WrapMode.NONE\n              );\n            }\n          }\n          let resolvedTypeArguments = new Array<Type>(numTypeParameters);\n          for (let i = 0; i < numTypeParameters; ++i) {\n            let inferredType = assert(inferredTypes.get(typeParameters[i].name.text)); // TODO\n            resolvedTypeArguments[i] = inferredType;\n          }\n          instance = this.resolver.resolveFunction(\n            prototype,\n            resolvedTypeArguments,\n            this.currentFunction.flow.contextualTypeArguments\n          );\n          if (!instance) return this.module.createUnreachable();\n          return this.makeCallDirect(instance, argumentExprs);\n          // TODO: this skips inlining because inlining requires compiling its temporary locals in\n          // the scope of the inlined flow. might need another mechanism to lock temp. locals early,\n          // so inlining can be performed in `makeCallDirect` instead?\n\n        // otherwise resolve the non-generic call as usual\n        } else {\n          instance = this.resolver.resolveFunction(\n            prototype,\n            null,\n            this.currentFunction.flow.contextualTypeArguments\n          );\n        }\n        if (!instance) return this.module.createUnreachable();\n\n        // compile 'this' expression if an instance method\n        let thisExpr: ExpressionRef = 0;\n        if (instance.is(CommonFlags.INSTANCE)) {\n          thisExpr = this.compileExpressionRetainType(\n            assert(this.resolver.currentThisExpression),\n            this.options.usizeType,\n            WrapMode.NONE\n          );\n        }\n\n        return this.compileCallDirect(\n          instance,\n          expression.arguments,\n          expression,\n          thisExpr,\n          instance.hasDecorator(DecoratorFlags.INLINE)\n        );\n      }\n\n      // indirect call: index argument with signature (non-generic, can't be inlined)\n      case ElementKind.LOCAL: {\n        if (signature = (<Local>target).type.signatureReference) {\n          if ((<Local>target).is(CommonFlags.INLINED)) {\n            indexArg = module.createI32(i64_low((<Local>target).constantIntegerValue));\n          } else {\n            indexArg = module.createGetLocal((<Local>target).index, NativeType.I32);\n          }\n          break;\n        } else {\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            expression.range, (<Local>target).type.toString()\n          );\n          return module.createUnreachable();\n        }\n      }\n      case ElementKind.GLOBAL: {\n        if (signature = (<Global>target).type.signatureReference) {\n          indexArg = module.createGetGlobal((<Global>target).internalName, (<Global>target).type.toNativeType());\n          break;\n        } else {\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            expression.range, (<Global>target).type.toString()\n          );\n          return module.createUnreachable();\n        }\n      }\n      case ElementKind.FIELD: {\n        let type = (<Field>target).type;\n        if (signature = type.signatureReference) {\n          let thisExpression = assert(this.resolver.currentThisExpression);\n          let thisExpr = this.compileExpressionRetainType(\n            thisExpression,\n            this.options.usizeType,\n            WrapMode.NONE\n          );\n          indexArg = module.createLoad(\n            4,\n            false,\n            thisExpr,\n            NativeType.I32,\n            (<Field>target).memoryOffset\n          );\n          break;\n        } else {\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            expression.range, type.toString()\n          );\n          return module.createUnreachable();\n        }\n      }\n      case ElementKind.FUNCTION_TARGET: {\n        signature = (<FunctionTarget>target).signature;\n        indexArg = this.compileExpression(\n          expression.expression,\n          (<FunctionTarget>target).type,\n          ConversionKind.IMPLICIT,\n          WrapMode.NONE\n        );\n        break;\n      }\n\n      case ElementKind.PROPERTY: {\n        indexArg = this.compileGetter(<Property>target, expression.expression);\n        let type = this.currentType;\n        signature = type.signatureReference;\n        if (!signature) {\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            expression.range, type.toString()\n          );\n          return module.createUnreachable();\n        }\n        break;\n      }\n\n      // not supported\n      default: {\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          expression.range\n        );\n        return module.createUnreachable();\n      }\n    }\n    return this.compileCallIndirect(\n      signature,\n      indexArg,\n      expression.arguments,\n      expression\n    );\n  }\n\n  private compileCallExpressionBuiltin(\n    prototype: FunctionPrototype,\n    expression: CallExpression,\n    contextualType: Type\n  ): ExpressionRef {\n    var typeArguments: Type[] | null = null;\n\n    // builtins handle omitted type arguments on their own. if present, however, resolve them here\n    // and pass them to the builtin, even if it's still up to the builtin how to handle them.\n    var typeArgumentNodes = expression.typeArguments;\n    if (expression.typeArguments) {\n      if (!prototype.is(CommonFlags.GENERIC)) {\n        this.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          expression.range, prototype.internalName\n        );\n      }\n      typeArguments = this.resolver.resolveTypeArguments(\n        assert(prototype.declaration.typeParameters),\n        typeArgumentNodes,\n        this.currentFunction.flow.contextualTypeArguments,\n        expression\n      );\n    }\n\n    // now compile the builtin, which usually returns a block of code that replaces the call.\n    var expr = compileBuiltinCall(\n      this,\n      prototype,\n      typeArguments,\n      expression.arguments,\n      contextualType,\n      expression\n    );\n    if (!expr) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        expression.range\n      );\n      return this.module.createUnreachable();\n    }\n    return expr;\n  }\n\n  /**\n   * Checks that a call with the given number as arguments can be performed according to the\n   * specified signature.\n   */\n  checkCallSignature(\n    signature: Signature,\n    numArguments: i32,\n    hasThis: bool,\n    reportNode: Node\n  ): bool {\n\n    // cannot call an instance method without a `this` argument (TODO: `.call`?)\n    var thisType = signature.thisType;\n    if (hasThis != (thisType != null)) {\n      this.error(\n        DiagnosticCode.Operation_not_supported, // TODO: better message?\n        reportNode.range\n      );\n      return false;\n    }\n\n    // not yet implemented (TODO: maybe some sort of an unmanaged/lightweight array?)\n    var hasRest = signature.hasRest;\n    if (hasRest) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        reportNode.range\n      );\n      return false;\n    }\n\n    var minimum = signature.requiredParameters;\n    var maximum = signature.parameterTypes.length;\n\n    // must at least be called with required arguments\n    if (numArguments < minimum) {\n      this.error(\n        minimum < maximum\n          ? DiagnosticCode.Expected_at_least_0_arguments_but_got_1\n          : DiagnosticCode.Expected_0_arguments_but_got_1,\n        reportNode.range, minimum.toString(), numArguments.toString()\n      );\n      return false;\n    }\n\n    // must not be called with more than the maximum arguments\n    if (numArguments > maximum && !hasRest) {\n      this.error(\n        DiagnosticCode.Expected_0_arguments_but_got_1,\n        reportNode.range, maximum.toString(), numArguments.toString()\n      );\n      return false;\n    }\n\n    return true;\n  }\n\n  /** Compiles a direct call to a concrete function. */\n  compileCallDirect(\n    instance: Function,\n    argumentExpressions: Expression[],\n    reportNode: Node,\n    thisArg: ExpressionRef = 0,\n    inline: bool = false\n  ): ExpressionRef {\n    var numArguments = argumentExpressions.length;\n    var signature = instance.signature;\n\n    if (!this.checkCallSignature( // reports\n      signature,\n      numArguments,\n      thisArg != 0,\n      reportNode\n    )) {\n      return this.module.createUnreachable();\n    }\n\n    // Inline if explicitly requested\n    if (inline) {\n      assert(!instance.is(CommonFlags.TRAMPOLINE)); // doesn't make sense\n      if (this.currentInlineFunctions.includes(instance)) {\n        this.warning(\n          DiagnosticCode.Function_0_cannot_be_inlined_into_itself,\n          reportNode.range, instance.internalName\n        );\n      } else {\n        this.currentInlineFunctions.push(instance);\n        let expr = this.compileCallInlineUnchecked(instance, argumentExpressions, reportNode, thisArg);\n        this.currentInlineFunctions.pop();\n        return expr;\n      }\n    }\n\n    // Otherwise compile to just a call\n    var numArgumentsInclThis = thisArg ? numArguments + 1 : numArguments;\n    var operands = new Array<ExpressionRef>(numArgumentsInclThis);\n    var index = 0;\n    if (thisArg) {\n      operands[0] = thisArg;\n      index = 1;\n    }\n    var parameterTypes = signature.parameterTypes;\n    for (let i = 0; i < numArguments; ++i, ++index) {\n      operands[index] = this.compileExpression(\n        argumentExpressions[i],\n        parameterTypes[i],\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n    }\n    assert(index == numArgumentsInclThis);\n    return this.makeCallDirect(instance, operands);\n  }\n\n  // Depends on being pre-checked in compileCallDirect\n  private compileCallInlineUnchecked(\n    instance: Function,\n    argumentExpressions: Expression[],\n    reportNode: Node,\n    thisArg: ExpressionRef = 0\n  ): ExpressionRef {\n    var numArguments = argumentExpressions.length;\n    var signature = instance.signature;\n    var currentFunction = this.currentFunction;\n    var module = this.module;\n    var declaration = instance.prototype.declaration;\n\n    // Create an empty child flow with its own scope and mark it for inlining\n    var previousFlow = currentFunction.flow;\n    var returnLabel = instance.internalName + \"|inlined.\" + (instance.nextInlineId++).toString(10);\n    var returnType = instance.signature.returnType;\n    var flow = Flow.create(currentFunction);\n    flow.set(FlowFlags.INLINE_CONTEXT);\n    flow.returnLabel = returnLabel;\n    flow.returnType = returnType;\n    flow.contextualTypeArguments = instance.contextualTypeArguments;\n\n    // Convert provided call arguments to temporary locals. It is important that these are compiled\n    // here, with their respective locals being blocked. There is no 'makeCallInline'.\n    var body = [];\n    if (thisArg) {\n      let parent = assert(instance.parent);\n      assert(parent.kind == ElementKind.CLASS);\n      if (getExpressionId(thisArg) == ExpressionId.GetLocal) {\n        flow.addScopedLocalAlias(\n          getGetLocalIndex(thisArg),\n          (<Class>parent).type,\n          \"this\"\n        );\n      } else {\n        let thisLocal = flow.addScopedLocal((<Class>parent).type, \"this\", false);\n        body.push(\n          module.createSetLocal(thisLocal.index, thisArg)\n        );\n      }\n    }\n    var parameterTypes = signature.parameterTypes;\n    for (let i = 0; i < numArguments; ++i) {\n      let paramExpr = this.compileExpression(\n        argumentExpressions[i],\n        parameterTypes[i],\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      if (getExpressionId(paramExpr) == ExpressionId.GetLocal) {\n        flow.addScopedLocalAlias(\n          getGetLocalIndex(paramExpr),\n          parameterTypes[i],\n          signature.getParameterName(i)\n        );\n        // inherits wrap status\n      } else {\n        let argumentLocal = flow.addScopedLocal(\n          parameterTypes[i],\n          signature.getParameterName(i),\n          !flow.canOverflow(paramExpr, parameterTypes[i])\n        );\n        body.push(\n          module.createSetLocal(argumentLocal.index, paramExpr)\n        );\n      }\n    }\n\n    // Compile optional parameter initializers in the scope of the inlined flow\n    currentFunction.flow = flow;\n    var numParameters = signature.parameterTypes.length;\n    for (let i = numArguments; i < numParameters; ++i) {\n      let initExpr = this.compileExpression(\n        assert(declaration.signature.parameters[i].initializer),\n        parameterTypes[i],\n        ConversionKind.IMPLICIT,\n        WrapMode.WRAP\n      );\n      let argumentLocal = flow.addScopedLocal(\n        parameterTypes[i],\n        signature.getParameterName(i),\n        !flow.canOverflow(initExpr, parameterTypes[i])\n      );\n      body.push(\n        module.createSetLocal(argumentLocal.index, initExpr)\n      );\n    }\n\n    // Compile the called function's body in the scope of the inlined flow\n    var bodyStatement = assert(declaration.body);\n    if (bodyStatement.kind == NodeKind.BLOCK) {\n      let statements = (<BlockStatement>bodyStatement).statements;\n      for (let i = 0, k = statements.length; i < k; ++i) {\n        let stmt = this.compileStatement(statements[i]);\n        if (getExpressionId(stmt) != ExpressionId.Nop) {\n          body.push(stmt);\n          if (flow.isAny(FlowFlags.ANY_TERMINATING)) break;\n        }\n      }\n    } else {\n      body.push(this.compileStatement(bodyStatement));\n    }\n\n    // Free any new scoped locals and reset to the original flow\n    var scopedLocals = flow.scopedLocals;\n    if (scopedLocals) {\n      for (let scopedLocal of scopedLocals.values()) {\n        if (scopedLocal.is(CommonFlags.SCOPED)) { // otherwise an alias\n          currentFunction.freeTempLocal(scopedLocal);\n        }\n      }\n      flow.scopedLocals = null;\n    }\n    flow.finalize();\n    this.currentFunction.flow = previousFlow;\n    this.currentType = returnType;\n\n    // Check that all branches are terminated\n    if (returnType != Type.void && !flow.isAny(FlowFlags.ANY_TERMINATING)) {\n      this.error(\n        DiagnosticCode.A_function_whose_declared_type_is_not_void_must_return_a_value,\n        declaration.signature.returnType.range\n      );\n      return module.createUnreachable();\n    }\n    return module.createBlock(returnLabel, body, returnType.toNativeType());\n  }\n\n  /** Gets the trampoline for the specified function. */\n  ensureTrampoline(original: Function): Function {\n    // A trampoline is a function that takes a fixed amount of operands with some of them possibly\n    // being zeroed. It takes one additional argument denoting the number of actual operands\n    // provided to the call, and takes appropriate steps to initialize zeroed operands to their\n    // default values using the optional parameter initializers of the original function. Doing so\n    // allows calls to functions with optional parameters to circumvent the trampoline when all\n    // parameters are provided as a fast route, respectively setting up omitted operands in a proper\n    // context otherwise.\n    var trampoline = original.trampoline;\n    if (trampoline) return trampoline;\n\n    var originalSignature = original.signature;\n    var originalName = original.internalName;\n    var originalParameterTypes = originalSignature.parameterTypes;\n    var originalParameterDeclarations = original.prototype.declaration.signature.parameters;\n    var commonReturnType = originalSignature.returnType;\n    var commonThisType = originalSignature.thisType;\n    var isInstance = original.is(CommonFlags.INSTANCE);\n\n    // arguments excl. `this`, operands incl. `this`\n    var minArguments = originalSignature.requiredParameters;\n    var minOperands = minArguments;\n    var maxArguments = originalParameterTypes.length;\n    var maxOperands = maxArguments;\n    if (isInstance) {\n      ++minOperands;\n      ++maxOperands;\n    }\n    var numOptional = assert(maxOperands - minOperands);\n\n    var forwardedOperands = new Array<ExpressionRef>(minOperands);\n    var operandIndex = 0;\n\n    // forward `this` if applicable\n    var module = this.module;\n    if (isInstance) {\n      forwardedOperands[0] = module.createGetLocal(0, this.options.nativeSizeType);\n      operandIndex = 1;\n    }\n\n    // forward required arguments\n    for (let i = 0; i < minArguments; ++i, ++operandIndex) {\n      forwardedOperands[operandIndex] = module.createGetLocal(operandIndex, originalParameterTypes[i].toNativeType());\n    }\n    assert(operandIndex == minOperands);\n\n    // create the trampoline element\n    var trampolineSignature = new Signature(originalParameterTypes, commonReturnType, commonThisType);\n    var trampolineName = originalName + \"|trampoline\";\n    trampolineSignature.requiredParameters = maxArguments;\n    trampoline = new Function(\n      original.prototype,\n      trampolineName,\n      trampolineSignature,\n      original.parent,\n      original.contextualTypeArguments\n    );\n    trampoline.set(original.flags | CommonFlags.TRAMPOLINE | CommonFlags.COMPILED);\n    original.trampoline = trampoline;\n\n    // compile initializers of omitted arguments in scope of the trampoline function\n    // this is necessary because initializers might need additional locals and a proper this context\n    var previousFunction = this.currentFunction;\n    this.currentFunction = trampoline;\n\n    // create a br_table switching over the number of optional parameters provided\n    var numNames = numOptional + 1; // incl. outer block\n    var names = new Array<string>(numNames);\n    var ofN = \"of\" + numOptional.toString(10);\n    for (let i = 0; i < numNames; ++i) {\n      let label = i.toString(10) + ofN;\n      names[i] = label;\n    }\n    var body = module.createBlock(names[0], [\n      module.createBlock(\"outOfRange\", [\n        module.createSwitch(names, \"outOfRange\",\n          // condition is number of provided optional arguments, so subtract required arguments\n          minArguments\n            ? module.createBinary(\n                BinaryOp.SubI32,\n                module.createGetGlobal(\"~argc\", NativeType.I32),\n                module.createI32(minArguments)\n              )\n            : module.createGetGlobal(\"~argc\", NativeType.I32)\n        )\n      ]),\n      module.createUnreachable()\n    ]);\n    for (let i = 0; i < numOptional; ++i, ++operandIndex) {\n      let type = originalParameterTypes[minArguments + i];\n      let declaration = originalParameterDeclarations[minArguments + i];\n      let initializer = declaration.initializer;\n      let initExpr: ExpressionRef;\n      if (initializer) {\n        initExpr = module.createSetLocal(operandIndex,\n          this.compileExpression(\n            initializer,\n            type,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP\n          )\n        );\n      } else {\n        this.error(\n          DiagnosticCode.Optional_parameter_must_have_an_initializer,\n          declaration.range\n        );\n        initExpr = module.createUnreachable();\n      }\n      body = module.createBlock(names[i + 1], [\n        body,\n        initExpr,\n      ]);\n      forwardedOperands[operandIndex] = module.createGetLocal(operandIndex, type.toNativeType());\n    }\n    this.currentFunction = previousFunction;\n    assert(operandIndex == maxOperands);\n\n    var funcRef = module.addFunction(\n      trampolineName,\n      this.ensureFunctionType(\n        trampolineSignature.parameterTypes,\n        trampolineSignature.returnType,\n        trampolineSignature.thisType\n      ),\n      typesToNativeTypes(trampoline.additionalLocals),\n      module.createBlock(null, [\n        body,\n        module.createCall(\n          originalName,\n          forwardedOperands,\n          commonReturnType.toNativeType()\n        )\n      ], commonReturnType.toNativeType())\n    );\n    trampoline.finalize(module, funcRef);\n    return trampoline;\n  }\n\n  /** Makes sure that the argument count helper global is present and returns its name. */\n  private ensureArgcVar(): string {\n    var internalName = \"~argc\";\n    if (!this.argcVar) {\n      let module = this.module;\n      this.argcVar = module.addGlobal(\n        internalName,\n        NativeType.I32,\n        true,\n        module.createI32(0)\n      );\n    }\n    return internalName;\n  }\n\n  /** Makes sure that the argument count helper setter is present and returns its name. */\n  private ensureArgcSet(): string {\n    var internalName = \"~setargc\";\n    if (!this.argcSet) {\n      let module = this.module;\n      this.argcSet = module.addFunction(internalName,\n        this.ensureFunctionType([ Type.u32 ], Type.void),\n        null,\n        module.createSetGlobal(this.ensureArgcVar(),\n          module.createGetLocal(0, NativeType.I32)\n        )\n      );\n      module.addFunctionExport(internalName, \"_setargc\");\n    }\n    return internalName;\n  }\n\n  /** Creates a direct call to the specified function. */\n  makeCallDirect(\n    instance: Function,\n    operands: ExpressionRef[] | null = null\n  ): ExpressionRef {\n    var numOperands = operands ? operands.length : 0;\n    var numArguments = numOperands;\n    var minArguments = instance.signature.requiredParameters;\n    var minOperands = minArguments;\n    var maxArguments = instance.signature.parameterTypes.length;\n    var maxOperands = maxArguments;\n    if (instance.is(CommonFlags.INSTANCE)) {\n      ++minOperands;\n      ++maxOperands;\n      --numArguments;\n    }\n    assert(numOperands >= minOperands);\n\n    var module = this.module;\n    if (!this.compileFunction(instance)) return module.createUnreachable();\n    var returnType = instance.signature.returnType;\n    var isCallImport = instance.is(CommonFlags.MODULE_IMPORT);\n\n    // fill up omitted arguments with their initializers, if constant, otherwise with zeroes.\n    if (numOperands < maxOperands) {\n      if (!operands) {\n        operands = new Array(maxOperands);\n        operands.length = 0;\n      }\n      let parameterTypes = instance.signature.parameterTypes;\n      let parameterNodes = instance.prototype.declaration.signature.parameters;\n      let allOptionalsAreConstant = true;\n      for (let i = numArguments; i < maxArguments; ++i) {\n        let initializer = parameterNodes[i].initializer;\n        if (!(initializer !== null && nodeIsConstantValue(initializer.kind))) {\n          allOptionalsAreConstant = false;\n          break;\n        }\n      }\n      if (allOptionalsAreConstant) { // inline into the call\n        for (let i = numArguments; i < maxArguments; ++i) {\n          operands.push(\n            this.compileExpression(\n              <Expression>parameterNodes[i].initializer,\n              parameterTypes[i],\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE\n            )\n          );\n        }\n      } else { // otherwise fill up with zeroes and call the trampoline\n        for (let i = numArguments; i < maxArguments; ++i) {\n          operands.push(parameterTypes[i].toNativeZero(module));\n        }\n        if (!isCallImport) {\n          let original = instance;\n          instance = this.ensureTrampoline(instance);\n          if (!this.compileFunction(instance)) return module.createUnreachable();\n          instance.flow.flags = original.flow.flags;\n          this.program.instancesLookup.set(instance.internalName, instance); // so canOverflow can find it\n          let nativeReturnType = returnType.toNativeType();\n          this.currentType = returnType;\n          return module.createBlock(null, [\n            module.createSetGlobal(this.ensureArgcVar(), module.createI32(numArguments)),\n            module.createCall(instance.internalName, operands, nativeReturnType)\n          ], nativeReturnType);\n        }\n      }\n    }\n\n    // otherwise just call through\n    this.currentType = returnType;\n    return module.createCall(instance.internalName, operands, returnType.toNativeType());\n  }\n\n  /** Compiles an indirect call using an index argument and a signature. */\n  compileCallIndirect(\n    signature: Signature,\n    indexArg: ExpressionRef,\n    argumentExpressions: Expression[],\n    reportNode: Node,\n    thisArg: ExpressionRef = 0\n  ): ExpressionRef {\n    var numArguments = argumentExpressions.length;\n\n    if (!this.checkCallSignature( // reports\n      signature,\n      numArguments,\n      thisArg != 0,\n      reportNode\n    )) {\n      return this.module.createUnreachable();\n    }\n\n    var numArgumentsInclThis = thisArg ? numArguments + 1 : numArguments;\n    var operands = new Array<ExpressionRef>(numArgumentsInclThis);\n    var index = 0;\n    if (thisArg) {\n      operands[0] = thisArg;\n      index = 1;\n    }\n    var parameterTypes = signature.parameterTypes;\n    for (let i = 0; i < numArguments; ++i, ++index) {\n      operands[index] = this.compileExpression(\n        argumentExpressions[i],\n        parameterTypes[i],\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n    }\n    assert(index == numArgumentsInclThis);\n    return this.makeCallIndirect(signature, indexArg, operands);\n  }\n\n  /** Creates an indirect call to the function at `indexArg` in the function table. */\n  makeCallIndirect(\n    signature: Signature,\n    indexArg: ExpressionRef,\n    operands: ExpressionRef[] | null = null\n  ): ExpressionRef {\n    var numOperands = operands ? operands.length : 0;\n    var numArguments = numOperands;\n    var minArguments = signature.requiredParameters;\n    var minOperands = minArguments;\n    var maxArguments = signature.parameterTypes.length;\n    var maxOperands = maxArguments;\n    if (signature.thisType) {\n      ++minOperands;\n      ++maxOperands;\n      --numArguments;\n    }\n    assert(numOperands >= minOperands);\n\n    this.ensureFunctionType(signature.parameterTypes, signature.returnType, signature.thisType);\n    var module = this.module;\n\n    // fill up omitted arguments with zeroes\n    if (numOperands < maxOperands) {\n      if (!operands) {\n        operands = new Array(maxOperands);\n        operands.length = 0;\n      }\n      let parameterTypes = signature.parameterTypes;\n      for (let i = numArguments; i < maxArguments; ++i) {\n        operands.push(parameterTypes[i].toNativeZero(module));\n      }\n    }\n\n    var returnType = signature.returnType;\n    this.currentType = returnType;\n    return module.createBlock(null, [\n      module.createSetGlobal(this.ensureArgcVar(), // might still be calling a trampoline\n        module.createI32(numArguments)\n      ),\n      module.createCallIndirect(indexArg, operands, signature.toSignatureString())\n    ], returnType.toNativeType()); // not necessarily wrapped\n  }\n\n  compileCommaExpression(expression: CommaExpression, contextualType: Type): ExpressionRef {\n    var expressions = expression.expressions;\n    var numExpressions = expressions.length;\n    var exprs = new Array<ExpressionRef>(numExpressions--);\n    for (let i = 0; i < numExpressions; ++i) {\n      exprs[i] = this.compileExpression(\n        expressions[i],\n        Type.void, // drop all\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    exprs[numExpressions] = this.compileExpression(\n      expressions[numExpressions],\n      contextualType, // except last\n      ConversionKind.IMPLICIT,\n      WrapMode.NONE\n    );\n    return this.module.createBlock(null, exprs, this.currentType.toNativeType());\n  }\n\n  compileElementAccessExpression(expression: ElementAccessExpression, contextualType: Type): ExpressionRef {\n    var target = this.resolver.resolveElementAccess(expression, this.currentFunction); // reports\n    if (!target) return this.module.createUnreachable();\n    switch (target.kind) {\n      case ElementKind.CLASS: {\n        let isUnchecked = this.currentFunction.flow.is(FlowFlags.UNCHECKED_CONTEXT);\n        let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\n        if (!indexedGet) {\n          this.error(\n            DiagnosticCode.Index_signature_is_missing_in_type_0,\n            expression.expression.range, (<Class>target).internalName\n          );\n          return this.module.createUnreachable();\n        }\n        let thisArg = this.compileExpression(\n          expression.expression,\n          (<Class>target).type,\n          ConversionKind.IMPLICIT,\n          WrapMode.NONE\n        );\n        return this.compileCallDirect(indexedGet, [\n          expression.elementExpression\n        ], expression, thisArg);\n      }\n    }\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      expression.range\n    );\n    return this.module.createUnreachable();\n  }\n\n  compileFunctionExpression(expression: FunctionExpression, contextualType: Type): ExpressionRef {\n    var declaration = expression.declaration;\n    var name = declaration.name;\n    var simpleName = (name.text.length\n      ? name.text\n      : \"anonymous\") + \"|\" + this.functionTable.length.toString(10);\n    var currentFunction = this.currentFunction;\n    var prototype = new FunctionPrototype(\n      this.program,\n      simpleName,\n      currentFunction.internalName + INNER_DELIMITER + simpleName,\n      declaration,\n      null,\n      DecoratorFlags.NONE\n    );\n    var flow = currentFunction.flow;\n    var instance = this.compileFunctionUsingTypeArguments(\n      prototype,\n      [],\n      flow.contextualTypeArguments,\n      flow,\n      declaration\n    );\n    if (!instance) return this.module.createUnreachable();\n    this.currentType = instance.signature.type; // TODO: get cached type?\n    // NOTE that, in order to make this work in every case, the function must be represented by a\n    // value, so we add it and rely on the optimizer to figure out where it can be called directly.\n    var index = this.ensureFunctionTableEntry(instance); // reports\n    return index < 0\n      ? this.module.createUnreachable()\n      : this.module.createI32(index);\n  }\n\n  /**\n   * Compiles an identifier in the specified context.\n   * @param retainConstantType Retains the type of inlined constants if `true`, otherwise\n   *  precomputes them according to context.\n   */\n  compileIdentifierExpression(\n    expression: IdentifierExpression,\n    contextualType: Type,\n    retainConstantType: bool\n  ): ExpressionRef {\n    var module = this.module;\n    var currentFunction = this.currentFunction;\n\n    // check special keywords first\n    switch (expression.kind) {\n      case NodeKind.NULL: {\n        let options = this.options;\n        if (!contextualType.classReference) {\n          this.currentType = options.usizeType;\n        }\n        return options.isWasm64\n          ? module.createI64(0)\n          : module.createI32(0);\n      }\n      case NodeKind.TRUE: {\n        this.currentType = Type.bool;\n        return module.createI32(1);\n      }\n      case NodeKind.FALSE: {\n        this.currentType = Type.bool;\n        return module.createI32(0);\n      }\n      case NodeKind.THIS: {\n        let flow = currentFunction.flow;\n        if (flow.is(FlowFlags.INLINE_CONTEXT)) {\n          let scopedThis = flow.getScopedLocal(\"this\");\n          if (scopedThis) {\n            this.currentType = scopedThis.type;\n            return module.createGetLocal(scopedThis.index, scopedThis.type.toNativeType());\n          }\n        }\n        if (currentFunction.is(CommonFlags.INSTANCE)) {\n          let parent = assert(currentFunction.parent);\n          assert(parent.kind == ElementKind.CLASS);\n          let thisType = (<Class>parent).type;\n          if (currentFunction.is(CommonFlags.CONSTRUCTOR)) {\n            if (!flow.is(FlowFlags.ALLOCATES)) {\n              flow.set(FlowFlags.ALLOCATES);\n              // must be conditional because `this` could have been provided by a derived class\n              this.currentType = thisType;\n              return module.createTeeLocal(0,\n                this.makeConditionalAllocate(<Class>parent, expression)\n              );\n            }\n          }\n          this.currentType = thisType;\n          return module.createGetLocal(0, thisType.toNativeType());\n        }\n        this.error(\n          DiagnosticCode._this_cannot_be_referenced_in_current_location,\n          expression.range\n        );\n        this.currentType = this.options.usizeType;\n        return module.createUnreachable();\n      }\n      case NodeKind.SUPER: {\n        let flow = currentFunction.flow;\n        if (flow.is(FlowFlags.INLINE_CONTEXT)) {\n          let scopedThis = flow.getScopedLocal(\"this\");\n          if (scopedThis) {\n            let scopedThisClass = assert(scopedThis.type.classReference);\n            let base = scopedThisClass.base;\n            if (base) {\n              this.currentType = base.type;\n              return module.createGetLocal(scopedThis.index, base.type.toNativeType());\n            }\n          }\n        }\n        if (currentFunction.is(CommonFlags.INSTANCE)) {\n          let parent = assert(currentFunction.parent);\n          assert(parent.kind == ElementKind.CLASS);\n          let base = (<Class>parent).base;\n          if (base) {\n            let superType = base.type;\n            this.currentType = superType;\n            return module.createGetLocal(0, superType.toNativeType());\n          }\n        }\n        this.error(\n          DiagnosticCode._super_can_only_be_referenced_in_a_derived_class,\n          expression.range\n        );\n        this.currentType = this.options.usizeType;\n        return module.createUnreachable();\n      }\n    }\n\n    // otherwise resolve\n    var target = this.resolver.resolveIdentifier( // reports\n      expression,\n      this.currentEnum || currentFunction\n    );\n    if (!target) return module.createUnreachable();\n\n    switch (target.kind) {\n      case ElementKind.LOCAL: {\n        let localType = (<Local>target).type;\n        assert(localType != Type.void);\n        if ((<Local>target).is(CommonFlags.INLINED)) {\n          return this.compileInlineConstant(<Local>target, contextualType, retainConstantType);\n        }\n        let localIndex = (<Local>target).index;\n        assert(localIndex >= 0);\n        this.currentType = localType;\n        return this.module.createGetLocal(localIndex, localType.toNativeType());\n      }\n      case ElementKind.GLOBAL: {\n        if (!this.compileGlobal(<Global>target)) { // reports; not yet compiled if a static field\n          return this.module.createUnreachable();\n        }\n        let globalType = (<Global>target).type;\n        assert(globalType != Type.void);\n        if ((<Global>target).is(CommonFlags.INLINED)) {\n          return this.compileInlineConstant(<Global>target, contextualType, retainConstantType);\n        }\n        this.currentType = globalType;\n        return this.module.createGetGlobal((<Global>target).internalName, globalType.toNativeType());\n      }\n      case ElementKind.ENUMVALUE: { // here: if referenced from within the same enum\n        if (!target.is(CommonFlags.COMPILED)) {\n          this.error(\n            DiagnosticCode.A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums,\n            expression.range\n          );\n          this.currentType = Type.i32;\n          return this.module.createUnreachable();\n        }\n        this.currentType = Type.i32;\n        if ((<EnumValue>target).is(CommonFlags.INLINED)) {\n          return this.module.createI32((<EnumValue>target).constantValue);\n        }\n        return this.module.createGetGlobal((<EnumValue>target).internalName, NativeType.I32);\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        let instance = this.resolver.resolveFunction(\n          <FunctionPrototype>target,\n          null,\n          currentFunction.flow.contextualTypeArguments\n        );\n        if (!(instance && this.compileFunction(instance))) return module.createUnreachable();\n        let index = this.ensureFunctionTableEntry(instance);\n        this.currentType = instance.signature.type;\n        return this.module.createI32(index);\n      }\n    }\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      expression.range\n    );\n    return this.module.createUnreachable();\n  }\n\n  compileInstanceOfExpression(\n    expression: InstanceOfExpression,\n    contextualType: Type\n  ): ExpressionRef {\n    var module = this.module;\n    // NOTE that this differs from TypeScript in that the rhs is a type, not an expression. at the\n    // time of implementation, this seemed more useful because dynamic rhs expressions are not\n    // possible in AS anyway.\n    var expr = this.compileExpressionRetainType(expression.expression, this.options.usizeType, WrapMode.NONE);\n    var type = this.currentType;\n    var isType = this.resolver.resolveType(expression.isType);\n    this.currentType = Type.bool;\n    if (!isType) return module.createUnreachable();\n    return type.is(TypeFlags.NULLABLE) && !isType.is(TypeFlags.NULLABLE)\n      ? type.nonNullableType.isAssignableTo(isType)\n        ? module.createBinary( // not precomputeable\n            type.is(TypeFlags.LONG)\n              ? BinaryOp.NeI64\n              : BinaryOp.NeI32,\n            expr,\n            type.toNativeZero(module)\n          )\n        : module.createI32(0)\n      : module.createI32(type.isAssignableTo(isType, true) ? 1 : 0);\n  }\n\n  compileLiteralExpression(\n    expression: LiteralExpression,\n    contextualType: Type,\n    implicitNegate: bool = false\n  ): ExpressionRef {\n    var module = this.module;\n\n    switch (expression.literalKind) {\n      case LiteralKind.ARRAY: {\n        assert(!implicitNegate);\n        let classType = contextualType.classReference;\n        if (\n          classType &&\n          classType.prototype == this.program.arrayPrototype\n        ) {\n          return this.compileArrayLiteral(\n            assert(classType.typeArguments)[0],\n            (<ArrayLiteralExpression>expression).elementExpressions,\n            false, // TODO: isConst?\n            expression\n          );\n        }\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          expression.range\n        );\n        return module.createUnreachable();\n      }\n      case LiteralKind.FLOAT: {\n        let floatValue = (<FloatLiteralExpression>expression).value;\n        if (implicitNegate) {\n          floatValue = -floatValue;\n        }\n        if (contextualType == Type.f32) {\n          return module.createF32(<f32>floatValue);\n        }\n        this.currentType = Type.f64;\n        return module.createF64(floatValue);\n      }\n      case LiteralKind.INTEGER: {\n        let intValue = (<IntegerLiteralExpression>expression).value;\n        if (implicitNegate) {\n          intValue = i64_sub(\n            i64_new(0),\n            intValue\n          );\n        }\n        switch (contextualType.kind) {\n\n          // compile to contextualType if matching\n\n          case TypeKind.I8: {\n            if (i64_is_i8(intValue)) return module.createI32(i64_low(intValue));\n            break;\n          }\n          case TypeKind.U8: {\n            if (i64_is_u8(intValue)) return module.createI32(i64_low(intValue));\n            break;\n          }\n          case TypeKind.I16: {\n            if (i64_is_i16(intValue)) return module.createI32(i64_low(intValue));\n            break;\n          }\n          case TypeKind.U16: {\n            if (i64_is_u16(intValue)) return module.createI32(i64_low(intValue));\n            break;\n          }\n          case TypeKind.I32: {\n            if (i64_is_i32(intValue)) return module.createI32(i64_low(intValue));\n            break;\n          }\n          case TypeKind.U32: {\n            if (i64_is_u32(intValue)) return module.createI32(i64_low(intValue));\n            break;\n          }\n          case TypeKind.BOOL: {\n            if (i64_is_bool(intValue)) return module.createI32(i64_low(intValue));\n            break;\n          }\n          case TypeKind.ISIZE: {\n            if (!this.options.isWasm64) {\n              if (i64_is_i32(intValue)) return module.createI32(i64_low(intValue));\n              break;\n            }\n            return module.createI64(i64_low(intValue), i64_high(intValue));\n          }\n          case TypeKind.USIZE: {\n            if (!this.options.isWasm64) {\n              if (i64_is_u32(intValue)) return module.createI32(i64_low(intValue));\n              break;\n            }\n            return module.createI64(i64_low(intValue), i64_high(intValue));\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            return module.createI64(i64_low(intValue), i64_high(intValue));\n          }\n          case TypeKind.F32: {\n            if (i64_is_f32(intValue)) return module.createF32(i64_to_f32(intValue));\n            break;\n          }\n          case TypeKind.F64: {\n            if (i64_is_f64(intValue)) return module.createF64(i64_to_f64(intValue));\n            break;\n          }\n          case TypeKind.VOID: {\n            break; // compiles to best fitting type below, being dropped\n          }\n          default: {\n            assert(false);\n            return module.createUnreachable();\n          }\n        }\n\n        // otherwise compile to best fitting native type\n\n        if (i64_is_i32(intValue)) {\n          this.currentType = Type.i32;\n          return module.createI32(i64_low(intValue));\n        } else if (i64_is_u32(intValue)) {\n          this.currentType = Type.u32;\n          return module.createI32(i64_low(intValue));\n        } else {\n          this.currentType = Type.i64;\n          return module.createI64(i64_low(intValue), i64_high(intValue));\n        }\n      }\n      case LiteralKind.STRING: {\n        assert(!implicitNegate);\n        return this.compileStringLiteral(<StringLiteralExpression>expression);\n      }\n      case LiteralKind.OBJECT: {\n        assert(!implicitNegate);\n        return this.compileObjectLiteral(<ObjectLiteralExpression>expression, contextualType);\n      }\n      // case LiteralKind.REGEXP:\n    }\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      expression.range\n    );\n    this.currentType = contextualType;\n    return module.createUnreachable();\n  }\n\n  /** Ensures that the specified string exists in static memory and returns a pointer to it. */\n  ensureStaticString(stringValue: string): ExpressionRef {\n    var program = this.program;\n    var hasGC = program.hasGC;\n    var gcHeaderSize = program.gcHeaderSize;\n\n    var stringInstance = assert(program.stringInstance);\n    var stringSegment: MemorySegment;\n\n    // if the string already exists, reuse it\n    var segments = this.stringSegments;\n    if (segments.has(stringValue)) {\n      stringSegment = <MemorySegment>segments.get(stringValue);\n\n    // otherwise create it\n    } else {\n      let length = stringValue.length;\n      let headerSize = (stringInstance.currentMemoryOffset + 1) & ~1;\n      let totalSize = headerSize + length * 2;\n\n      let buf: Uint8Array;\n      let pos: u32;\n\n      if (hasGC) {\n        buf = new Uint8Array(gcHeaderSize + totalSize);\n        pos = gcHeaderSize;\n        writeI32(ensureGCHook(this, stringInstance), buf, program.gcHookOffset);\n      } else {\n        buf = new Uint8Array(totalSize);\n        pos = 0;\n      }\n      writeI32(length, buf, pos + stringInstance.offsetof(\"length\"));\n      pos += headerSize;\n      for (let i = 0; i < length; ++i) {\n        writeI16(stringValue.charCodeAt(i), buf, pos + (i << 1));\n      }\n      stringSegment = this.addMemorySegment(buf);\n      segments.set(stringValue, stringSegment);\n    }\n    var stringOffset = stringSegment.offset;\n    if (hasGC) stringOffset = i64_add(stringOffset, i64_new(gcHeaderSize));\n\n    this.currentType = stringInstance.type;\n    if (this.options.isWasm64) {\n      return this.module.createI64(i64_low(stringOffset), i64_high(stringOffset));\n    } else {\n      assert(i64_is_u32(stringOffset));\n      return this.module.createI32(i64_low(stringOffset));\n    }\n  }\n\n  compileStringLiteral(expression: StringLiteralExpression): ExpressionRef {\n    return this.ensureStaticString(expression.value);\n  }\n\n  /** Ensures that the specified array exists in static memory and returns a pointer to it. */\n  ensureStaticArray(elementType: Type, values: ExpressionRef[]): ExpressionRef {\n    var program = this.program;\n    var hasGC = program.hasGC;\n    var gcHeaderSize = program.gcHeaderSize;\n\n    var length = values.length;\n    var byteSize = elementType.byteSize;\n    var byteLength = length * byteSize;\n    var usizeTypeSize = this.options.usizeType.byteSize;\n\n    var buf: Uint8Array;\n    var pos: u32;\n\n    // create the backing ArrayBuffer segment\n    var bufferInstance = assert(program.arrayBufferInstance);\n    var bufferHeaderSize = (bufferInstance.currentMemoryOffset + 7) & ~7;\n    var bufferTotalSize = 1 << (32 - clz(bufferHeaderSize + byteLength - 1));\n    if (hasGC) {\n      buf = new Uint8Array(gcHeaderSize + bufferTotalSize);\n      pos = gcHeaderSize;\n      writeI32(ensureGCHook(this, bufferInstance), buf, program.gcHookOffset);\n    } else {\n      buf = new Uint8Array(bufferTotalSize);\n      pos = 0;\n    }\n    writeI32(byteLength, buf, pos + bufferInstance.offsetof(\"byteLength\"));\n    pos += bufferHeaderSize;\n    var nativeType = elementType.toNativeType();\n    switch (nativeType) {\n      case NativeType.I32: {\n        switch (byteSize) {\n          case 1: {\n            for (let i = 0; i < length; ++i) {\n              let value = values[i];\n              assert(getExpressionType(value) == nativeType);\n              assert(getExpressionId(value) == ExpressionId.Const);\n              writeI8(getConstValueI32(value), buf, pos);\n              pos += 1;\n            }\n            break;\n          }\n          case 2: {\n            for (let i = 0; i < length; ++i) {\n              let value = values[i];\n              assert(getExpressionType(value) == nativeType);\n              assert(getExpressionId(value) == ExpressionId.Const);\n              writeI16(getConstValueI32(value), buf, pos);\n              pos += 2;\n            }\n            break;\n          }\n          case 4: {\n            for (let i = 0; i < length; ++i) {\n              let value = values[i];\n              assert(getExpressionType(value) == nativeType);\n              assert(getExpressionId(value) == ExpressionId.Const);\n              writeI32(getConstValueI32(value), buf, pos);\n              pos += 4;\n            }\n            break;\n          }\n          default: assert(false);\n        }\n        break;\n      }\n      case NativeType.I64: {\n        for (let i = 0; i < length; ++i) {\n          let value = values[i];\n          assert(getExpressionType(value) == nativeType);\n          assert(getExpressionId(value) == ExpressionId.Const);\n          writeI64(i64_new(getConstValueI64Low(value), getConstValueI64High(value)), buf, pos);\n          pos += 8;\n        }\n        break;\n      }\n      case NativeType.F32: {\n        for (let i = 0; i < length; ++i) {\n          let value = values[i];\n          assert(getExpressionType(value) == nativeType);\n          assert(getExpressionId(value) == ExpressionId.Const);\n          writeF32(getConstValueF32(value), buf, pos);\n          pos += 4;\n        }\n        break;\n      }\n      case NativeType.F64: {\n        for (let i = 0; i < length; ++i) {\n          let value = values[i];\n          assert(getExpressionType(value) == nativeType);\n          assert(getExpressionId(value) == ExpressionId.Const);\n          writeF64(getConstValueF64(value), buf, pos);\n          pos += 8;\n        }\n        break;\n      }\n      default: assert(false);\n    }\n    var bufferSegment = this.addMemorySegment(buf);\n    var bufferOffset = bufferSegment.offset;\n    if (hasGC) bufferOffset = i64_add(bufferOffset, i64_new(gcHeaderSize));\n\n    // create the Array segment and return a pointer to it\n    var arrayPrototype = assert(program.arrayPrototype);\n    var arrayInstance = assert(this.resolver.resolveClass(arrayPrototype, [ elementType ]));\n    var arrayHeaderSize = (arrayInstance.currentMemoryOffset + 7) & ~7;\n    if (hasGC) {\n      buf = new Uint8Array(gcHeaderSize + arrayHeaderSize);\n      pos = gcHeaderSize;\n      writeI32(ensureGCHook(this, arrayInstance), buf, program.gcHookOffset);\n    } else {\n      buf = new Uint8Array(arrayHeaderSize);\n      pos = 0;\n    }\n    var arraySegment = this.addMemorySegment(buf);\n    var arrayOffset = arraySegment.offset;\n    if (hasGC) arrayOffset = i64_add(arrayOffset, i64_new(gcHeaderSize));\n    this.currentType = arrayInstance.type;\n    if (usizeTypeSize == 8) {\n      writeI64(bufferOffset, buf, pos + arrayInstance.offsetof(\"buffer_\"));\n      writeI32(length, buf, pos + arrayInstance.offsetof(\"length_\"));\n      return this.module.createI64(i64_low(arrayOffset), i64_high(arrayOffset));\n    } else {\n      assert(i64_is_u32(bufferOffset));\n      writeI32(i64_low(bufferOffset), buf, pos + arrayInstance.offsetof(\"buffer_\"));\n      writeI32(length, buf, pos + arrayInstance.offsetof(\"length_\"));\n      assert(i64_is_u32(arrayOffset));\n      return this.module.createI32(i64_low(arrayOffset));\n    }\n  }\n\n  compileArrayLiteral(\n    elementType: Type,\n    expressions: (Expression | null)[],\n    isConst: bool,\n    reportNode: Node\n  ): ExpressionRef {\n    var module = this.module;\n\n    // find out whether all elements are constant (array is static)\n    var length = expressions.length;\n    var compiledValues = new Array<ExpressionRef>(length);\n    var constantValues = new Array<ExpressionRef>(length);\n    var nativeElementType = elementType.toNativeType();\n    var isStatic = true;\n    for (let i = 0; i < length; ++i) {\n      let expr = expressions[i]\n        ? this.compileExpression(<Expression>expressions[i], elementType, ConversionKind.IMPLICIT, WrapMode.NONE)\n        : elementType.toNativeZero(module);\n      compiledValues[i] = expr;\n      if (isStatic) {\n        expr = module.precomputeExpression(compiledValues[i]);\n        if (getExpressionId(expr) == ExpressionId.Const) {\n          assert(getExpressionType(expr) == nativeElementType);\n          constantValues[i] = expr;\n        } else {\n          if (isConst) {\n            this.warning(\n              DiagnosticCode.Compiling_constant_with_non_constant_initializer_as_mutable,\n              reportNode.range\n            );\n          }\n          isStatic = false;\n        }\n      }\n    }\n\n    // make a static array if possible\n    if (isStatic) return this.ensureStaticArray(elementType, constantValues);\n\n    // otherwise obtain the array type\n    var arrayPrototype = assert(this.program.arrayPrototype);\n    if (!arrayPrototype || arrayPrototype.kind != ElementKind.CLASS_PROTOTYPE) return module.createUnreachable();\n    var arrayInstance = this.resolver.resolveClass(<ClassPrototype>arrayPrototype, [ elementType ]);\n    if (!arrayInstance) return module.createUnreachable();\n    var arrayType = arrayInstance.type;\n\n    // and compile an explicit instantiation\n    this.currentType = arrayType;\n    var setter = arrayInstance.lookupOverload(OperatorKind.INDEXED_SET, true);\n    if (!setter) {\n      this.error(\n        DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\n        reportNode.range, arrayInstance.internalName\n      );\n      return module.createUnreachable();\n    }\n    var nativeArrayType = arrayType.toNativeType();\n    var currentFunction = this.currentFunction;\n    var tempLocal = currentFunction.addLocal(arrayType); // can't reuse a temp (used in compiledValues)\n    var stmts = new Array<ExpressionRef>(2 + length);\n    var index = 0;\n    stmts[index++] = module.createSetLocal(tempLocal.index,\n      this.makeCallDirect(assert(arrayInstance.constructorInstance), [\n        module.createI32(0), // this\n        module.createI32(length)\n      ])\n    );\n    for (let i = 0; i < length; ++i) {\n      stmts[index++] = this.makeCallDirect(setter, [\n        module.createGetLocal(tempLocal.index, nativeArrayType), // this\n        module.createI32(i),\n        compiledValues[i]\n      ]);\n    }\n    assert(index + 1 == stmts.length);\n    stmts[index] = module.createGetLocal(tempLocal.index, nativeArrayType);\n    currentFunction.freeTempLocal(tempLocal); // but can be reused now\n    this.currentType = arrayType;\n    return module.createBlock(null, stmts, nativeArrayType);\n  }\n\n  compileObjectLiteral(expression: ObjectLiteralExpression, contextualType: Type): ExpressionRef {\n    var module = this.module;\n\n    // contextual type must be a class\n    var classReference = contextualType.classReference;\n    if (!classReference || classReference.is(CommonFlags.ABSTRACT)) {\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        expression.range, \"<object>\", contextualType.toString()\n      );\n      return module.createUnreachable();\n    }\n\n    // if present, check that the constructor is compatible with object literals\n    var ctor = classReference.constructorInstance;\n    if (ctor) {\n      // TODO: if the constructor requires parameters, check whether these are given as part of the\n      // object literal and use them to call the ctor while not generating a store.\n      if (ctor.signature.requiredParameters) {\n        this.error(\n          DiagnosticCode.Constructor_of_class_0_must_not_require_any_arguments,\n          expression.range, classReference.toString()\n        );\n        return module.createUnreachable();\n      }\n      if (ctor.is(CommonFlags.PRIVATE)) {\n        this.error(\n          DiagnosticCode.Constructor_of_class_0_is_private_and_only_accessible_within_the_class_declaration,\n          expression.range, classReference.toString()\n        );\n        return module.createUnreachable();\n      }\n      if (ctor.is(CommonFlags.PROTECTED)) {\n        this.error(\n          DiagnosticCode.Constructor_of_class_0_is_protected_and_only_accessible_within_the_class_declaration,\n          expression.range, classReference.toString()\n        );\n        return module.createUnreachable();\n      }\n    }\n\n    // check and compile field values\n    var names = expression.names;\n    var numNames = names.length;\n    var values = expression.values;\n    var members = classReference.members;\n    var hasErrors = false;\n    var exprs = new Array<ExpressionRef>(numNames + 2);\n    var tempLocal = this.currentFunction.getTempLocal(this.options.usizeType);\n    assert(numNames == values.length);\n    for (let i = 0, k = numNames; i < k; ++i) {\n      let member = members ? members.get(names[i].text) : null;\n      if (!member || member.kind != ElementKind.FIELD) {\n        this.error(\n          DiagnosticCode.Property_0_does_not_exist_on_type_1,\n          names[i].range, names[i].text, classReference.toString()\n        );\n        hasErrors = true;\n        continue;\n      }\n      let type = (<Field>member).type;\n      exprs[i + 1] = this.module.createStore( // TODO: handle setters as well\n        type.byteSize,\n        this.module.createGetLocal(tempLocal.index, this.options.nativeSizeType),\n        this.compileExpression(values[i], (<Field>member).type, ConversionKind.IMPLICIT, WrapMode.NONE),\n        type.toNativeType(),\n        (<Field>member).memoryOffset\n      );\n    }\n    this.currentType = classReference.type.nonNullableType;\n    if (hasErrors) return module.createUnreachable();\n\n    // allocate a new instance first and assign 'this' to the temp. local\n    exprs[0] = module.createSetLocal(\n      tempLocal.index,\n      compileAllocate(this, classReference, expression)\n    );\n\n    // once all field values have been set, return 'this'\n    exprs[exprs.length - 1] = module.createGetLocal(tempLocal.index, this.options.nativeSizeType);\n\n    return module.createBlock(null, exprs, this.options.nativeSizeType);\n  }\n\n  compileNewExpression(expression: NewExpression, contextualType: Type): ExpressionRef {\n    var module = this.module;\n    var options = this.options;\n    var currentFunction = this.currentFunction;\n\n    // obtain the class being instantiated\n    var target = this.resolver.resolveExpression( // reports\n      expression.expression,\n      currentFunction\n    );\n    if (!target) return module.createUnreachable();\n    if (target.kind != ElementKind.CLASS_PROTOTYPE) {\n      this.error(\n        DiagnosticCode.Cannot_use_new_with_an_expression_whose_type_lacks_a_construct_signature,\n        expression.expression.range\n      );\n      return this.module.createUnreachable();\n    }\n    var classPrototype = <ClassPrototype>target;\n    var classInstance: Class | null = null;\n    var typeArguments = expression.typeArguments;\n    var classReference: Class | null;\n    if (\n      !typeArguments &&\n      (classReference = contextualType.classReference) !== null &&\n      classReference.is(CommonFlags.GENERIC)\n    ) {\n      classInstance = this.resolver.resolveClass(\n        classPrototype,\n        classReference.typeArguments,\n        currentFunction.flow.contextualTypeArguments\n      );\n    } else {\n      classInstance = this.resolver.resolveClassInclTypeArguments(\n        classPrototype,\n        typeArguments,\n        currentFunction.flow.contextualTypeArguments,\n        expression\n      );\n    }\n    if (!classInstance) return module.createUnreachable();\n\n    var expr: ExpressionRef;\n\n    // traverse to the top-most visible constructor\n    var currentClassInstance: Class | null = classInstance;\n    var constructorInstance: Function | null = null;\n    do {\n      constructorInstance = currentClassInstance.constructorInstance;\n      if (constructorInstance) break; // TODO: check visibility\n    } while (currentClassInstance = currentClassInstance.base);\n\n    // if a constructor is present, call it with a zero `this`\n    if (constructorInstance) {\n      expr = this.compileCallDirect(constructorInstance, expression.arguments, expression,\n        options.usizeType.toNativeZero(module)\n      );\n\n    // otherwise simply allocate a new instance and initialize its fields\n    } else {\n      expr = this.makeAllocate(classInstance, expression);\n    }\n\n    this.currentType = classInstance.type;\n    return expr;\n  }\n\n  compileParenthesizedExpression(\n    expression: ParenthesizedExpression,\n    contextualType: Type\n  ): ExpressionRef {\n    // does not change types, just order\n    return this.compileExpression(\n      expression.expression,\n      contextualType,\n      ConversionKind.NONE,\n      WrapMode.NONE\n    );\n  }\n\n  /**\n   * Compiles a property access in the specified context.\n   * @param retainConstantType Retains the type of inlined constants if `true`, otherwise\n   *  precomputes them according to context.\n   */\n  compilePropertyAccessExpression(\n    propertyAccess: PropertyAccessExpression,\n    contextualType: Type,\n    retainConstantType: bool\n  ): ExpressionRef {\n    var module = this.module;\n\n    var target = this.resolver.resolvePropertyAccess(propertyAccess, this.currentFunction); // reports\n    if (!target) return module.createUnreachable();\n\n    switch (target.kind) {\n      case ElementKind.GLOBAL: { // static property\n        if (!this.compileGlobal(<Global>target)) { // reports; not yet compiled if a static field\n          return module.createUnreachable();\n        }\n        let globalType = (<Global>target).type;\n        assert(globalType != Type.void);\n        if ((<Global>target).is(CommonFlags.INLINED)) {\n          return this.compileInlineConstant(<Global>target, contextualType, retainConstantType);\n        }\n        this.currentType = globalType;\n        return module.createGetGlobal((<Global>target).internalName, globalType.toNativeType());\n      }\n      case ElementKind.ENUMVALUE: { // enum value\n        let parent = (<EnumValue>target).parent;\n        assert(parent !== null && parent.kind == ElementKind.ENUM);\n        if (!this.compileEnum(<Enum>parent)) {\n          this.currentType = Type.i32;\n          return this.module.createUnreachable();\n        }\n        this.currentType = Type.i32;\n        if ((<EnumValue>target).is(CommonFlags.INLINED)) {\n          return module.createI32((<EnumValue>target).constantValue);\n        }\n        return module.createGetGlobal((<EnumValue>target).internalName, NativeType.I32);\n      }\n      case ElementKind.FIELD: { // instance field\n        let thisExpression = assert(this.resolver.currentThisExpression);\n        assert((<Field>target).memoryOffset >= 0);\n        let thisExpr = this.compileExpressionRetainType(\n          thisExpression,\n          this.options.usizeType,\n          WrapMode.NONE\n        );\n        this.currentType = (<Field>target).type;\n        return module.createLoad(\n          (<Field>target).type.byteSize,\n          (<Field>target).type.is(TypeFlags.SIGNED | TypeFlags.INTEGER),\n          thisExpr,\n          (<Field>target).type.toNativeType(),\n          (<Field>target).memoryOffset\n        );\n      }\n      case ElementKind.PROPERTY: {// instance property (here: getter)\n        return this.compileGetter(<Property>target, propertyAccess);\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        this.error(\n          DiagnosticCode.Cannot_access_method_0_without_calling_it_as_it_requires_this_to_be_set,\n          propertyAccess.range, (<FunctionPrototype>target).simpleName\n        );\n        return module.createUnreachable();\n      }\n    }\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      propertyAccess.range\n    );\n    return module.createUnreachable();\n  }\n\n  private compileGetter(target: Property, reportNode: Node): ExpressionRef {\n    var prototype = target.getterPrototype;\n    if (prototype) {\n      let instance = this.resolver.resolveFunction(prototype, null);\n      if (!instance) return this.module.createUnreachable();\n      let signature = instance.signature;\n      if (!this.checkCallSignature( // reports\n        signature,\n        0,\n        instance.is(CommonFlags.INSTANCE),\n        reportNode\n      )) {\n        return this.module.createUnreachable();\n      }\n      let inline = (instance.decoratorFlags & DecoratorFlags.INLINE) != 0;\n      if (instance.is(CommonFlags.INSTANCE)) {\n        let parent = assert(instance.parent);\n        assert(parent.kind == ElementKind.CLASS);\n        let thisExpression = assert(this.resolver.currentThisExpression); //!!!\n        let thisExpr = this.compileExpressionRetainType(\n          thisExpression,\n          this.options.usizeType,\n          WrapMode.NONE\n        );\n        this.currentType = signature.returnType;\n        return this.compileCallDirect(instance, [], reportNode, thisExpr, inline);\n      } else {\n        this.currentType = signature.returnType;\n        return this.compileCallDirect(instance, [], reportNode, 0, inline);\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Property_0_does_not_exist_on_type_1,\n        reportNode.range, (<Property>target).simpleName, (<Property>target).parent.toString()\n      );\n      return this.module.createUnreachable();\n    }\n  }\n\n  compileTernaryExpression(expression: TernaryExpression, contextualType: Type): ExpressionRef {\n    var ifThen = expression.ifThen;\n    var ifElse = expression.ifElse;\n    var currentFunction = this.currentFunction;\n    var parentFlow = currentFunction.flow;\n\n    var condExpr = this.makeIsTrueish(\n      this.compileExpressionRetainType(expression.condition, Type.bool, WrapMode.NONE),\n      this.currentType\n    );\n\n    if (\n      !this.options.noTreeShaking ||\n      this.currentFunction.isAny(CommonFlags.GENERIC | CommonFlags.GENERIC_CONTEXT)\n    ) {\n      // Try to eliminate unnecesssary branches if the condition is constant\n      let condExprPrecomp = this.module.precomputeExpression(condExpr);\n      if (\n        getExpressionId(condExprPrecomp) == ExpressionId.Const &&\n        getExpressionType(condExprPrecomp) == NativeType.I32\n      ) {\n        return getConstValueI32(condExprPrecomp)\n          ? this.compileExpressionRetainType(ifThen, contextualType, WrapMode.NONE)\n          : this.compileExpressionRetainType(ifElse, contextualType, WrapMode.NONE);\n\n      // Otherwise recompile to the original and let the optimizer decide\n      } else /* if (condExpr != condExprPrecomp) <- not guaranteed */ {\n        condExpr = this.makeIsTrueish(\n          this.compileExpressionRetainType(expression.condition, Type.bool, WrapMode.NONE),\n          this.currentType\n        );\n      }\n    }\n\n    var ifThenFlow = parentFlow.fork();\n    currentFunction.flow = ifThenFlow;\n    var ifThenExpr = this.compileExpressionRetainType(ifThen, contextualType, WrapMode.NONE);\n    var ifThenType = this.currentType;\n    ifThenFlow.free();\n\n    var ifElseFlow = parentFlow.fork();\n    currentFunction.flow = ifElseFlow;\n    var ifElseExpr = this.compileExpressionRetainType(ifElse, contextualType, WrapMode.NONE);\n    var ifElseType = this.currentType;\n    currentFunction.flow = ifElseFlow.free();\n\n    parentFlow.inheritMutual(ifThenFlow, ifElseFlow);\n\n    var commonType = Type.commonCompatible(ifThenType, ifElseType, false);\n    if (!commonType) {\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        expression.range, ifThenType.toString(), ifElseType.toString()\n      );\n      this.currentType = contextualType;\n      return this.module.createUnreachable();\n    }\n    ifThenExpr = this.convertExpression(\n      ifThenExpr,\n      ifThenType,\n      commonType,\n      ConversionKind.IMPLICIT,\n      WrapMode.NONE,\n      ifThen\n    );\n    ifElseExpr = this.convertExpression(\n      ifElseExpr,\n      ifElseType,\n      commonType,\n      ConversionKind.IMPLICIT,\n      WrapMode.NONE,\n      ifElse\n    );\n    this.currentType = commonType;\n    return this.module.createIf(condExpr, ifThenExpr, ifElseExpr);\n  }\n\n  compileUnaryPostfixExpression(expression: UnaryPostfixExpression, contextualType: Type): ExpressionRef {\n    var module = this.module;\n    var currentFunction = this.currentFunction;\n\n    // make a getter for the expression (also obtains the type)\n    var getValue = this.compileExpression( // reports\n      expression.operand,\n      contextualType == Type.void\n        ? Type.i32\n        : contextualType,\n      ConversionKind.NONE,\n      WrapMode.NONE\n    );\n    // shortcut if compiling the getter already failed\n    if (getExpressionId(getValue) == ExpressionId.Unreachable) return getValue;\n    var currentType = this.currentType;\n\n    var op: BinaryOp;\n    var nativeType: NativeType;\n    var nativeOne: ExpressionRef;\n\n    switch (expression.operator) {\n      case Token.PLUS_PLUS: {\n\n        // TODO: check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        switch (currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            op = BinaryOp.AddI32;\n            nativeType = NativeType.I32;\n            nativeOne = module.createI32(1);\n            break;\n          }\n          case TypeKind.USIZE: // TODO: check operator overload\n          case TypeKind.ISIZE: {\n            let options = this.options;\n            op = options.isWasm64\n              ? BinaryOp.AddI64\n              : BinaryOp.AddI32;\n            nativeType = options.nativeSizeType;\n            nativeOne = currentType.toNativeOne(module);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            op = BinaryOp.AddI64;\n            nativeType = NativeType.I64;\n            nativeOne = module.createI64(1);\n            break;\n          }\n          case TypeKind.F32: {\n            op = BinaryOp.AddF32;\n            nativeType = NativeType.F32;\n            nativeOne = module.createF32(1);\n            break;\n          }\n          case TypeKind.F64: {\n            op = BinaryOp.AddF64;\n            nativeType = NativeType.F64;\n            nativeOne = module.createF64(1);\n            break;\n          }\n          default: {\n            assert(false);\n            return module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.MINUS_MINUS: {\n\n        // TODO: check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        switch (currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            op = BinaryOp.SubI32;\n            nativeType = NativeType.I32;\n            nativeOne = module.createI32(1);\n            break;\n          }\n          case TypeKind.USIZE: // TODO: check operator overload\n          case TypeKind.ISIZE: {\n            let options = this.options;\n            op = options.isWasm64\n              ? BinaryOp.SubI64\n              : BinaryOp.SubI32;\n            nativeType = options.nativeSizeType;\n            nativeOne = currentType.toNativeOne(module);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            op = BinaryOp.SubI64;\n            nativeType = NativeType.I64;\n            nativeOne = module.createI64(1);\n            break;\n          }\n          case TypeKind.F32: {\n            op = BinaryOp.SubF32;\n            nativeType = NativeType.F32;\n            nativeOne = module.createF32(1);\n            break;\n          }\n          case TypeKind.F64: {\n            op = BinaryOp.SubF64;\n            nativeType = NativeType.F64;\n            nativeOne = module.createF64(1);\n            break;\n          }\n          default: {\n            assert(false);\n            return module.createUnreachable();\n          }\n        }\n        break;\n      }\n      default: {\n        assert(false);\n        return module.createUnreachable();\n      }\n    }\n\n    // simplify if dropped anyway\n    if (contextualType == Type.void) {\n      return this.compileAssignmentWithValue(expression.operand,\n        module.createBinary(op,\n          getValue,\n          nativeOne\n        ),\n        false\n      );\n    }\n\n    // otherwise use a temp local for the intermediate value (always possibly overflows)\n    var tempLocal = currentFunction.getTempLocal(currentType, false);\n    var setValue = this.compileAssignmentWithValue(expression.operand,\n      module.createBinary(op,\n        this.module.createGetLocal(tempLocal.index, nativeType),\n        nativeOne\n      ),\n      false\n    );\n    this.currentType = assert(tempLocal).type;\n    currentFunction.freeTempLocal(<Local>tempLocal);\n\n    var localIndex = (<Local>tempLocal).index;\n    return module.createBlock(null, [\n      module.createSetLocal(localIndex, getValue),\n      setValue,\n      module.createGetLocal(localIndex, nativeType)\n    ], nativeType); // result of 'x++' / 'x--' might overflow\n  }\n\n  compileUnaryPrefixExpression(\n    expression: UnaryPrefixExpression,\n    contextualType: Type\n  ): ExpressionRef {\n    var module = this.module;\n    var compound = false;\n    var expr: ExpressionRef;\n\n    switch (expression.operator) {\n      case Token.PLUS: {\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType == Type.void\n            ? Type.i32\n            : contextualType,\n          ConversionKind.NONE,\n          WrapMode.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.PLUS);\n            if (overload) {\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return module.createUnreachable();\n        }\n\n        // nop\n        break;\n      }\n      case Token.MINUS: {\n        if (expression.operand.kind == NodeKind.LITERAL && (\n          (<LiteralExpression>expression.operand).literalKind == LiteralKind.INTEGER ||\n          (<LiteralExpression>expression.operand).literalKind == LiteralKind.FLOAT\n        )) {\n          // implicitly negate integer and float literals. also enables proper checking of literal ranges.\n          expr = this.compileLiteralExpression(<LiteralExpression>expression.operand, contextualType, true);\n          // compileExpression normally does this:\n          if (this.options.sourceMap) this.addDebugLocation(expr, expression.range);\n          break;\n        }\n\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType == Type.void\n            ? Type.i32\n            : contextualType,\n          ConversionKind.NONE,\n          WrapMode.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.MINUS);\n            if (overload) {\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return module.createUnreachable();\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.SubI32, module.createI32(0), expr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              this.currentType.toNativeZero(module),\n              expr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.SubI64, module.createI64(0), expr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createUnary(UnaryOp.NegF32, expr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createUnary(UnaryOp.NegF64, expr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.PLUS_PLUS: {\n        compound = true;\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType == Type.void\n            ? Type.i32\n            : contextualType,\n          ConversionKind.NONE,\n          WrapMode.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.PREFIX_INC);\n            if (overload) {\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return module.createUnreachable();\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.AddI32, expr, this.module.createI32(1));\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.AddI64\n                : BinaryOp.AddI32,\n              expr,\n              this.currentType.toNativeOne(module)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.AddI64, expr, module.createI64(1));\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.AddF32, expr, module.createF32(1));\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.AddF64, expr, module.createF64(1));\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.MINUS_MINUS: {\n        compound = true;\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType == Type.void\n            ? Type.i32\n            : contextualType,\n          ConversionKind.NONE,\n          WrapMode.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.PREFIX_DEC);\n            if (overload) {\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return module.createUnreachable();\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.SubI32, expr, module.createI32(1));\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              expr,\n              this.currentType.toNativeOne(module)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.SubI64, expr, module.createI64(1));\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.SubF32, expr, module.createF32(1));\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.SubF64, expr, module.createF64(1));\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.EXCLAMATION: {\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType == Type.void\n            ? Type.i32\n            : contextualType,\n          ConversionKind.NONE,\n          WrapMode.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.NOT);\n            if (overload) {\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n              break;\n            }\n          }\n          // allow '!' for references even without an overload\n        }\n\n        expr = this.makeIsFalseish(expr, this.currentType);\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.TILDE: {\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType == Type.void\n            ? Type.i32\n            : contextualType.is(TypeFlags.FLOAT)\n              ? Type.i64\n              : contextualType,\n          ConversionKind.NONE,\n          WrapMode.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_NOT);\n            if (overload) {\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return module.createUnreachable();\n        } else {\n          expr = this.convertExpression(\n            expr,\n            this.currentType, this.currentType.intType,\n            ConversionKind.IMPLICIT, WrapMode.NONE,\n            expression.operand\n          );\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.XorI32, expr, module.createI32(-1));\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.XorI64\n                : BinaryOp.XorI32,\n              expr,\n              this.currentType.toNativeNegOne(module)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.XorI64, expr, module.createI64(-1, -1));\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.TYPEOF: {\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          expression.range\n        );\n        return module.createUnreachable();\n      }\n      default: {\n        assert(false);\n        return module.createUnreachable();\n      }\n    }\n    return compound\n      ? this.compileAssignmentWithValue(expression.operand, expr, contextualType != Type.void)\n      : expr;\n  }\n\n  /** Makes sure that a 32-bit integer value is wrapped to a valid value of the specified type. */\n  ensureSmallIntegerWrap(expr: ExpressionRef, type: Type): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFunction.flow;\n    switch (type.kind) {\n      case TypeKind.I8: {\n        if (flow.canOverflow(expr, type)) {\n          expr = this.options.hasFeature(Feature.SIGN_EXTENSION)\n            ? module.createUnary(UnaryOp.ExtendI8ToI32, expr)\n            : module.createBinary(BinaryOp.ShrI32,\n                module.createBinary(BinaryOp.ShlI32,\n                  expr,\n                  module.createI32(24)\n                ),\n                module.createI32(24)\n              );\n        }\n        break;\n      }\n      case TypeKind.I16: {\n        if (flow.canOverflow(expr, type)) {\n          expr = this.options.hasFeature(Feature.SIGN_EXTENSION)\n            ? module.createUnary(UnaryOp.ExtendI16ToI32, expr)\n            : module.createBinary(BinaryOp.ShrI32,\n                module.createBinary(BinaryOp.ShlI32,\n                  expr,\n                  module.createI32(16)\n                ),\n                module.createI32(16)\n              );\n        }\n        break;\n      }\n      case TypeKind.U8: {\n        if (flow.canOverflow(expr, type)) {\n          expr = module.createBinary(BinaryOp.AndI32,\n            expr,\n            module.createI32(0xff)\n          );\n        }\n        break;\n      }\n      case TypeKind.U16: {\n        if (flow.canOverflow(expr, type)) {\n          expr = module.createBinary(BinaryOp.AndI32,\n            expr,\n            module.createI32(0xffff)\n          );\n        }\n        break;\n      }\n      case TypeKind.BOOL: {\n        if (flow.canOverflow(expr, type)) {\n          expr = module.createBinary(BinaryOp.AndI32,\n            expr,\n            module.createI32(0x1)\n          );\n        }\n        break;\n      }\n    }\n    return expr;\n  }\n\n  /** Creates a comparison whether an expression is 'false' in a broader sense. */\n  makeIsFalseish(expr: ExpressionRef, type: Type): ExpressionRef {\n    var module = this.module;\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.BOOL: {\n        expr = this.ensureSmallIntegerWrap(expr, type);\n        // fall-through\n      }\n      case TypeKind.I32:\n      case TypeKind.U32: {\n        return module.createUnary(UnaryOp.EqzI32, expr);\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        return module.createUnary(UnaryOp.EqzI64, expr);\n      }\n      case TypeKind.USIZE: // TODO: strings?\n      case TypeKind.ISIZE: {\n        return module.createUnary(type.size == 64 ? UnaryOp.EqzI64 : UnaryOp.EqzI32, expr);\n      }\n      case TypeKind.F32: {\n        return module.createBinary(BinaryOp.EqF32, expr, module.createF32(0));\n      }\n      case TypeKind.F64: {\n        return module.createBinary(BinaryOp.EqF64, expr, module.createF64(0));\n      }\n      default: {\n        assert(false);\n        return module.createI32(1);\n      }\n    }\n  }\n\n  /** Creates a comparison whether an expression is 'true' in a broader sense. */\n  makeIsTrueish(expr: ExpressionRef, type: Type): ExpressionRef {\n    var module = this.module;\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.BOOL: {\n        expr = this.ensureSmallIntegerWrap(expr, type);\n        // fall-through\n      }\n      case TypeKind.I32:\n      case TypeKind.U32: {\n        return expr;\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        return module.createBinary(BinaryOp.NeI64, expr, module.createI64(0));\n      }\n      case TypeKind.USIZE: // TODO: strings?\n      case TypeKind.ISIZE: {\n        return type.size == 64\n          ? module.createBinary(BinaryOp.NeI64, expr, module.createI64(0))\n          : expr;\n      }\n      case TypeKind.F32: {\n        return module.createBinary(BinaryOp.NeF32, expr, module.createF32(0));\n      }\n      case TypeKind.F64: {\n        return module.createBinary(BinaryOp.NeF64, expr, module.createF64(0));\n      }\n      default: {\n        assert(false);\n        return module.createI32(0);\n      }\n    }\n  }\n\n  /** Makes an allocation expression for an instance of the specified class. */\n  makeAllocate(classInstance: Class, reportNode: Node): ExpressionRef {\n    var module = this.module;\n    var currentFunction = this.currentFunction;\n    var nativeSizeType = this.options.nativeSizeType;\n\n    // allocate the necessary memory and tee the pointer to a temp. local for reuse\n    var tempLocal = currentFunction.getTempLocal(classInstance.type, false);\n    var initializers = new Array<ExpressionRef>();\n    initializers.push(\n      module.createSetLocal(tempLocal.index,\n        compileAllocate(this, classInstance, reportNode)\n      )\n    );\n\n    // apply field initializers\n    if (classInstance.members) {\n      for (let member of classInstance.members.values()) {\n        if (member.kind == ElementKind.FIELD) {\n          let field = <Field>member;\n          let fieldType = field.type;\n          let nativeFieldType = fieldType.toNativeType();\n          let fieldDeclaration = field.prototype.declaration;\n          assert(!field.isAny(CommonFlags.CONST));\n          if (fieldDeclaration.initializer) { // use initializer\n            initializers.push(module.createStore(fieldType.byteSize,\n              module.createGetLocal(tempLocal.index, nativeSizeType),\n              this.compileExpression( // reports\n                fieldDeclaration.initializer,\n                fieldType,\n                ConversionKind.IMPLICIT,\n                WrapMode.NONE\n              ),\n              nativeFieldType,\n              field.memoryOffset\n            ));\n          } else { // initialize with zero\n            // TODO: might be unnecessary if the ctor initializes the field\n            let parameterIndex = (<FieldDeclaration>field.prototype.declaration).parameterIndex;\n            initializers.push(module.createStore(fieldType.byteSize,\n              module.createGetLocal(tempLocal.index, nativeSizeType),\n              parameterIndex >= 0 // initialized via parameter\n                ? module.createGetLocal(1 + parameterIndex, nativeFieldType)\n                : fieldType.toNativeZero(module),\n                nativeFieldType,\n              field.memoryOffset\n            ));\n          }\n        }\n      }\n    }\n\n    // return `this`\n    initializers.push(\n      module.createGetLocal(tempLocal.index, nativeSizeType)\n    );\n\n    currentFunction.freeTempLocal(tempLocal);\n    this.currentType = classInstance.type;\n    return module.createBlock(null, initializers, nativeSizeType);\n  }\n\n  /** Makes a conditional allocation expression inside of the constructor of the specified class. */\n  makeConditionalAllocate(classInstance: Class, reportNode: Node): ExpressionRef {\n    // requires that `this` is the first local\n    var module = this.module;\n    var nativeSizeType = this.options.nativeSizeType;\n    this.currentType = classInstance.type;\n    return module.createIf(\n      nativeSizeType == NativeType.I64\n        ? module.createBinary(\n            BinaryOp.NeI64,\n            module.createGetLocal(0, NativeType.I64),\n            module.createI64(0)\n          )\n        : module.createGetLocal(0, NativeType.I32),\n      module.createGetLocal(0, nativeSizeType),\n      module.createTeeLocal(0,\n        this.makeAllocate(classInstance, reportNode)\n      )\n    );\n  }\n\n  /** Adds the debug location of the specified expression at the specified range to the source map. */\n  addDebugLocation(expr: ExpressionRef, range: Range): void {\n    var currentFunction = this.currentFunction;\n    var source = range.source;\n    if (source.debugInfoIndex < 0) source.debugInfoIndex = this.module.addDebugInfoFile(source.normalizedPath);\n    range.debugInfoRef = expr;\n    currentFunction.debugLocations.push(range);\n  }\n}\n\n// helpers\n\nfunction mangleImportName(\n  element: Element,\n  declaration: DeclarationStatement\n): void {\n  // by default, use the file name as the module name\n  mangleImportName_moduleName = declaration.range.source.simplePath;\n  // and the internal name of the element within that file as the element name\n  mangleImportName_elementName = declaration.programLevelInternalName;\n\n  if (!element.hasDecorator(DecoratorFlags.EXTERNAL)) return;\n\n  var program = element.program;\n  var decorator = assert(findDecorator(DecoratorKind.EXTERNAL, declaration.decorators));\n  var args = decorator.arguments;\n  if (args && args.length) {\n    let arg = args[0];\n    // if one argument is given, override just the element name\n    // if two arguments are given, override both module and element name\n    if (arg.kind == NodeKind.LITERAL && (<LiteralExpression>arg).literalKind == LiteralKind.STRING) {\n      mangleImportName_elementName = (<StringLiteralExpression>arg).value;\n      if (args.length >= 2) {\n        arg = args[1];\n        if (arg.kind == NodeKind.LITERAL && (<LiteralExpression>arg).literalKind == LiteralKind.STRING) {\n          mangleImportName_moduleName = mangleImportName_elementName;\n          mangleImportName_elementName = (<StringLiteralExpression>arg).value;\n          if (args.length > 2) {\n            program.error(\n              DiagnosticCode.Expected_0_arguments_but_got_1,\n              decorator.range, \"2\", args.length.toString()\n            );\n          }\n        } else {\n          program.error(\n            DiagnosticCode.String_literal_expected,\n            arg.range\n          );\n        }\n      }\n    } else {\n      program.error(\n        DiagnosticCode.String_literal_expected,\n        arg.range\n      );\n    }\n  } else {\n    program.error(\n      DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\n      decorator.range, \"1\", \"0\"\n    );\n  }\n}\n\nvar mangleImportName_moduleName: string;\nvar mangleImportName_elementName: string;\n","/**\n * Generated from diagnosticsMessages.json. Do not edit.\n * @module diagnostics\n *//***/\n\n/* tslint:disable:max-line-length */\n\n/** Enum of available diagnostic codes. */\nexport enum DiagnosticCode {\n  Operation_not_supported = 100,\n  Operation_is_unsafe = 101,\n  User_defined_0 = 102,\n  Conversion_from_type_0_to_1_requires_an_explicit_cast = 200,\n  Conversion_from_type_0_to_1_will_require_an_explicit_cast_when_switching_between_32_64_bit = 201,\n  Type_0_cannot_be_changed_to_type_1 = 202,\n  Type_0_cannot_be_reinterpreted_as_type_1 = 203,\n  Basic_type_0_cannot_be_nullable = 204,\n  Cannot_export_a_mutable_global = 205,\n  Compiling_constant_with_non_constant_initializer_as_mutable = 206,\n  Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa = 207,\n  Unmanaged_classes_cannot_implement_interfaces = 208,\n  Invalid_regular_expression_flags = 209,\n  Implementation_0_must_match_the_signature_1 = 210,\n  Class_0_is_sealed_and_cannot_be_extended = 211,\n  Decorator_0_is_not_valid_here = 212,\n  Duplicate_decorator = 213,\n  An_allocator_must_be_declared_to_allocate_memory_Try_importing_allocator_arena_or_allocator_tlsf = 214,\n  Optional_parameter_must_have_an_initializer = 215,\n  Constructor_of_class_0_must_not_require_any_arguments = 216,\n  Function_0_cannot_be_inlined_into_itself = 217,\n  Cannot_access_method_0_without_calling_it_as_it_requires_this_to_be_set = 218,\n  Unterminated_string_literal = 1002,\n  Identifier_expected = 1003,\n  _0_expected = 1005,\n  A_file_cannot_have_a_reference_to_itself = 1006,\n  Trailing_comma_not_allowed = 1009,\n  Unexpected_token = 1012,\n  A_rest_parameter_must_be_last_in_a_parameter_list = 1014,\n  Parameter_cannot_have_question_mark_and_initializer = 1015,\n  A_required_parameter_cannot_follow_an_optional_parameter = 1016,\n  Statements_are_not_allowed_in_ambient_contexts = 1036,\n  Initializers_are_not_allowed_in_ambient_contexts = 1039,\n  _0_modifier_cannot_be_used_here = 1042,\n  A_rest_parameter_cannot_be_optional = 1047,\n  A_rest_parameter_cannot_have_an_initializer = 1048,\n  A_set_accessor_must_have_exactly_one_parameter = 1049,\n  A_set_accessor_parameter_cannot_have_an_initializer = 1052,\n  A_get_accessor_cannot_have_parameters = 1054,\n  Enum_member_must_have_initializer = 1061,\n  Type_parameters_cannot_appear_on_a_constructor_declaration = 1092,\n  Type_annotation_cannot_appear_on_a_constructor_declaration = 1093,\n  An_accessor_cannot_have_type_parameters = 1094,\n  A_set_accessor_cannot_have_a_return_type_annotation = 1095,\n  Type_parameter_list_cannot_be_empty = 1098,\n  A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement = 1104,\n  A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement = 1105,\n  A_return_statement_can_only_be_used_within_a_function_body = 1108,\n  Expression_expected = 1109,\n  Type_expected = 1110,\n  A_default_clause_cannot_appear_more_than_once_in_a_switch_statement = 1113,\n  Duplicate_label_0 = 1114,\n  Octal_literals_are_not_allowed_in_strict_mode = 1121,\n  Digit_expected = 1124,\n  Hexadecimal_digit_expected = 1125,\n  Unexpected_end_of_text = 1126,\n  Invalid_character = 1127,\n  _case_or_default_expected = 1130,\n  A_declare_modifier_cannot_be_used_in_an_already_ambient_context = 1038,\n  Type_argument_expected = 1140,\n  String_literal_expected = 1141,\n  Line_break_not_permitted_here = 1142,\n  Declaration_expected = 1146,\n  _const_declarations_must_be_initialized = 1155,\n  Unterminated_regular_expression_literal = 1161,\n  Interface_declaration_cannot_have_implements_clause = 1176,\n  Binary_digit_expected = 1177,\n  Octal_digit_expected = 1178,\n  An_implementation_cannot_be_declared_in_ambient_contexts = 1183,\n  An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive = 1198,\n  Unterminated_Unicode_escape_sequence = 1199,\n  Decorators_are_not_valid_here = 1206,\n  _abstract_modifier_can_only_appear_on_a_class_method_or_property_declaration = 1242,\n  Method_0_cannot_have_an_implementation_because_it_is_marked_abstract = 1245,\n  A_class_may_only_extend_another_class = 1311,\n  A_parameter_property_cannot_be_declared_using_a_rest_parameter = 1317,\n  Duplicate_identifier_0 = 2300,\n  Cannot_find_name_0 = 2304,\n  Module_0_has_no_exported_member_1 = 2305,\n  Generic_type_0_requires_1_type_argument_s = 2314,\n  Type_0_is_not_generic = 2315,\n  Type_0_is_not_assignable_to_type_1 = 2322,\n  Index_signature_is_missing_in_type_0 = 2329,\n  _this_cannot_be_referenced_in_current_location = 2332,\n  _super_can_only_be_referenced_in_a_derived_class = 2335,\n  Property_0_does_not_exist_on_type_1 = 2339,\n  Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures = 2349,\n  Cannot_use_new_with_an_expression_whose_type_lacks_a_construct_signature = 2351,\n  A_function_whose_declared_type_is_not_void_must_return_a_value = 2355,\n  The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access = 2357,\n  The_left_hand_side_of_an_assignment_expression_must_be_a_variable_or_a_property_access = 2364,\n  Operator_0_cannot_be_applied_to_types_1_and_2 = 2365,\n  _get_and_set_accessor_must_have_the_same_type = 2380,\n  Constructor_implementation_is_missing = 2390,\n  Function_implementation_is_missing_or_not_immediately_following_the_declaration = 2391,\n  Multiple_constructor_implementations_are_not_allowed = 2392,\n  Duplicate_function_implementation = 2393,\n  Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local = 2395,\n  Type_0_has_no_property_1 = 2460,\n  The_0_operator_cannot_be_applied_to_type_1 = 2469,\n  In_const_enum_declarations_member_initializer_must_be_constant_expression = 2474,\n  Export_declaration_conflicts_with_exported_declaration_of_0 = 2484,\n  Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property = 2540,\n  The_target_of_an_assignment_must_be_a_variable_or_a_property_access = 2541,\n  Index_signature_in_type_0_only_permits_reading = 2542,\n  Expected_0_arguments_but_got_1 = 2554,\n  Expected_at_least_0_arguments_but_got_1 = 2555,\n  Expected_0_type_arguments_but_got_1 = 2558,\n  A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums = 2651,\n  Constructor_of_class_0_is_private_and_only_accessible_within_the_class_declaration = 2673,\n  Constructor_of_class_0_is_protected_and_only_accessible_within_the_class_declaration = 2674,\n  Namespace_0_has_no_exported_member_1 = 2694,\n  File_0_not_found = 6054,\n  Numeric_separators_are_not_allowed_here = 6188,\n  Multiple_consecutive_numeric_separators_are_not_permitted = 6189\n}\n\n/** Translates a diagnostic code to its respective string. */\nexport function diagnosticCodeToString(code: DiagnosticCode): string {\n  switch (code) {\n    case 100: return \"Operation not supported.\";\n    case 101: return \"Operation is unsafe.\";\n    case 102: return \"User-defined: {0}\";\n    case 200: return \"Conversion from type '{0}' to '{1}' requires an explicit cast.\";\n    case 201: return \"Conversion from type '{0}' to '{1}' will require an explicit cast when switching between 32/64-bit.\";\n    case 202: return \"Type '{0}' cannot be changed to type '{1}'.\";\n    case 203: return \"Type '{0}' cannot be reinterpreted as type '{1}'.\";\n    case 204: return \"Basic type '{0}' cannot be nullable.\";\n    case 205: return \"Cannot export a mutable global.\";\n    case 206: return \"Compiling constant with non-constant initializer as mutable.\";\n    case 207: return \"Unmanaged classes cannot extend managed classes and vice-versa.\";\n    case 208: return \"Unmanaged classes cannot implement interfaces.\";\n    case 209: return \"Invalid regular expression flags.\";\n    case 210: return \"Implementation '{0}' must match the signature '{1}'.\";\n    case 211: return \"Class '{0}' is sealed and cannot be extended.\";\n    case 212: return \"Decorator '{0}' is not valid here.\";\n    case 213: return \"Duplicate decorator.\";\n    case 214: return \"An allocator must be declared to allocate memory. Try importing allocator/arena or allocator/tlsf.\";\n    case 215: return \"Optional parameter must have an initializer.\";\n    case 216: return \"Constructor of class '{0}' must not require any arguments.\";\n    case 217: return \"Function '{0}' cannot be inlined into itself.\";\n    case 218: return \"Cannot access method '{0}' without calling it as it requires 'this' to be set.\";\n    case 1002: return \"Unterminated string literal.\";\n    case 1003: return \"Identifier expected.\";\n    case 1005: return \"'{0}' expected.\";\n    case 1006: return \"A file cannot have a reference to itself.\";\n    case 1009: return \"Trailing comma not allowed.\";\n    case 1012: return \"Unexpected token.\";\n    case 1014: return \"A rest parameter must be last in a parameter list.\";\n    case 1015: return \"Parameter cannot have question mark and initializer.\";\n    case 1016: return \"A required parameter cannot follow an optional parameter.\";\n    case 1036: return \"Statements are not allowed in ambient contexts.\";\n    case 1039: return \"Initializers are not allowed in ambient contexts.\";\n    case 1042: return \"'{0}' modifier cannot be used here.\";\n    case 1047: return \"A rest parameter cannot be optional.\";\n    case 1048: return \"A rest parameter cannot have an initializer.\";\n    case 1049: return \"A 'set' accessor must have exactly one parameter.\";\n    case 1052: return \"A 'set' accessor parameter cannot have an initializer.\";\n    case 1054: return \"A 'get' accessor cannot have parameters.\";\n    case 1061: return \"Enum member must have initializer.\";\n    case 1092: return \"Type parameters cannot appear on a constructor declaration.\";\n    case 1093: return \"Type annotation cannot appear on a constructor declaration.\";\n    case 1094: return \"An accessor cannot have type parameters.\";\n    case 1095: return \"A 'set' accessor cannot have a return type annotation.\";\n    case 1098: return \"Type parameter list cannot be empty.\";\n    case 1104: return \"A 'continue' statement can only be used within an enclosing iteration statement.\";\n    case 1105: return \"A 'break' statement can only be used within an enclosing iteration or switch statement.\";\n    case 1108: return \"A 'return' statement can only be used within a function body.\";\n    case 1109: return \"Expression expected.\";\n    case 1110: return \"Type expected.\";\n    case 1113: return \"A 'default' clause cannot appear more than once in a 'switch' statement.\";\n    case 1114: return \"Duplicate label '{0}'.\";\n    case 1121: return \"Octal literals are not allowed in strict mode.\";\n    case 1124: return \"Digit expected.\";\n    case 1125: return \"Hexadecimal digit expected.\";\n    case 1126: return \"Unexpected end of text.\";\n    case 1127: return \"Invalid character.\";\n    case 1130: return \"'case' or 'default' expected.\";\n    case 1038: return \"A 'declare' modifier cannot be used in an already ambient context.\";\n    case 1140: return \"Type argument expected.\";\n    case 1141: return \"String literal expected.\";\n    case 1142: return \"Line break not permitted here.\";\n    case 1146: return \"Declaration expected.\";\n    case 1155: return \"'const' declarations must be initialized.\";\n    case 1161: return \"Unterminated regular expression literal.\";\n    case 1176: return \"Interface declaration cannot have 'implements' clause.\";\n    case 1177: return \"Binary digit expected.\";\n    case 1178: return \"Octal digit expected.\";\n    case 1183: return \"An implementation cannot be declared in ambient contexts.\";\n    case 1198: return \"An extended Unicode escape value must be between 0x0 and 0x10FFFF inclusive.\";\n    case 1199: return \"Unterminated Unicode escape sequence.\";\n    case 1206: return \"Decorators are not valid here.\";\n    case 1242: return \"'abstract' modifier can only appear on a class, method, or property declaration.\";\n    case 1245: return \"Method '{0}' cannot have an implementation because it is marked abstract.\";\n    case 1311: return \"A class may only extend another class.\";\n    case 1317: return \"A parameter property cannot be declared using a rest parameter.\";\n    case 2300: return \"Duplicate identifier '{0}'.\";\n    case 2304: return \"Cannot find name '{0}'.\";\n    case 2305: return \"Module '{0}' has no exported member '{1}'.\";\n    case 2314: return \"Generic type '{0}' requires {1} type argument(s).\";\n    case 2315: return \"Type '{0}' is not generic.\";\n    case 2322: return \"Type '{0}' is not assignable to type '{1}'.\";\n    case 2329: return \"Index signature is missing in type '{0}'.\";\n    case 2332: return \"'this' cannot be referenced in current location.\";\n    case 2335: return \"'super' can only be referenced in a derived class.\";\n    case 2339: return \"Property '{0}' does not exist on type '{1}'.\";\n    case 2349: return \"Cannot invoke an expression whose type lacks a call signature. Type '{0}' has no compatible call signatures.\";\n    case 2351: return \"Cannot use 'new' with an expression whose type lacks a construct signature.\";\n    case 2355: return \"A function whose declared type is not 'void' must return a value.\";\n    case 2357: return \"The operand of an increment or decrement operator must be a variable or a property access.\";\n    case 2364: return \"The left-hand side of an assignment expression must be a variable or a property access.\";\n    case 2365: return \"Operator '{0}' cannot be applied to types '{1}' and '{2}'.\";\n    case 2380: return \"'get' and 'set' accessor must have the same type.\";\n    case 2390: return \"Constructor implementation is missing.\";\n    case 2391: return \"Function implementation is missing or not immediately following the declaration.\";\n    case 2392: return \"Multiple constructor implementations are not allowed.\";\n    case 2393: return \"Duplicate function implementation.\";\n    case 2395: return \"Individual declarations in merged declaration '{0}' must be all exported or all local.\";\n    case 2460: return \"Type '{0}' has no property '{1}'.\";\n    case 2469: return \"The '{0}' operator cannot be applied to type '{1}'.\";\n    case 2474: return \"In 'const' enum declarations member initializer must be constant expression.\";\n    case 2484: return \"Export declaration conflicts with exported declaration of '{0}'.\";\n    case 2540: return \"Cannot assign to '{0}' because it is a constant or a read-only property.\";\n    case 2541: return \"The target of an assignment must be a variable or a property access.\";\n    case 2542: return \"Index signature in type '{0}' only permits reading.\";\n    case 2554: return \"Expected {0} arguments, but got {1}.\";\n    case 2555: return \"Expected at least {0} arguments, but got {1}.\";\n    case 2558: return \"Expected {0} type arguments, but got {1}.\";\n    case 2651: return \"A member initializer in a enum declaration cannot reference members declared after it, including members defined in other enums.\";\n    case 2673: return \"Constructor of class '{0}' is private and only accessible within the class declaration.\";\n    case 2674: return \"Constructor of class '{0}' is protected and only accessible within the class declaration.\";\n    case 2694: return \"Namespace '{0}' has no exported member '{1}'.\";\n    case 6054: return \"File '{0}' not found.\";\n    case 6188: return \"Numeric separators are not allowed here.\";\n    case 6189: return \"Multiple consecutive numeric separators are not permitted.\";\n    default: return \"\";\n  }\n}\n","/**\n * Resolve infrastructure to obtain types and elements.\n * @module resolver\n *//***/\n\nimport {\n  DiagnosticEmitter,\n  DiagnosticCode\n} from \"./diagnostics\";\n\nimport {\n  Program,\n  ElementKind,\n  OperatorKind,\n  FlowFlags,\n\n  Element,\n  Class,\n  ClassPrototype,\n  Function,\n  FunctionTarget,\n  FunctionPrototype,\n  VariableLikeElement,\n  Property,\n  DecoratorFlags,\n  FieldPrototype,\n  Field\n} from \"./program\";\n\nimport {\n  SignatureNode,\n  ParameterKind,\n  CommonTypeNode,\n  NodeKind,\n  TypeNode,\n  TypeParameterNode,\n  Node,\n  Range,\n  IdentifierExpression,\n  CallExpression,\n  ElementAccessExpression,\n  PropertyAccessExpression,\n  LiteralExpression,\n  LiteralKind,\n  ParenthesizedExpression,\n  AssertionExpression,\n  Expression\n} from \"./ast\";\n\nimport {\n  Type,\n  Signature,\n  typesToString\n} from \"./types\";\n\nimport {\n  PATH_DELIMITER,\n  INSTANCE_DELIMITER,\n  CommonFlags\n} from \"./common\";\n\n/** Indicates whether errors are reported or not. */\nexport enum ReportMode {\n  /** Report errors. */\n  REPORT,\n  /** Swallow errors. */\n  SWALLOW\n}\n\n/** Provides tools to resolve types and expressions. */\nexport class Resolver extends DiagnosticEmitter {\n\n  /** The program this resolver belongs to. */\n  program: Program;\n\n  /** Target expression of the previously resolved property or element access. */\n  currentThisExpression: Expression | null = null;\n  /** Element expression of the previously resolved element access. */\n  currentElementExpression : Expression | null = null;\n\n  /** Constructs the resolver for the specified program. */\n  constructor(program: Program) {\n    super(program.diagnostics);\n    this.program = program;\n  }\n\n  /** Resolves a {@link CommonTypeNode} to a concrete {@link Type}. */\n  resolveType(\n    node: CommonTypeNode,\n    contextualTypeArguments: Map<string,Type> | null = null,\n    reportMode = ReportMode.REPORT\n  ): Type | null {\n\n    // handle signatures specifically\n    if (node.kind == NodeKind.SIGNATURE) {\n      let signature = this.resolveSignature(<SignatureNode>node, contextualTypeArguments, reportMode);\n      if (!signature) return null;\n      return node.isNullable ? signature.type.asNullable() : signature.type;\n    }\n\n    // now dealing with TypeNode\n    assert(node.kind == NodeKind.TYPE);\n    var typeNode = <TypeNode>node;\n    var simpleName = typeNode.name.text;\n    var globalName = simpleName;\n    var localName = typeNode.range.source.internalPath + PATH_DELIMITER + simpleName; // TODO cache\n\n    // check file-global / program-global enum or class\n    {\n      let elementsLookup = this.program.elementsLookup;\n      let element: Element | null;\n      if (\n        (element = elementsLookup.get(localName)) || // file-global\n        (element = elementsLookup.get(globalName))   // program-global\n      ) {\n        switch (element.kind) {\n          case ElementKind.ENUM: {\n            if (typeNode.typeArguments !== null && typeNode.typeArguments.length) {\n              if (reportMode == ReportMode.REPORT) {\n                this.error(\n                  DiagnosticCode.Type_0_is_not_generic,\n                  node.range, element.internalName\n                );\n              }\n              return null;\n            }\n            return Type.i32;\n          }\n          case ElementKind.CLASS_PROTOTYPE: {\n            let instance = this.resolveClassInclTypeArguments(\n              <ClassPrototype>element,\n              typeNode.typeArguments,\n              contextualTypeArguments,\n              node\n            ); // reports\n            if (!instance) return null;\n            return node.isNullable ? instance.type.asNullable() : instance.type;\n          }\n        }\n      }\n    }\n\n    // check (global) type alias\n    {\n      let alias = this.program.typeAliases.get(simpleName);\n      if (alias) return this.resolveType(alias.type, contextualTypeArguments, reportMode);\n    }\n\n    // resolve parameters\n    {\n      let typeArgumentNodes = typeNode.typeArguments;\n      if (typeArgumentNodes) {\n        let numTypeArguments = typeArgumentNodes.length;\n        let paramTypes = new Array<Type>(numTypeArguments);\n        for (let i = 0; i < numTypeArguments; ++i) {\n          let paramType = this.resolveType( // reports\n            typeArgumentNodes[i],\n            contextualTypeArguments,\n            reportMode\n          );\n          if (!paramType) return null;\n          paramTypes[i] = paramType;\n        }\n        if (numTypeArguments) { // can't be a placeholder if it has parameters\n          let instanceKey = typesToString(paramTypes);\n          if (instanceKey.length) {\n            localName += \"<\" + instanceKey + \">\";\n            globalName += \"<\" + instanceKey + \">\";\n          }\n        } else if (contextualTypeArguments) {\n          let placeholderType = contextualTypeArguments.get(globalName);\n          if (placeholderType) return placeholderType;\n        }\n      }\n    }\n\n    // check file-global / program-global type\n    {\n      let typesLookup = this.program.typesLookup;\n      let type: Type | null;\n      if (\n        (type = typesLookup.get(localName)) ||\n        (type = typesLookup.get(globalName))\n      ) {\n        return type;\n      }\n    }\n\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Cannot_find_name_0,\n        typeNode.name.range, globalName\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a {@link SignatureNode} to a concrete {@link Signature}. */\n  resolveSignature(\n    node: SignatureNode,\n    contextualTypeArguments: Map<string,Type> | null = null,\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Signature | null {\n    var explicitThisType = node.explicitThisType;\n    var thisType: Type | null = null;\n    if (explicitThisType) {\n      thisType = this.resolveType(explicitThisType, contextualTypeArguments, reportMode);\n      if (!thisType) return null;\n    }\n    var parameterTypeNodes = node.parameters;\n    var numParameters = parameterTypeNodes.length;\n    var parameterTypes = new Array<Type>(numParameters);\n    var parameterNames = new Array<string>(numParameters);\n    var requiredParameters = 0;\n    var hasRest = false;\n    for (let i = 0; i < numParameters; ++i) {\n      let parameterTypeNode = parameterTypeNodes[i];\n      switch (parameterTypeNode.parameterKind) {\n        case ParameterKind.DEFAULT: {\n          requiredParameters = i + 1;\n          break;\n        }\n        case ParameterKind.REST: {\n          assert(i == numParameters);\n          hasRest = true;\n          break;\n        }\n      }\n      let parameterType = this.resolveType(\n        assert(parameterTypeNode.type),\n        contextualTypeArguments,\n        reportMode\n      );\n      if (!parameterType) return null;\n      parameterTypes[i] = parameterType;\n      parameterNames[i] = parameterTypeNode.name.text;\n    }\n    var returnTypeNode = node.returnType;\n    var returnType: Type | null;\n    if (returnTypeNode) {\n      returnType = this.resolveType(returnTypeNode, contextualTypeArguments, reportMode);\n      if (!returnType) return null;\n    } else {\n      returnType = Type.void;\n    }\n    var signature = new Signature(parameterTypes, returnType, thisType);\n    signature.parameterNames = parameterNames;\n    signature.requiredParameters = requiredParameters;\n    signature.hasRest = hasRest;\n    return signature;\n  }\n\n  /** Resolves an array of type arguments to concrete types. */\n  resolveTypeArguments(\n    typeParameters: TypeParameterNode[],\n    typeArgumentNodes: CommonTypeNode[] | null,\n    contextualTypeArguments: Map<string,Type> | null = null,\n    alternativeReportNode: Node | null = null,\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type[] | null {\n    var parameterCount = typeParameters.length;\n    var argumentCount = typeArgumentNodes ? typeArgumentNodes.length : 0;\n    if (parameterCount != argumentCount) {\n      if (argumentCount) {\n        this.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          Range.join(\n            (<TypeNode[]>typeArgumentNodes)[0].range,\n            (<TypeNode[]>typeArgumentNodes)[argumentCount - 1].range\n          ),\n          parameterCount.toString(10), argumentCount.toString(10)\n        );\n      } else if (alternativeReportNode) {\n        this.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          alternativeReportNode.range.atEnd, parameterCount.toString(10), \"0\"\n        );\n      }\n      return null;\n    }\n    var typeArguments = new Array<Type>(parameterCount);\n    for (let i = 0; i < parameterCount; ++i) {\n      let type = this.resolveType( // reports\n        (<TypeNode[]>typeArgumentNodes)[i],\n        contextualTypeArguments,\n        reportMode\n      );\n      if (!type) return null;\n      // TODO: check extendsType\n      typeArguments[i] = type;\n    }\n    return typeArguments;\n  }\n\n  /** Resolves an identifier to the element it refers to. */\n  resolveIdentifier(\n    identifier: IdentifierExpression,\n    context: Element | null,\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var name = identifier.text;\n    var element: Element | null;\n\n    if (context) {\n\n      switch (context.kind) {\n        case ElementKind.FUNCTION: { // search locals, use prototype\n          element = (<Function>context).flow.getScopedLocal(name);\n          if (element) {\n            this.currentThisExpression = null;\n            this.currentElementExpression = null;\n            return element;\n          }\n          context = (<Function>context).prototype.parent;\n          break;\n        }\n        case ElementKind.CLASS: { // use prototype\n          context = (<Class>context).prototype.parent;\n          break;\n        }\n      }\n\n      // search context\n      while (context) {\n        let members = context.members;\n        if (members) {\n          if (element = members.get(name)) {\n            this.currentThisExpression = null;\n            this.currentElementExpression = null;\n            return element;\n          }\n        }\n        context = context.parent;\n      }\n    }\n\n    // search current file\n    var elementsLookup = this.program.elementsLookup;\n    if (element = elementsLookup.get(identifier.range.source.internalPath + PATH_DELIMITER + name)) {\n      this.currentThisExpression = null;\n      this.currentElementExpression = null;\n      return element; // GLOBAL, FUNCTION_PROTOTYPE, CLASS_PROTOTYPE\n    }\n\n    // search global scope\n    if (element = elementsLookup.get(name)) {\n      this.currentThisExpression = null;\n      this.currentElementExpression = null;\n      return element; // GLOBAL, FUNCTION_PROTOTYPE, CLASS_PROTOTYPE\n    }\n\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Cannot_find_name_0,\n        identifier.range, name\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a property access to the element it refers to. */\n  resolvePropertyAccess(\n    propertyAccess: PropertyAccessExpression,\n    contextualFunction: Function,\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    // start by resolving the lhs target (expression before the last dot)\n    var targetExpression = propertyAccess.expression;\n    var target = this.resolveExpression(targetExpression, contextualFunction, reportMode); // reports\n    if (!target) return null;\n\n    // at this point we know exactly what the target is, so look up the element within\n    var propertyName = propertyAccess.property.text;\n\n    // Resolve variable-likes to the class type they reference first\n    switch (target.kind) {\n      case ElementKind.GLOBAL:\n      case ElementKind.LOCAL:\n      case ElementKind.FIELD: {\n        let type = (<VariableLikeElement>target).type;\n        assert(type != Type.void);\n        let classReference = type.classReference;\n        if (!classReference) {\n          this.error(\n            DiagnosticCode.Property_0_does_not_exist_on_type_1,\n            propertyAccess.property.range, propertyName, (<VariableLikeElement>target).type.toString()\n          );\n          return null;\n        }\n        target = classReference;\n        break;\n      }\n      case ElementKind.PROPERTY: {\n        let getter = this.resolveFunction(\n          assert((<Property>target).getterPrototype),\n          null,\n          null,\n          reportMode\n        );\n        if (!getter) return null;\n        let classReference = getter.signature.returnType.classReference;\n        if (!classReference) {\n          this.error(\n            DiagnosticCode.Property_0_does_not_exist_on_type_1,\n            propertyAccess.property.range, propertyName, getter.signature.returnType.toString()\n          );\n          return null;\n        }\n        target = classReference;\n        break;\n      }\n      case ElementKind.CLASS: {\n        let elementExpression = this.currentElementExpression;\n        if (elementExpression) {\n          let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET);\n          if (!indexedGet) {\n            this.error(\n              DiagnosticCode.Index_signature_is_missing_in_type_0,\n              elementExpression.range, (<Class>target).internalName\n            );\n            return null;\n          }\n          let returnType = indexedGet.signature.returnType;\n          if (!(target = returnType.classReference)) {\n            this.error(\n              DiagnosticCode.Property_0_does_not_exist_on_type_1,\n              propertyAccess.property.range, propertyName, returnType.toString()\n            );\n            return null;\n          }\n        }\n        break;\n      }\n    }\n\n    // Look up the member within\n    switch (target.kind) {\n      case ElementKind.CLASS_PROTOTYPE:\n      case ElementKind.CLASS: {\n        do {\n          let members = target.members;\n          let member: Element | null;\n          if (members && (member = members.get(propertyName))) {\n            this.currentThisExpression = targetExpression;\n            this.currentElementExpression = null;\n            return member; // instance FIELD, static GLOBAL, FUNCTION_PROTOTYPE...\n          }\n          // traverse inherited static members on the base prototype if target is a class prototype\n          if (target.kind == ElementKind.CLASS_PROTOTYPE) {\n            if ((<ClassPrototype>target).basePrototype) {\n              target = <ClassPrototype>(<ClassPrototype>target).basePrototype;\n            } else {\n              break;\n            }\n          // traverse inherited instance members on the base class if target is a class instance\n          } else if (target.kind == ElementKind.CLASS) {\n            if ((<Class>target).base) {\n              target = <Class>(<Class>target).base;\n            } else {\n              break;\n            }\n          } else {\n            break;\n          }\n        } while (true);\n        break;\n      }\n      default: { // enums or other namespace-like elements\n        let members = target.members;\n        if (members) {\n          let member = members.get(propertyName);\n          if (member) {\n            this.currentThisExpression = targetExpression;\n            this.currentElementExpression = null;\n            return member; // static ENUMVALUE, static GLOBAL, static FUNCTION_PROTOTYPE...\n          }\n        }\n        break;\n      }\n    }\n    this.error(\n      DiagnosticCode.Property_0_does_not_exist_on_type_1,\n      propertyAccess.property.range, propertyName, target.internalName\n    );\n    return null;\n  }\n\n  resolveElementAccess(\n    elementAccess: ElementAccessExpression,\n    contextualFunction: Function,\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var targetExpression = elementAccess.expression;\n    var target = this.resolveExpression(targetExpression, contextualFunction, reportMode);\n    if (!target) return null;\n    switch (target.kind) {\n      case ElementKind.GLOBAL:\n      case ElementKind.LOCAL:\n      case ElementKind.FIELD: {\n        let type = (<VariableLikeElement>target).type;\n        if (target = type.classReference) {\n          this.currentThisExpression = targetExpression;\n          this.currentElementExpression = elementAccess.elementExpression;\n          return target;\n        }\n        break;\n      }\n      case ElementKind.CLASS: { // element access on element access\n        let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET);\n        if (!indexedGet) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Index_signature_is_missing_in_type_0,\n              elementAccess.range, (<Class>target).internalName\n            );\n          }\n          return null;\n        }\n        let returnType = indexedGet.signature.returnType;\n        if (target = returnType.classReference) {\n          this.currentThisExpression = targetExpression;\n          this.currentElementExpression = elementAccess.elementExpression;\n          return target;\n        }\n        break;\n      }\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        targetExpression.range\n      );\n    }\n    return null;\n  }\n\n  resolveExpression(\n    expression: Expression,\n    contextualFunction: Function,\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    while (expression.kind == NodeKind.PARENTHESIZED) {\n      expression = (<ParenthesizedExpression>expression).expression;\n    }\n    switch (expression.kind) {\n      case NodeKind.ASSERTION: {\n        let type = this.resolveType(\n          (<AssertionExpression>expression).toType,\n          contextualFunction.flow.contextualTypeArguments,\n          reportMode\n        );\n        if (type) {\n          let classType = type.classReference;\n          if (classType) {\n            this.currentThisExpression = null;\n            this.currentElementExpression = null;\n            return classType;\n          }\n        }\n        return null;\n      }\n      case NodeKind.BINARY: { // TODO: string concatenation, mostly\n        throw new Error(\"not implemented\");\n      }\n      case NodeKind.THIS: { // -> Class / ClassPrototype\n        if (contextualFunction.flow.is(FlowFlags.INLINE_CONTEXT)) {\n          let explicitLocal = contextualFunction.flow.getScopedLocal(\"this\");\n          if (explicitLocal) {\n            this.currentThisExpression = null;\n            this.currentElementExpression = null;\n            return explicitLocal;\n          }\n        }\n        let parent = contextualFunction.parent;\n        if (parent) {\n          this.currentThisExpression = null;\n          this.currentElementExpression = null;\n          return parent;\n        }\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode._this_cannot_be_referenced_in_current_location,\n            expression.range\n          );\n        }\n        return null;\n      }\n      case NodeKind.SUPER: { // -> Class\n        if (contextualFunction.flow.is(FlowFlags.INLINE_CONTEXT)) {\n          let explicitLocal = contextualFunction.flow.getScopedLocal(\"super\");\n          if (explicitLocal) {\n            this.currentThisExpression = null;\n            this.currentElementExpression = null;\n            return explicitLocal;\n          }\n        }\n        let parent = contextualFunction.parent;\n        if (parent && parent.kind == ElementKind.CLASS && (parent = (<Class>parent).base)) {\n          this.currentThisExpression = null;\n          this.currentElementExpression = null;\n          return parent;\n        }\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode._super_can_only_be_referenced_in_a_derived_class,\n            expression.range\n          );\n        }\n        return null;\n      }\n      case NodeKind.IDENTIFIER: {\n        return this.resolveIdentifier(<IdentifierExpression>expression, contextualFunction, reportMode);\n      }\n      case NodeKind.LITERAL: {\n        switch ((<LiteralExpression>expression).literalKind) {\n          case LiteralKind.STRING: {\n            this.currentThisExpression = expression;\n            this.currentElementExpression = null;\n            return this.program.stringInstance;\n          }\n          // case LiteralKind.ARRAY: // TODO\n        }\n        break;\n      }\n      case NodeKind.PROPERTYACCESS: {\n        return this.resolvePropertyAccess(\n          <PropertyAccessExpression>expression,\n          contextualFunction,\n          reportMode\n        );\n      }\n      case NodeKind.ELEMENTACCESS: {\n        return this.resolveElementAccess(\n          <ElementAccessExpression>expression,\n          contextualFunction,\n          reportMode\n        );\n      }\n      case NodeKind.CALL: {\n        let targetExpression = (<CallExpression>expression).expression;\n        let target = this.resolveExpression(targetExpression, contextualFunction, reportMode);\n        if (!target) return null;\n        if (target.kind == ElementKind.FUNCTION_PROTOTYPE) {\n          let instance = this.resolveFunctionInclTypeArguments(\n            <FunctionPrototype>target,\n            (<CallExpression>expression).typeArguments,\n            contextualFunction.flow.contextualTypeArguments,\n            expression,\n            reportMode\n          );\n          if (!instance) return null;\n          let returnType = instance.signature.returnType;\n          let classType = returnType.classReference;\n          if (classType) {\n            // reuse resolvedThisExpression (might be property access)\n            // reuse resolvedElementExpression (might be element access)\n            return classType;\n          } else {\n            let signature = returnType.signatureReference;\n            if (signature) {\n              let functionTarget = signature.cachedFunctionTarget;\n              if (!functionTarget) {\n                functionTarget = new FunctionTarget(this.program, signature);\n                signature.cachedFunctionTarget = functionTarget;\n              }\n              // reuse resolvedThisExpression (might be property access)\n              // reuse resolvedElementExpression (might be element access)\n              return functionTarget;\n            }\n          }\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n              targetExpression.range, target.internalName\n            );\n          }\n          return null;\n        }\n        break;\n      }\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        expression.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a function prototype to an instance using the specified concrete type arguments. */\n  resolveFunction(\n    prototype: FunctionPrototype,\n    typeArguments: Type[] | null,\n    contextualTypeArguments: Map<string,Type> | null = null,\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Function | null {\n    var instanceKey = typeArguments ? typesToString(typeArguments) : \"\";\n    var instance = prototype.instances.get(instanceKey);\n    if (instance) return instance;\n\n    var declaration = prototype.declaration;\n    var isInstance = prototype.is(CommonFlags.INSTANCE);\n    var classPrototype = prototype.classPrototype;\n\n    // inherit contextual type arguments as provided. might be overridden.\n    var inheritedTypeArguments = contextualTypeArguments;\n    contextualTypeArguments = new Map();\n    if (inheritedTypeArguments) {\n      for (let [inheritedName, inheritedType] of inheritedTypeArguments) {\n        contextualTypeArguments.set(\n          inheritedName,\n          inheritedType\n        );\n      }\n    }\n\n    // override with class type arguments if a partially resolved instance method\n    var classTypeArguments = prototype.classTypeArguments;\n    if (classTypeArguments) { // set only if partially resolved\n      assert(prototype.is(CommonFlags.INSTANCE));\n      let classDeclaration = assert(classPrototype).declaration;\n      let classTypeParameters = classDeclaration.typeParameters;\n      let numClassTypeParameters = classTypeParameters.length;\n      assert(numClassTypeParameters == classTypeArguments.length);\n      for (let i = 0; i < numClassTypeParameters; ++i) {\n        contextualTypeArguments.set(\n          classTypeParameters[i].name.text,\n          classTypeArguments[i]\n        );\n      }\n    } else {\n      assert(!classTypeArguments);\n    }\n\n    // override with function specific type arguments\n    var signatureNode = declaration.signature;\n    var functionTypeParameters = declaration.typeParameters;\n    var numFunctionTypeArguments: i32;\n    if (typeArguments && (numFunctionTypeArguments = typeArguments.length)) {\n      assert(functionTypeParameters && numFunctionTypeArguments == functionTypeParameters.length);\n      for (let i = 0; i < numFunctionTypeArguments; ++i) {\n        contextualTypeArguments.set(\n          (<TypeParameterNode[]>functionTypeParameters)[i].name.text,\n          typeArguments[i]\n        );\n      }\n    } else {\n      assert(!functionTypeParameters || functionTypeParameters.length == 0);\n    }\n\n    // resolve class if an instance method\n    var classInstance: Class | null = null;\n    var thisType: Type | null = null;\n    if (isInstance) {\n      classInstance = this.resolveClass(\n        assert(classPrototype),\n        classTypeArguments,\n        contextualTypeArguments,\n        reportMode\n      );\n      if (!classInstance) return null;\n      thisType = classInstance.type;\n      contextualTypeArguments.set(\"this\", thisType);\n    }\n\n    // resolve signature node\n    var signatureParameters = signatureNode.parameters;\n    var signatureParameterCount = signatureParameters.length;\n    var parameterTypes = new Array<Type>(signatureParameterCount);\n    var parameterNames = new Array<string>(signatureParameterCount);\n    var requiredParameters = 0;\n    for (let i = 0; i < signatureParameterCount; ++i) {\n      let parameterDeclaration = signatureParameters[i];\n      if (parameterDeclaration.parameterKind == ParameterKind.DEFAULT) {\n        requiredParameters = i + 1;\n      }\n      let typeNode = assert(parameterDeclaration.type);\n      let parameterType = this.resolveType(typeNode, contextualTypeArguments, reportMode);\n      if (!parameterType) return null;\n      parameterTypes[i] = parameterType;\n      parameterNames[i] = parameterDeclaration.name.text;\n    }\n\n    var returnType: Type;\n    if (prototype.is(CommonFlags.SET)) {\n      returnType = Type.void; // not annotated\n    } else if (prototype.is(CommonFlags.CONSTRUCTOR)) {\n      returnType = assert(classInstance).type; // not annotated\n    } else {\n      let typeNode = assert(signatureNode.returnType);\n      let type = this.resolveType(typeNode, contextualTypeArguments, reportMode);\n      if (!type) return null;\n      returnType = type;\n    }\n\n    var signature = new Signature(parameterTypes, returnType, thisType);\n    signature.parameterNames = parameterNames;\n    signature.requiredParameters = requiredParameters;\n\n    var internalName = prototype.internalName;\n    if (instanceKey.length) internalName += \"<\" + instanceKey + \">\";\n    instance = new Function(\n      prototype,\n      internalName,\n      signature,\n      classInstance\n        ? classInstance\n        : classPrototype,\n      contextualTypeArguments\n    );\n    prototype.instances.set(instanceKey, instance);\n    this.program.instancesLookup.set(internalName, instance);\n    return instance;\n  }\n\n  /** Resolves a function prototype partially by applying the specified type arguments. */\n  resolveFunctionPartially(\n    prototype: FunctionPrototype,\n    typeArguments: Type[] | null,\n    reportMode: ReportMode = ReportMode.REPORT\n  ): FunctionPrototype | null {\n    assert(prototype.is(CommonFlags.INSTANCE));\n    var classPrototype = assert(prototype.classPrototype);\n\n    if (!(typeArguments && typeArguments.length)) return prototype; // no need to clone\n\n    var simpleName = prototype.simpleName;\n    var partialKey = typesToString(typeArguments);\n    var partialPrototype = new FunctionPrototype(\n      this.program,\n      simpleName,\n      classPrototype.internalName + \"<\" + partialKey + \">\" + INSTANCE_DELIMITER + simpleName,\n      prototype.declaration,\n      classPrototype,\n      prototype.decoratorFlags\n    );\n    partialPrototype.flags = prototype.flags;\n    partialPrototype.operatorKind = prototype.operatorKind;\n    partialPrototype.classTypeArguments = typeArguments;\n    return partialPrototype;\n  }\n\n  /** Resolves a function prototype to an instance by first resolving the specified type arguments. */\n  resolveFunctionInclTypeArguments(\n    prototype: FunctionPrototype,\n    typeArgumentNodes: CommonTypeNode[] | null,\n    contextualTypeArguments: Map<string,Type> | null,\n    reportNode: Node,\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Function | null {\n    var resolvedTypeArguments: Type[] | null = null;\n    if (prototype.is(CommonFlags.GENERIC)) {\n      assert(typeArgumentNodes != null && typeArgumentNodes.length != 0);\n      resolvedTypeArguments = this.resolveTypeArguments( // reports\n        assert(prototype.declaration.typeParameters),\n        typeArgumentNodes,\n        contextualTypeArguments,\n        reportNode,\n        reportMode\n      );\n      if (!resolvedTypeArguments) return null;\n    }\n    return this.resolveFunction(\n      prototype,\n      resolvedTypeArguments,\n      contextualTypeArguments,\n      reportMode\n    );\n  }\n\n  /** Resolves a class prototype using the specified concrete type arguments. */\n  resolveClass(\n    prototype: ClassPrototype,\n    typeArguments: Type[] | null,\n    contextualTypeArguments: Map<string,Type> | null = null,\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Class | null {\n    var instanceKey = typeArguments ? typesToString(typeArguments) : \"\";\n\n    // Check if this exact instance has already been resolved\n    var instance = prototype.instances.get(instanceKey);\n    if (instance) return instance;\n\n    // Copy contextual type arguments so we don't pollute the original map\n    var inheritedTypeArguments = contextualTypeArguments;\n    contextualTypeArguments = new Map();\n    if (inheritedTypeArguments) {\n      for (let [inheritedName, inheritedType] of inheritedTypeArguments) {\n        contextualTypeArguments.set(inheritedName, inheritedType);\n      }\n    }\n\n    // Insert contextual type arguments for this operation. Internally, this method is always\n    // called with matching type parameter / argument counts.\n    var declaration = prototype.declaration;\n    if (typeArguments) {\n      let typeParameters = declaration.typeParameters;\n      let expectedTypeArguments = typeParameters.length;\n      let actualTypeArguments = typeArguments.length;\n      assert(actualTypeArguments == expectedTypeArguments);\n      for (let i = 0; i < actualTypeArguments; ++i) {\n        contextualTypeArguments.set(typeParameters[i].name.text, typeArguments[i]);\n      }\n    } else {\n      assert(declaration.typeParameters.length == 0);\n    }\n\n    // Resolve base class if applicable\n    var baseClass: Class | null = null;\n    if (declaration.extendsType) {\n      let baseClassType = this.resolveType(\n        declaration.extendsType,\n        contextualTypeArguments,\n        reportMode\n      );\n      if (!baseClassType) return null;\n      if (!(baseClass = baseClassType.classReference)) {\n        if (reportMode == ReportMode.REPORT) {\n          this.program.error(\n            DiagnosticCode.A_class_may_only_extend_another_class,\n            declaration.extendsType.range\n          );\n        }\n        return null;\n      }\n      if (baseClass.hasDecorator(DecoratorFlags.SEALED)) {\n        if (reportMode == ReportMode.REPORT) {\n          this.program.error(\n            DiagnosticCode.Class_0_is_sealed_and_cannot_be_extended,\n            declaration.extendsType.range, baseClass.internalName\n          );\n        }\n        return null;\n      }\n      if (baseClass.hasDecorator(DecoratorFlags.UNMANAGED) != prototype.hasDecorator(DecoratorFlags.UNMANAGED)) {\n        if (reportMode == ReportMode.REPORT) {\n          this.program.error(\n            DiagnosticCode.Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa,\n            Range.join(declaration.name.range, declaration.extendsType.range)\n          );\n        }\n        return null;\n      }\n    }\n\n    // Construct the instance and remember that it has been resolved already\n    var simpleName = prototype.simpleName;\n    var internalName = prototype.internalName;\n    if (instanceKey.length) {\n      simpleName += \"<\" + instanceKey + \">\";\n      internalName += \"<\" + instanceKey + \">\";\n    }\n    instance = new Class(prototype, simpleName, internalName, typeArguments, baseClass);\n    instance.contextualTypeArguments = contextualTypeArguments;\n    prototype.instances.set(instanceKey, instance);\n    this.program.instancesLookup.set(internalName, instance);\n\n    // Inherit base class members and set up the initial memory offset for own fields\n    var memoryOffset: u32 = 0;\n    if (baseClass) {\n      if (baseClass.members) {\n        if (!instance.members) instance.members = new Map();\n        for (let inheritedMember of baseClass.members.values()) {\n          instance.members.set(inheritedMember.simpleName, inheritedMember);\n        }\n      }\n      memoryOffset = baseClass.currentMemoryOffset;\n    }\n\n    // Resolve constructor by first applying the class type arguments\n    if (prototype.constructorPrototype) {\n      let constructorPartial = this.resolveFunctionPartially(\n        prototype.constructorPrototype,\n        typeArguments,\n        reportMode\n      );\n      if (!constructorPartial) return null;\n      instance.constructorInstance = this.resolveFunction(constructorPartial, null, null, reportMode);\n    }\n\n    // Resolve instance members\n    if (prototype.instanceMembers) {\n      for (let member of prototype.instanceMembers.values()) {\n        switch (member.kind) {\n\n          // Lay out fields in advance\n          case ElementKind.FIELD_PROTOTYPE: {\n            if (!instance.members) instance.members = new Map();\n            let fieldDeclaration = (<FieldPrototype>member).declaration;\n            let fieldType: Type | null = null;\n            // TODO: handle duplicate non-private fields\n            if (!fieldDeclaration.type) {\n              if (baseClass !== null && baseClass.members !== null) {\n                let baseField = baseClass.members.get((<FieldPrototype>member).simpleName);\n                if (baseField && !baseField.is(CommonFlags.PRIVATE)) {\n                  assert(baseField.kind == ElementKind.FIELD);\n                  fieldType = (<Field>baseField).type;\n                }\n              }\n              if (!fieldType) {\n                if (reportMode == ReportMode.REPORT) {\n                  this.error(\n                    DiagnosticCode.Type_expected,\n                    fieldDeclaration.name.range.atEnd\n                  );\n                }\n              }\n            } else {\n              fieldType = this.resolveType(\n                fieldDeclaration.type,\n                instance.contextualTypeArguments,\n                reportMode\n              );\n            }\n            if (!fieldType) break;\n            let fieldInstance = new Field(\n              <FieldPrototype>member,\n              internalName + INSTANCE_DELIMITER + (<FieldPrototype>member).simpleName,\n              fieldType,\n              fieldDeclaration,\n              instance\n            );\n            switch (fieldType.byteSize) { // align\n              case 1: break;\n              case 2: { if (memoryOffset & 1) ++memoryOffset; break; }\n              case 4: { if (memoryOffset & 3) memoryOffset = (memoryOffset | 3) + 1; break; }\n              case 8: { if (memoryOffset & 7) memoryOffset = (memoryOffset | 7) + 1; break; }\n              default: assert(false);\n            }\n            fieldInstance.memoryOffset = memoryOffset;\n            memoryOffset += fieldType.byteSize;\n            instance.members.set(member.simpleName, fieldInstance);\n            break;\n          }\n\n          // Partially resolve methods as these might have type arguments on their own\n          case ElementKind.FUNCTION_PROTOTYPE: {\n            if (!instance.members) instance.members = new Map();\n            let partialPrototype = this.resolveFunctionPartially(\n              <FunctionPrototype>member,\n              typeArguments,\n              reportMode\n            );\n            if (!partialPrototype) return null;\n            partialPrototype.internalName = internalName + INSTANCE_DELIMITER + partialPrototype.simpleName;\n            instance.members.set(member.simpleName, partialPrototype);\n            break;\n          }\n\n          // Clone properties and partially resolve the wrapped accessors for consistence with other methods\n          case ElementKind.PROPERTY: {\n            if (!instance.members) instance.members = new Map();\n            let getterPrototype = assert((<Property>member).getterPrototype); // must be present\n            let setterPrototype = (<Property>member).setterPrototype;         // might be present\n            let instanceProperty = new Property(\n              this.program,\n              member.simpleName,\n              internalName + INSTANCE_DELIMITER + member.simpleName,\n              prototype\n            );\n            let partialGetterPrototype = this.resolveFunctionPartially(\n              getterPrototype,\n              typeArguments,\n              reportMode\n            );\n            if (!partialGetterPrototype) return null;\n            partialGetterPrototype\n              .internalName = internalName + INSTANCE_DELIMITER + partialGetterPrototype.simpleName;\n            instanceProperty.getterPrototype = partialGetterPrototype;\n            if (setterPrototype) {\n              let partialSetterPrototype = this.resolveFunctionPartially(\n                setterPrototype,\n                typeArguments,\n                reportMode\n              );\n              if (!partialSetterPrototype) return null;\n              partialSetterPrototype\n                .internalName = internalName + INSTANCE_DELIMITER + partialSetterPrototype.simpleName;\n              instanceProperty.setterPrototype = partialSetterPrototype;\n            }\n            instance.members.set(member.simpleName, instanceProperty);\n            break;\n          }\n          default: assert(false);\n        }\n      }\n    }\n\n    // Finalize memory offset\n    instance.currentMemoryOffset = memoryOffset;\n\n    // Fully resolve operator overloads (don't have type parameters on their own)\n    for (let [kind, overloadPrototype] of prototype.overloadPrototypes) {\n      assert(kind != OperatorKind.INVALID);\n      let operatorInstance: Function | null;\n      if (overloadPrototype.is(CommonFlags.INSTANCE)) {\n        let operatorPartial = this.resolveFunctionPartially(\n          overloadPrototype,\n          typeArguments,\n          reportMode\n        );\n        if (!operatorPartial) continue;\n        operatorInstance = this.resolveFunction(operatorPartial, null, null, reportMode);\n      } else {\n        operatorInstance = this.resolveFunction(overloadPrototype, null, null, reportMode);\n      }\n      if (!operatorInstance) continue;\n      let overloads = instance.overloads;\n      if (!overloads) instance.overloads = overloads = new Map();\n      overloads.set(kind, operatorInstance);\n    }\n    return instance;\n  }\n\n  /** Resolves a class prototype by first resolving the specified type arguments. */\n  resolveClassInclTypeArguments(\n    prototype: ClassPrototype,\n    typeArgumentNodes: CommonTypeNode[] | null,\n    contextualTypeArguments: Map<string,Type> | null,\n    reportNode: Node,\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Class | null {\n    var resolvedTypeArguments: Type[] | null = null;\n\n    // Resolve type arguments if generic\n    if (prototype.is(CommonFlags.GENERIC)) {\n      let typeParameterNodes = prototype.declaration.typeParameters;\n      let expectedTypeArguments = typeParameterNodes.length;\n      assert(expectedTypeArguments > 0);\n      let actualTypeArguments = typeArgumentNodes !== null ? typeArgumentNodes.length : 0;\n      if (expectedTypeArguments != actualTypeArguments) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, expectedTypeArguments.toString(10), actualTypeArguments.toString(10)\n          );\n        }\n        return null;\n      }\n      resolvedTypeArguments = this.resolveTypeArguments(\n        typeParameterNodes,\n        typeArgumentNodes,\n        contextualTypeArguments,\n        reportNode,\n        reportMode\n      );\n      if (!resolvedTypeArguments) return null;\n\n    // Otherwise make sure that no type arguments have been specified\n    } else {\n      if (typeArgumentNodes !== null && typeArgumentNodes.length) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_generic,\n            reportNode.range, prototype.internalName\n          );\n        }\n        return null;\n      }\n    }\n\n    // Continue with concrete types\n    return this.resolveClass(\n      prototype,\n      resolvedTypeArguments,\n      contextualTypeArguments,\n      reportMode\n    );\n  }\n}\n","/**\n * JavaScript glue code.\n * @module glue/js\n * @preferred\n *//***/\n\n/// <reference path=\"./node.d.ts\" />\n\nimport \"./binaryen\"; // must be first so portable can pick up the memory implementation\nimport \"../../../std/portable/index\";\nimport \"./float\";\nimport \"./i64\";\n\nimport { Module } from \"../../module\";\n\nModule.prototype.toText = function(this: Module) {\n  return new binaryen.Module(this.ref).emitText();\n};\n\nModule.prototype.toAsmjs = function(this: Module) {\n  return new binaryen.Module(this.ref).emitAsmjs();\n};\n","// Copy Binaryen exports to global scope\n\nconst binaryen = global.Binaryen || require(\"binaryen\");\nglobal.binaryen = binaryen;\n\nfor (var key in binaryen) {\n  if (key.startsWith(\"_Binaryen\") || key.startsWith(\"_Relooper\")) global[key] = binaryen[key];\n}\n\n// Utilize Binaryen's heap\n\nglobal.__memory_allocate = binaryen._malloc;\nglobal.__memory_free = binaryen._free;\nglobal.__memory_copy = binaryen._memmove;\nglobal.__store = function(ptr, val) { binaryen.HEAPU8[ptr] = val; };\nglobal.__load = function(ptr) { return binaryen.HEAPU8[ptr]; };\n","module.exports = __WEBPACK_EXTERNAL_MODULE__15__;","/** @module std/portable *//***/\n\nvar globalScope = typeof window !== \"undefined\" && window || typeof global !== \"undefined\" && global || self;\n\nglobalScope.ASC_TARGET = 0;\n\nObject.defineProperties(\n  globalScope[\"i8\"] = function i8(value) { return value << 24 >> 24; }\n, {\n  \"MIN_VALUE\": { value: -128, writable: false },\n  \"MAX_VALUE\": { value: 127, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"i16\"] = function i16(value) { return value << 16 >> 16; }\n, {\n  \"MIN_VALUE\": { value: -32768, writable: false },\n  \"MAX_VALUE\": { value: 32767, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"i32\"] = globalScope[\"isize\"] = function i32(value) { return value | 0; }\n, {\n  \"MIN_VALUE\": { value: -2147483648, writable: false },\n  \"MAX_VALUE\": { value: 2147483647, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"u8\"] = function u8(value) { return value & 0xff; }\n, {\n  \"MIN_VALUE\": { value: 0, writable: false },\n  \"MAX_VALUE\": { value: 255, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"u16\"] = function u16(value) { return value & 0xffff; }\n, {\n  \"MIN_VALUE\": { value: 0, writable: false },\n  \"MAX_VALUE\": { value: 65535, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"u32\"] = globalScope[\"usize\"] = function u32(value) { return value >>> 0; }\n, {\n  \"MIN_VALUE\": { value: 0, writable: false },\n  \"MAX_VALUE\": { value: 4294967295, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"bool\"] = function bool(value) { return !!value; }\n, {\n  \"MIN_VALUE\": { value: 0, writable: false },\n  \"MAX_VALUE\": { value: 1, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"f32\"] = function f32(value) { return Math.fround(value); }\n, {\n  \"MIN_VALUE\": { value: Math.fround(-3.40282347e+38), writable: false },\n  \"MAX_VALUE\": { value: Math.fround(3.40282347e+38), writable: false },\n  \"MIN_POSITIVE_VALUE\": { value: Math.fround(1.175494351e-38), writable: false },\n  \"MIN_SAFE_INTEGER\": { value: -16777215, writable: false },\n  \"MAX_SAFE_INTEGER\": { value: 16777215, writable: false },\n  \"EPSILON\": { value: Math.fround(1.19209290e-07), writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"f64\"] = function f64(value) { return +value; }\n, {\n  \"MIN_VALUE\": { value: -1.7976931348623157e+308, writable: false },\n  \"MAX_VALUE\": { value: 1.7976931348623157e+308, writable: false },\n  \"MIN_POSITIVE_VALUE\": { value: 2.2250738585072014e-308 , writable: false },\n  \"MIN_SAFE_INTEGER\": { value: -9007199254740991, writable: false },\n  \"MAX_SAFE_INTEGER\": { value: 9007199254740991, writable: false },\n  \"EPSILON\": { value: 2.2204460492503131e-16, writable: false }\n});\n\nglobalScope[\"clz\"] = Math.clz32;\n\nglobalScope[\"ctz\"] = function ctz(value) {\n  var c = Math.clz32(value & -value);\n  return value ? 31 - c : c;\n};\n\nglobalScope[\"popcnt\"] = function popcnt(value) {\n  value -= value >>> 1 & 0x55555555;\n  value = (value & 0x33333333) + (value >>> 2 & 0x33333333);\n  return (((value + (value >>> 4)) & 0x0F0F0F0F) * 0x01010101) >>> 24;\n};\n\nglobalScope[\"rotl\"] = function rotl(value, shift) {\n  shift &= 31;\n  return (value << shift) | (value >>> (32 - shift));\n};\n\nglobalScope[\"rotr\"] = function rotr(value, shift) {\n  shift &= 31;\n  return (value >>> shift) | (value << (32 - shift));\n};\n\nglobalScope[\"abs\"] = Math.abs;\n\nglobalScope[\"max\"] = Math.max;\n\nglobalScope[\"min\"] = Math.min;\n\nglobalScope[\"ceil\"] = Math.ceil;\n\nglobalScope[\"floor\"] = Math.floor;\n\n// Adopt code from https://github.com/rfk/wasm-polyfill\nglobalScope[\"nearest\"] = function nearest(value) {\n  if (Math.abs(value - Math.trunc(value)) === 0.5) {\n    return 2.0 * Math.round(value * 0.5);\n  }\n  return Math.round(value);\n};\n\nglobalScope[\"select\"] = function select(ifTrue, ifFalse, condition) {\n  return condition ? ifTrue : ifFalse;\n};\n\nglobalScope[\"sqrt\"] = Math.sqrt;\n\nglobalScope[\"trunc\"] = Math.trunc;\n\nglobalScope[\"copysign\"] = function copysign(x, y) {\n  return Math.abs(x) * Math.sign(y);\n};\n\nglobalScope[\"bswap\"] = function bswap(value) {\n  var a = value >> 8 & 0x00FF00FF;\n  var b = (value & 0x00FF00FF) << 8;\n  value = a | b;\n  a = value >> 16 & 0x0000FFFF;\n  b = (value & 0x0000FFFF) << 16;\n  return a | b;\n};\n\nglobalScope[\"bswap16\"] = function bswap16(value) {\n  return ((value << 8) & 0xFF00) | ((value >> 8) & 0x00FF) | (value & 0xFFFF0000);\n};\n\nfunction UnreachableError() {\n  if (Error.captureStackTrace) {\n    Error.captureStackTrace(this, UnreachableError);\n  } else {\n    this.stack = this.name + \": \" + this.message + \"\\n\" + new Error().stack;\n  }\n}\nUnreachableError.prototype = Object.create(Error.prototype);\nUnreachableError.prototype.name = \"UnreachableError\";\nUnreachableError.prototype.message = \"unreachable\";\n\nglobalScope[\"unreachable\"] = function unreachable() {\n  throw new UnreachableError();\n};\n\nfunction AssertionError(message) {\n  this.message = message || \"assertion failed\";\n  if (Error.captureStackTrace) {\n    Error.captureStackTrace(this, AssertionError);\n  } else {\n    this.stack = this.name + \": \" + this.message + \"\\n\" + new Error().stack;\n  }\n}\nAssertionError.prototype = Object.create(Error.prototype);\nAssertionError.prototype.name = \"AssertionError\";\n\nglobalScope[\"assert\"] = function assert(isTrueish, message) {\n  if (isTrueish) return isTrueish;\n  throw new AssertionError(message);\n};\n\nglobalScope[\"changetype\"] = function changetype(value) {\n  return value;\n};\n\nglobalScope[\"parseI32\"] = function parseI32(str, radix) {\n  return parseInt(str, undefined) | 0;\n};\n\nString[\"fromCharCodes\"] = function fromCharCodes(arr) {\n  return String.fromCharCode.apply(String, arr);\n};\n\nString[\"fromCodePoints\"] = function fromCodePoints(arr) {\n  return String.fromCodePoint.apply(String, arr);\n};\n\nglobalScope[\"isInteger\"] = Number.isInteger;\n\nglobalScope[\"isFloat\"] = function isFloat(arg) {\n  return typeof arg === \"number\";\n};\n\nglobalScope[\"isReference\"] = function isClass(arg) {\n  return typeof arg === \"object\" || typeof arg === \"string\";\n};\n\nglobalScope[\"isString\"] = function isString(arg) {\n  return typeof arg === \"string\" || arg instanceof String;\n};\n\nglobalScope[\"isArray\"] = Array.isArray;\n\nglobalScope[\"unchecked\"] = function(expr) {\n  return expr;\n};\n\nglobalScope[\"fmod\"] = function fmod(x, y) {\n  return x % y;\n};\n\nglobalScope[\"fmodf\"] = function fmodf(x, y) {\n  return Math.fround(x % y);\n};\n\nglobalScope[\"JSMath\"] = Math;\n\nglobalScope[\"memory\"] = (() => {\n  var HEAP = new Uint8Array(0);\n  var HEAP_OFFSET = 0;\n  return {\n    allocate: globalScope[\"__memory_allocate\"] || function allocate(size) {\n      if (!(size >>>= 0)) return 0;\n      if (HEAP_OFFSET + size > HEAP.length) {\n        var oldHeap = HEAP;\n        HEAP = new Uint8Array(Math.max(65536, HEAP.length + size, HEAP.length * 2));\n        HEAP.set(oldHeap);\n      }\n      var ptr = HEAP_OFFSET;\n      if ((HEAP_OFFSET += size) & 7) HEAP_OFFSET = (HEAP_OFFSET | 7) + 1;\n      return ptr;\n    },\n    free: globalScope[\"__memory_free\"] || function free(ptr) { },\n    copy: globalScope[\"__memory_copy\"] || function copy(dest, src, size) {\n      HEAP.copyWithin(dest, src, src + size);\n    }\n  };\n})();\n\nglobalScope[\"store\"] = globalScope[\"__store\"] || function store(ptr, value, offset) {\n  HEAP[ptr + (offset | 0)] = value;\n};\n\nglobalScope[\"load\"] = globalScope[\"__load\"] || function load(ptr, offset) {\n  return HEAP[ptr + (offset | 0)];\n};\n","const F64 = new Float64Array(1);\nconst F32 = new Float32Array(F64.buffer);\nconst I32 = new Int32Array(F64.buffer);\n\nglobal.f32_as_i32 = function(value) {\n  F32[0] = value;\n  return I32[0];\n};\n\nglobal.i32_as_f32 = function(value) {\n  I32[0] = value;\n  return F32[0];\n};\n\nglobal.f64_as_i64 = function(value) {\n  F64[0] = value;\n  return i64_new(I32[0], I32[1]);\n};\n\nglobal.i64_as_f64 = function(value) {\n  I32[0] = i64_low(value);\n  I32[1] = i64_high(value);\n  return F64[0];\n};\n","const Long = global.Long || require(\"long\");\n\nglobal.i64_zero = Long.ZERO;\n\nglobal.i64_one = Long.ONE;\n\nglobal.i64_new = function(lo, hi) {\n  return Long.fromBits(lo, hi);\n};\n\nglobal.i64_low = function(value) {\n  return value.low;\n};\n\nglobal.i64_high = function(value) {\n  return value.high;\n};\n\nglobal.i64_add = function(left, right) {\n  return left.add(right);\n};\n\nglobal.i64_sub = function(left, right) {\n  return left.sub(right);\n};\n\nglobal.i64_mul = function(left, right) {\n  return left.mul(right);\n};\n\nglobal.i64_div = function(left, right) {\n  return left.div(right);\n};\n\nglobal.i64_div_u = function(left, right) {\n  return left.toUnsigned().div(right.toUnsigned()).toSigned();\n};\n\nglobal.i64_rem = function(left, right) {\n  return left.mod(right);\n};\n\nglobal.i64_rem_u = function(left, right) {\n  return left.toUnsigned().mod(right.toUnsigned()).toSigned();\n};\n\nglobal.i64_and = function(left, right) {\n  return left.and(right);\n};\n\nglobal.i64_or = function(left, right) {\n  return left.or(right);\n};\n\nglobal.i64_xor = function(left, right) {\n  return left.xor(right);\n};\n\nglobal.i64_shl = function(left, right) {\n  return left.shl(right);\n};\n\nglobal.i64_shr = function(left, right) {\n  return left.shr(right);\n};\n\nglobal.i64_shr_u = function(left, right) {\n  return left.shru(right);\n};\n\nglobal.i64_not = function(value) {\n  return value.not();\n};\n\nglobal.i64_eq = function(left, right) {\n  return left.eq(right);\n};\n\nglobal.i64_ne = function(left, right) {\n  return left.ne(right);\n};\n\nglobal.i64_align = function(value, alignment) {\n  assert(alignment && (alignment & (alignment - 1)) == 0);\n  var mask = Long.fromInt(alignment - 1);\n  return value.add(mask).and(mask.not());\n};\n\nglobal.i64_is_i8 = function(value) {\n  return value.high === 0 && (value.low >= 0 && value.low <= i8.MAX_VALUE)\n      || value.high === -1 && (value.low >= i8.MIN_VALUE && value.low < 0);\n};\n\nglobal.i64_is_i16 = function(value) {\n  return value.high === 0 && (value.low >= 0 && value.low <= i16.MAX_VALUE)\n      || value.high === -1 && (value.low >= i16.MIN_VALUE && value.low < 0);\n};\n\nglobal.i64_is_i32 = function(value) {\n  return (value.high === 0 && value.low >= 0)\n      || (value.high === -1 && value.low < 0);\n};\n\nglobal.i64_is_u8 = function(value) {\n  return value.high === 0 && value.low >= 0 && value.low <= u8.MAX_VALUE;\n};\n\nglobal.i64_is_u16 = function(value) {\n  return value.high === 0 && value.low >= 0 && value.low <= u16.MAX_VALUE;\n};\n\nglobal.i64_is_u32 = function(value) {\n  return value.high === 0;\n};\n\nglobal.i64_is_bool = function(value) {\n  return value.high === 0 && (value.low === 0 || value.low === 1);\n};\n\nconst minSafeF32 = Long.fromNumber(f32.MIN_SAFE_INTEGER);\nconst maxSafeF32 = Long.fromNumber(f32.MAX_SAFE_INTEGER);\n\nglobal.i64_is_f32 = function(value) {\n  return value.gte(minSafeF32) && value.lte(maxSafeF32);\n};\n\nconst minSafeF64 = Long.fromNumber(f64.MIN_SAFE_INTEGER);\nconst maxSafeF64 = Long.fromNumber(f64.MAX_SAFE_INTEGER);\n\nglobal.i64_is_f64 = function(value) {\n  return value.gte(minSafeF64) && value.lte(maxSafeF64);\n};\n\nglobal.i64_to_f32 = function(value) {\n  return global.Math.fround(value.toNumber());\n};\n\nglobal.i64_to_f64 = function(value) {\n  return value.toNumber();\n};\n\nglobal.i64_to_string = function(value, unsigned) {\n  return (unsigned ? value.toUnsigned() : value).toString(10);\n};\n","module.exports = Long;\r\n\r\n/**\r\n * wasm optimizations, to do native i64 multiplication and divide\r\n */\r\nvar wasm = null;\r\n\r\ntry {\r\n  wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([\r\n    0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11\r\n  ])), {}).exports;\r\n} catch (e) {\r\n  // no wasm support :(\r\n}\r\n\r\n/**\r\n * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.\r\n *  See the from* functions below for more convenient ways of constructing Longs.\r\n * @exports Long\r\n * @class A Long class for representing a 64 bit two's-complement integer value.\r\n * @param {number} low The low (signed) 32 bits of the long\r\n * @param {number} high The high (signed) 32 bits of the long\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @constructor\r\n */\r\nfunction Long(low, high, unsigned) {\r\n\r\n    /**\r\n     * The low 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.low = low | 0;\r\n\r\n    /**\r\n     * The high 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.high = high | 0;\r\n\r\n    /**\r\n     * Whether unsigned or not.\r\n     * @type {boolean}\r\n     */\r\n    this.unsigned = !!unsigned;\r\n}\r\n\r\n// The internal representation of a long is the two given signed, 32-bit values.\r\n// We use 32-bit pieces because these are the size of integers on which\r\n// Javascript performs bit-operations.  For operations like addition and\r\n// multiplication, we split each number into 16 bit pieces, which can easily be\r\n// multiplied within Javascript's floating-point representation without overflow\r\n// or change in sign.\r\n//\r\n// In the algorithms below, we frequently reduce the negative case to the\r\n// positive case by negating the input(s) and then post-processing the result.\r\n// Note that we must ALWAYS check specially whether those values are MIN_VALUE\r\n// (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\r\n// a positive number, it overflows back into a negative).  Not handling this\r\n// case would often result in infinite recursion.\r\n//\r\n// Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*\r\n// methods on which they depend.\r\n\r\n/**\r\n * An indicator used to reliably determine if an object is a Long or not.\r\n * @type {boolean}\r\n * @const\r\n * @private\r\n */\r\nLong.prototype.__isLong__;\r\n\r\nObject.defineProperty(Long.prototype, \"__isLong__\", { value: true });\r\n\r\n/**\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n * @inner\r\n */\r\nfunction isLong(obj) {\r\n    return (obj && obj[\"__isLong__\"]) === true;\r\n}\r\n\r\n/**\r\n * Tests if the specified object is a Long.\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n */\r\nLong.isLong = isLong;\r\n\r\n/**\r\n * A cache of the Long representations of small integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar INT_CACHE = {};\r\n\r\n/**\r\n * A cache of the Long representations of small unsigned integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar UINT_CACHE = {};\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromInt(value, unsigned) {\r\n    var obj, cachedObj, cache;\r\n    if (unsigned) {\r\n        value >>>= 0;\r\n        if (cache = (0 <= value && value < 256)) {\r\n            cachedObj = UINT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, (value | 0) < 0 ? -1 : 0, true);\r\n        if (cache)\r\n            UINT_CACHE[value] = obj;\r\n        return obj;\r\n    } else {\r\n        value |= 0;\r\n        if (cache = (-128 <= value && value < 128)) {\r\n            cachedObj = INT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, value < 0 ? -1 : 0, false);\r\n        if (cache)\r\n            INT_CACHE[value] = obj;\r\n        return obj;\r\n    }\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given 32 bit integer value.\r\n * @function\r\n * @param {number} value The 32 bit integer in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromInt = fromInt;\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromNumber(value, unsigned) {\r\n    if (isNaN(value))\r\n        return unsigned ? UZERO : ZERO;\r\n    if (unsigned) {\r\n        if (value < 0)\r\n            return UZERO;\r\n        if (value >= TWO_PWR_64_DBL)\r\n            return MAX_UNSIGNED_VALUE;\r\n    } else {\r\n        if (value <= -TWO_PWR_63_DBL)\r\n            return MIN_VALUE;\r\n        if (value + 1 >= TWO_PWR_63_DBL)\r\n            return MAX_VALUE;\r\n    }\r\n    if (value < 0)\r\n        return fromNumber(-value, unsigned).neg();\r\n    return fromBits((value % TWO_PWR_32_DBL) | 0, (value / TWO_PWR_32_DBL) | 0, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\r\n * @function\r\n * @param {number} value The number in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromNumber = fromNumber;\r\n\r\n/**\r\n * @param {number} lowBits\r\n * @param {number} highBits\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromBits(lowBits, highBits, unsigned) {\r\n    return new Long(lowBits, highBits, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is\r\n *  assumed to use 32 bits.\r\n * @function\r\n * @param {number} lowBits The low 32 bits\r\n * @param {number} highBits The high 32 bits\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromBits = fromBits;\r\n\r\n/**\r\n * @function\r\n * @param {number} base\r\n * @param {number} exponent\r\n * @returns {number}\r\n * @inner\r\n */\r\nvar pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)\r\n\r\n/**\r\n * @param {string} str\r\n * @param {(boolean|number)=} unsigned\r\n * @param {number=} radix\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromString(str, unsigned, radix) {\r\n    if (str.length === 0)\r\n        throw Error('empty string');\r\n    if (str === \"NaN\" || str === \"Infinity\" || str === \"+Infinity\" || str === \"-Infinity\")\r\n        return ZERO;\r\n    if (typeof unsigned === 'number') {\r\n        // For goog.math.long compatibility\r\n        radix = unsigned,\r\n        unsigned = false;\r\n    } else {\r\n        unsigned = !! unsigned;\r\n    }\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n\r\n    var p;\r\n    if ((p = str.indexOf('-')) > 0)\r\n        throw Error('interior hyphen');\r\n    else if (p === 0) {\r\n        return fromString(str.substring(1), unsigned, radix).neg();\r\n    }\r\n\r\n    // Do several (8) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 8));\r\n\r\n    var result = ZERO;\r\n    for (var i = 0; i < str.length; i += 8) {\r\n        var size = Math.min(8, str.length - i),\r\n            value = parseInt(str.substring(i, i + size), radix);\r\n        if (size < 8) {\r\n            var power = fromNumber(pow_dbl(radix, size));\r\n            result = result.mul(power).add(fromNumber(value));\r\n        } else {\r\n            result = result.mul(radixToPower);\r\n            result = result.add(fromNumber(value));\r\n        }\r\n    }\r\n    result.unsigned = unsigned;\r\n    return result;\r\n}\r\n\r\n/**\r\n * Returns a Long representation of the given string, written using the specified radix.\r\n * @function\r\n * @param {string} str The textual representation of the Long\r\n * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {number=} radix The radix in which the text is written (2-36), defaults to 10\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromString = fromString;\r\n\r\n/**\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromValue(val, unsigned) {\r\n    if (typeof val === 'number')\r\n        return fromNumber(val, unsigned);\r\n    if (typeof val === 'string')\r\n        return fromString(val, unsigned);\r\n    // Throws for non-objects, converts non-instanceof Long:\r\n    return fromBits(val.low, val.high, typeof unsigned === 'boolean' ? unsigned : val.unsigned);\r\n}\r\n\r\n/**\r\n * Converts the specified value to a Long using the appropriate from* function for its type.\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long}\r\n */\r\nLong.fromValue = fromValue;\r\n\r\n// NOTE: the compiler should inline these constant values below and then remove these variables, so there should be\r\n// no runtime penalty for these.\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_16_DBL = 1 << 16;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24_DBL = 1 << 24;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\r\n\r\n/**\r\n * @type {!Long}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ZERO = fromInt(0);\r\n\r\n/**\r\n * Signed zero.\r\n * @type {!Long}\r\n */\r\nLong.ZERO = ZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UZERO = fromInt(0, true);\r\n\r\n/**\r\n * Unsigned zero.\r\n * @type {!Long}\r\n */\r\nLong.UZERO = UZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ONE = fromInt(1);\r\n\r\n/**\r\n * Signed one.\r\n * @type {!Long}\r\n */\r\nLong.ONE = ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UONE = fromInt(1, true);\r\n\r\n/**\r\n * Unsigned one.\r\n * @type {!Long}\r\n */\r\nLong.UONE = UONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar NEG_ONE = fromInt(-1);\r\n\r\n/**\r\n * Signed negative one.\r\n * @type {!Long}\r\n */\r\nLong.NEG_ONE = NEG_ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_VALUE = fromBits(0xFFFFFFFF|0, 0x7FFFFFFF|0, false);\r\n\r\n/**\r\n * Maximum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_VALUE = MAX_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF|0, 0xFFFFFFFF|0, true);\r\n\r\n/**\r\n * Maximum unsigned value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MIN_VALUE = fromBits(0, 0x80000000|0, false);\r\n\r\n/**\r\n * Minimum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MIN_VALUE = MIN_VALUE;\r\n\r\n/**\r\n * @alias Long.prototype\r\n * @inner\r\n */\r\nvar LongPrototype = Long.prototype;\r\n\r\n/**\r\n * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.\r\n * @returns {number}\r\n */\r\nLongPrototype.toInt = function toInt() {\r\n    return this.unsigned ? this.low >>> 0 : this.low;\r\n};\r\n\r\n/**\r\n * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).\r\n * @returns {number}\r\n */\r\nLongPrototype.toNumber = function toNumber() {\r\n    if (this.unsigned)\r\n        return ((this.high >>> 0) * TWO_PWR_32_DBL) + (this.low >>> 0);\r\n    return this.high * TWO_PWR_32_DBL + (this.low >>> 0);\r\n};\r\n\r\n/**\r\n * Converts the Long to a string written in the specified radix.\r\n * @param {number=} radix Radix (2-36), defaults to 10\r\n * @returns {string}\r\n * @override\r\n * @throws {RangeError} If `radix` is out of range\r\n */\r\nLongPrototype.toString = function toString(radix) {\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n    if (this.isZero())\r\n        return '0';\r\n    if (this.isNegative()) { // Unsigned Longs are never negative\r\n        if (this.eq(MIN_VALUE)) {\r\n            // We need to change the Long value before it can be negated, so we remove\r\n            // the bottom-most digit in this base and then recurse to do the rest.\r\n            var radixLong = fromNumber(radix),\r\n                div = this.div(radixLong),\r\n                rem1 = div.mul(radixLong).sub(this);\r\n            return div.toString(radix) + rem1.toInt().toString(radix);\r\n        } else\r\n            return '-' + this.neg().toString(radix);\r\n    }\r\n\r\n    // Do several (6) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned),\r\n        rem = this;\r\n    var result = '';\r\n    while (true) {\r\n        var remDiv = rem.div(radixToPower),\r\n            intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0,\r\n            digits = intval.toString(radix);\r\n        rem = remDiv;\r\n        if (rem.isZero())\r\n            return digits + result;\r\n        else {\r\n            while (digits.length < 6)\r\n                digits = '0' + digits;\r\n            result = '' + digits + result;\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as a signed integer.\r\n * @returns {number} Signed high bits\r\n */\r\nLongPrototype.getHighBits = function getHighBits() {\r\n    return this.high;\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned high bits\r\n */\r\nLongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {\r\n    return this.high >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as a signed integer.\r\n * @returns {number} Signed low bits\r\n */\r\nLongPrototype.getLowBits = function getLowBits() {\r\n    return this.low;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned low bits\r\n */\r\nLongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {\r\n    return this.low >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the number of bits needed to represent the absolute value of this Long.\r\n * @returns {number}\r\n */\r\nLongPrototype.getNumBitsAbs = function getNumBitsAbs() {\r\n    if (this.isNegative()) // Unsigned Longs are never negative\r\n        return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();\r\n    var val = this.high != 0 ? this.high : this.low;\r\n    for (var bit = 31; bit > 0; bit--)\r\n        if ((val & (1 << bit)) != 0)\r\n            break;\r\n    return this.high != 0 ? bit + 33 : bit + 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isZero = function isZero() {\r\n    return this.high === 0 && this.low === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero. This is an alias of {@link Long#isZero}.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eqz = LongPrototype.isZero;\r\n\r\n/**\r\n * Tests if this Long's value is negative.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isNegative = function isNegative() {\r\n    return !this.unsigned && this.high < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is positive.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isPositive = function isPositive() {\r\n    return this.unsigned || this.high >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is odd.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isOdd = function isOdd() {\r\n    return (this.low & 1) === 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is even.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isEven = function isEven() {\r\n    return (this.low & 1) === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.equals = function equals(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.unsigned !== other.unsigned && (this.high >>> 31) === 1 && (other.high >>> 31) === 1)\r\n        return false;\r\n    return this.high === other.high && this.low === other.low;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eq = LongPrototype.equals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.notEquals = function notEquals(other) {\r\n    return !this.eq(/* validates */ other);\r\n};\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.neq = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ne = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThan = function lessThan(other) {\r\n    return this.comp(/* validates */ other) < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lt = LongPrototype.lessThan;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) <= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lte = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.le = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThan = function greaterThan(other) {\r\n    return this.comp(/* validates */ other) > 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gt = LongPrototype.greaterThan;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gte = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ge = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Compares this Long's value with the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.compare = function compare(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.eq(other))\r\n        return 0;\r\n    var thisNeg = this.isNegative(),\r\n        otherNeg = other.isNegative();\r\n    if (thisNeg && !otherNeg)\r\n        return -1;\r\n    if (!thisNeg && otherNeg)\r\n        return 1;\r\n    // At this point the sign bits are the same\r\n    if (!this.unsigned)\r\n        return this.sub(other).isNegative() ? -1 : 1;\r\n    // Both are positive if at least one is unsigned\r\n    return (other.high >>> 0) > (this.high >>> 0) || (other.high === this.high && (other.low >>> 0) > (this.low >>> 0)) ? -1 : 1;\r\n};\r\n\r\n/**\r\n * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.comp = LongPrototype.compare;\r\n\r\n/**\r\n * Negates this Long's value.\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.negate = function negate() {\r\n    if (!this.unsigned && this.eq(MIN_VALUE))\r\n        return MIN_VALUE;\r\n    return this.not().add(ONE);\r\n};\r\n\r\n/**\r\n * Negates this Long's value. This is an alias of {@link Long#negate}.\r\n * @function\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.neg = LongPrototype.negate;\r\n\r\n/**\r\n * Returns the sum of this and the specified Long.\r\n * @param {!Long|number|string} addend Addend\r\n * @returns {!Long} Sum\r\n */\r\nLongPrototype.add = function add(addend) {\r\n    if (!isLong(addend))\r\n        addend = fromValue(addend);\r\n\r\n    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = addend.high >>> 16;\r\n    var b32 = addend.high & 0xFFFF;\r\n    var b16 = addend.low >>> 16;\r\n    var b00 = addend.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 + b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 + b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 + b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 + b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long.\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.subtract = function subtract(subtrahend) {\r\n    if (!isLong(subtrahend))\r\n        subtrahend = fromValue(subtrahend);\r\n    return this.add(subtrahend.neg());\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.\r\n * @function\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.sub = LongPrototype.subtract;\r\n\r\n/**\r\n * Returns the product of this and the specified Long.\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.multiply = function multiply(multiplier) {\r\n    if (this.isZero())\r\n        return ZERO;\r\n    if (!isLong(multiplier))\r\n        multiplier = fromValue(multiplier);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = wasm.mul(this.low,\r\n                           this.high,\r\n                           multiplier.low,\r\n                           multiplier.high);\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (multiplier.isZero())\r\n        return ZERO;\r\n    if (this.eq(MIN_VALUE))\r\n        return multiplier.isOdd() ? MIN_VALUE : ZERO;\r\n    if (multiplier.eq(MIN_VALUE))\r\n        return this.isOdd() ? MIN_VALUE : ZERO;\r\n\r\n    if (this.isNegative()) {\r\n        if (multiplier.isNegative())\r\n            return this.neg().mul(multiplier.neg());\r\n        else\r\n            return this.neg().mul(multiplier).neg();\r\n    } else if (multiplier.isNegative())\r\n        return this.mul(multiplier.neg()).neg();\r\n\r\n    // If both longs are small, use float multiplication\r\n    if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24))\r\n        return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned);\r\n\r\n    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\r\n    // We can skip products that would overflow.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = multiplier.high >>> 16;\r\n    var b32 = multiplier.high & 0xFFFF;\r\n    var b16 = multiplier.low >>> 16;\r\n    var b00 = multiplier.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 * b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 * b00;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c16 += a00 * b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 * b00;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a16 * b16;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a00 * b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.\r\n * @function\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.mul = LongPrototype.multiply;\r\n\r\n/**\r\n * Returns this Long divided by the specified. The result is signed if this Long is signed or\r\n *  unsigned if this Long is unsigned.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.divide = function divide(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n    if (divisor.isZero())\r\n        throw Error('division by zero');\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        // guard against signed division overflow: the largest\r\n        // negative number / -1 would be 1 larger than the largest\r\n        // positive number, due to two's complement.\r\n        if (!this.unsigned &&\r\n            this.high === -0x80000000 &&\r\n            divisor.low === -1 && divisor.high === -1) {\r\n            // be consistent with non-wasm code path\r\n            return this;\r\n        }\r\n        var low = (this.unsigned ? wasm.div_u : wasm.div_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (this.isZero())\r\n        return this.unsigned ? UZERO : ZERO;\r\n    var approx, rem, res;\r\n    if (!this.unsigned) {\r\n        // This section is only relevant for signed longs and is derived from the\r\n        // closure library as a whole.\r\n        if (this.eq(MIN_VALUE)) {\r\n            if (divisor.eq(ONE) || divisor.eq(NEG_ONE))\r\n                return MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE\r\n            else if (divisor.eq(MIN_VALUE))\r\n                return ONE;\r\n            else {\r\n                // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\r\n                var halfThis = this.shr(1);\r\n                approx = halfThis.div(divisor).shl(1);\r\n                if (approx.eq(ZERO)) {\r\n                    return divisor.isNegative() ? ONE : NEG_ONE;\r\n                } else {\r\n                    rem = this.sub(divisor.mul(approx));\r\n                    res = approx.add(rem.div(divisor));\r\n                    return res;\r\n                }\r\n            }\r\n        } else if (divisor.eq(MIN_VALUE))\r\n            return this.unsigned ? UZERO : ZERO;\r\n        if (this.isNegative()) {\r\n            if (divisor.isNegative())\r\n                return this.neg().div(divisor.neg());\r\n            return this.neg().div(divisor).neg();\r\n        } else if (divisor.isNegative())\r\n            return this.div(divisor.neg()).neg();\r\n        res = ZERO;\r\n    } else {\r\n        // The algorithm below has not been made for unsigned longs. It's therefore\r\n        // required to take special care of the MSB prior to running it.\r\n        if (!divisor.unsigned)\r\n            divisor = divisor.toUnsigned();\r\n        if (divisor.gt(this))\r\n            return UZERO;\r\n        if (divisor.gt(this.shru(1))) // 15 >>> 1 = 7 ; with divisor = 8 ; true\r\n            return UONE;\r\n        res = UZERO;\r\n    }\r\n\r\n    // Repeat the following until the remainder is less than other:  find a\r\n    // floating-point that approximates remainder / other *from below*, add this\r\n    // into the result, and subtract it from the remainder.  It is critical that\r\n    // the approximate value is less than or equal to the real value so that the\r\n    // remainder never becomes negative.\r\n    rem = this;\r\n    while (rem.gte(divisor)) {\r\n        // Approximate the result of division. This may be a little greater or\r\n        // smaller than the actual value.\r\n        approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber()));\r\n\r\n        // We will tweak the approximate result by changing it in the 48-th digit or\r\n        // the smallest non-fractional digit, whichever is larger.\r\n        var log2 = Math.ceil(Math.log(approx) / Math.LN2),\r\n            delta = (log2 <= 48) ? 1 : pow_dbl(2, log2 - 48),\r\n\r\n        // Decrease the approximation until it is smaller than the remainder.  Note\r\n        // that if it is too large, the product overflows and is negative.\r\n            approxRes = fromNumber(approx),\r\n            approxRem = approxRes.mul(divisor);\r\n        while (approxRem.isNegative() || approxRem.gt(rem)) {\r\n            approx -= delta;\r\n            approxRes = fromNumber(approx, this.unsigned);\r\n            approxRem = approxRes.mul(divisor);\r\n        }\r\n\r\n        // We know the answer can't be zero... and actually, zero would cause\r\n        // infinite recursion since we would make no progress.\r\n        if (approxRes.isZero())\r\n            approxRes = ONE;\r\n\r\n        res = res.add(approxRes);\r\n        rem = rem.sub(approxRem);\r\n    }\r\n    return res;\r\n};\r\n\r\n/**\r\n * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.div = LongPrototype.divide;\r\n\r\n/**\r\n * Returns this Long modulo the specified.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.modulo = function modulo(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = (this.unsigned ? wasm.rem_u : wasm.rem_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    return this.sub(this.div(divisor).mul(divisor));\r\n};\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.mod = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.rem = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns the bitwise NOT of this Long.\r\n * @returns {!Long}\r\n */\r\nLongPrototype.not = function not() {\r\n    return fromBits(~this.low, ~this.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise AND of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.and = function and(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low & other.low, this.high & other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise OR of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.or = function or(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low | other.low, this.high | other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise XOR of this Long and the given one.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.xor = function xor(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftLeft = function shiftLeft(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits(this.low << numBits, (this.high << numBits) | (this.low >>> (32 - numBits)), this.unsigned);\r\n    else\r\n        return fromBits(0, this.low << (numBits - 32), this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shl = LongPrototype.shiftLeft;\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRight = function shiftRight(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits((this.low >>> numBits) | (this.high << (32 - numBits)), this.high >> numBits, this.unsigned);\r\n    else\r\n        return fromBits(this.high >> (numBits - 32), this.high >= 0 ? 0 : -1, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr = LongPrototype.shiftRight;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    numBits &= 63;\r\n    if (numBits === 0)\r\n        return this;\r\n    else {\r\n        var high = this.high;\r\n        if (numBits < 32) {\r\n            var low = this.low;\r\n            return fromBits((low >>> numBits) | (high << (32 - numBits)), high >>> numBits, this.unsigned);\r\n        } else if (numBits === 32)\r\n            return fromBits(high, 0, this.unsigned);\r\n        else\r\n            return fromBits(high >>> (numBits - 32), 0, this.unsigned);\r\n    }\r\n};\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shru = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr_u = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Converts this Long to signed.\r\n * @returns {!Long} Signed long\r\n */\r\nLongPrototype.toSigned = function toSigned() {\r\n    if (!this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, false);\r\n};\r\n\r\n/**\r\n * Converts this Long to unsigned.\r\n * @returns {!Long} Unsigned long\r\n */\r\nLongPrototype.toUnsigned = function toUnsigned() {\r\n    if (this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, true);\r\n};\r\n\r\n/**\r\n * Converts this Long to its byte representation.\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {!Array.<number>} Byte representation\r\n */\r\nLongPrototype.toBytes = function toBytes(le) {\r\n    return le ? this.toBytesLE() : this.toBytesBE();\r\n};\r\n\r\n/**\r\n * Converts this Long to its little endian byte representation.\r\n * @returns {!Array.<number>} Little endian byte representation\r\n */\r\nLongPrototype.toBytesLE = function toBytesLE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        lo        & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo >>> 16 & 0xff,\r\n        lo >>> 24       ,\r\n        hi        & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi >>> 16 & 0xff,\r\n        hi >>> 24\r\n    ];\r\n};\r\n\r\n/**\r\n * Converts this Long to its big endian byte representation.\r\n * @returns {!Array.<number>} Big endian byte representation\r\n */\r\nLongPrototype.toBytesBE = function toBytesBE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        hi >>> 24       ,\r\n        hi >>> 16 & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi        & 0xff,\r\n        lo >>> 24       ,\r\n        lo >>> 16 & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo        & 0xff\r\n    ];\r\n};\r\n\r\n/**\r\n * Creates a Long from its byte representation.\r\n * @param {!Array.<number>} bytes Byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytes = function fromBytes(bytes, unsigned, le) {\r\n    return le ? Long.fromBytesLE(bytes, unsigned) : Long.fromBytesBE(bytes, unsigned);\r\n};\r\n\r\n/**\r\n * Creates a Long from its little endian byte representation.\r\n * @param {!Array.<number>} bytes Little endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesLE = function fromBytesLE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[0]       |\r\n        bytes[1] <<  8 |\r\n        bytes[2] << 16 |\r\n        bytes[3] << 24,\r\n        bytes[4]       |\r\n        bytes[5] <<  8 |\r\n        bytes[6] << 16 |\r\n        bytes[7] << 24,\r\n        unsigned\r\n    );\r\n};\r\n\r\n/**\r\n * Creates a Long from its big endian byte representation.\r\n * @param {!Array.<number>} bytes Big endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesBE = function fromBytesBE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[4] << 24 |\r\n        bytes[5] << 16 |\r\n        bytes[6] <<  8 |\r\n        bytes[7],\r\n        bytes[0] << 24 |\r\n        bytes[1] << 16 |\r\n        bytes[2] <<  8 |\r\n        bytes[3],\r\n        unsigned\r\n    );\r\n};\r\n","/**\n * Built-in elements providing WebAssembly core functionality.\n * @module builtins\n *//***/\n\n import {\n  Compiler,\n  ConversionKind,\n  WrapMode\n} from \"./compiler\";\n\nimport {\n  DiagnosticCode\n} from \"./diagnostics\";\n\nimport {\n  Node,\n  NodeKind,\n  Expression,\n  LiteralKind,\n  LiteralExpression,\n  StringLiteralExpression\n} from \"./ast\";\n\nimport {\n  Type,\n  TypeKind,\n  TypeFlags\n} from \"./types\";\n\nimport {\n  BinaryOp,\n  UnaryOp,\n  HostOp,\n  NativeType,\n  ExpressionRef,\n  ExpressionId,\n  getExpressionId,\n  getExpressionType,\n  getConstValueI64High,\n  getConstValueI64Low,\n  getConstValueI32\n} from \"./module\";\n\nimport {\n  ElementKind,\n  FunctionPrototype,\n  Class,\n  Field,\n  OperatorKind,\n  FlowFlags,\n  Global,\n  DecoratorFlags\n} from \"./program\";\n\nimport {\n  ReportMode\n} from \"./resolver\";\n\nimport {\n  CommonFlags\n} from \"./common\";\n\n/** Compiles a call to a built-in function. */\nexport function compileCall(\n  compiler: Compiler,\n  prototype: FunctionPrototype,\n  typeArguments: Type[] | null,\n  operands: Expression[],\n  contextualType: Type,\n  reportNode: Node\n): ExpressionRef {\n  var module = compiler.module;\n\n  var arg0: ExpressionRef,\n      arg1: ExpressionRef,\n      arg2: ExpressionRef,\n      ret: ExpressionRef;\n\n  // NOTE that some implementations below make use of the select expression where straight-forward.\n  // whether worth or not should probably be tested once it's known if/how embedders handle it.\n  // search: createSelect\n\n  switch (prototype.internalName) {\n\n    // types\n\n    case \"isInteger\": { // isInteger<T!>() / isInteger<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.createUnreachable();\n      return type.is(TypeFlags.INTEGER) && !type.is(TypeFlags.REFERENCE)\n        ? module.createI32(1)\n        : module.createI32(0);\n    }\n    case \"isFloat\": { // isFloat<T!>() / isFloat<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.createUnreachable();\n      return type.is(TypeFlags.FLOAT)\n        ? module.createI32(1)\n        : module.createI32(0);\n    }\n    case \"isSigned\": { // isSigned<T!>() / isSigned<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.createUnreachable();\n      return type.is(TypeFlags.SIGNED)\n        ? module.createI32(1)\n        : module.createI32(0);\n    }\n    case \"isReference\": { // isReference<T!>() / isReference<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.createUnreachable();\n      compiler.currentType = Type.bool;\n      return type.is(TypeFlags.REFERENCE)\n        ? module.createI32(1)\n        : module.createI32(0);\n    }\n    case \"isString\": { // isString<T!>() / isString<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.createUnreachable();\n      let classType = type.classReference;\n      if (classType) {\n        let stringInstance = compiler.program.stringInstance;\n        if (stringInstance && classType.isAssignableTo(stringInstance)) return module.createI32(1);\n      }\n      return module.createI32(0);\n    }\n    case \"isArray\": { // isArray<T!>() / isArray<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.createUnreachable();\n      let classType = type.classReference;\n      return classType !== null && classType.lookupOverload(OperatorKind.INDEXED_GET) !== null\n        ? module.createI32(1)\n        : module.createI32(0);\n    }\n    case \"isDefined\": { // isDefined(expression) -> bool\n      compiler.currentType = Type.bool;\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      let element = compiler.resolver.resolveExpression(operands[0], compiler.currentFunction, ReportMode.SWALLOW);\n      return module.createI32(element ? 1 : 0);\n    }\n    case \"isConstant\": { // isConstant(expression) -> bool\n      compiler.currentType = Type.bool;\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      let expr = compiler.compileExpressionRetainType(operands[0], Type.i32, WrapMode.NONE);\n      compiler.currentType = Type.bool;\n      return module.createI32(getExpressionId(expr) == ExpressionId.Const ? 1 : 0);\n    }\n    case \"isManaged\": { // isManaged<T>() -> bool\n      if (!compiler.program.hasGC) {\n        compiler.currentType = Type.bool;\n        return module.createI32(0);\n      }\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.createUnreachable();\n      let classType = type.classReference;\n      return classType !== null && !classType.hasDecorator(DecoratorFlags.UNMANAGED)\n        ? module.createI32(1)\n        : module.createI32(0);\n    }\n\n    // math\n\n    case \"clz\": { // clz<T?>(value: T) -> T\n      if (operands.length != 1) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE, WrapMode.WRAP);\n      }\n      switch (compiler.currentType.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.U8:\n        case TypeKind.U16: {\n          ret = module.createUnary(UnaryOp.ClzI32, arg0);\n          break;\n        }\n        case TypeKind.BOOL: // usually overflows\n        case TypeKind.I32:\n        case TypeKind.U32: {\n          ret = module.createUnary(UnaryOp.ClzI32, arg0);\n          break;\n        }\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          // fall-through\n        }\n        case TypeKind.ISIZE: {\n          ret = module.createUnary(\n            compiler.options.isWasm64\n              ? UnaryOp.ClzI64\n              : UnaryOp.ClzI32,\n            arg0\n          );\n          break;\n        }\n        case TypeKind.I64:\n        case TypeKind.U64: {\n          ret = module.createUnary(UnaryOp.ClzI64, arg0);\n          break;\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"ctz\": { // ctz<T?>(value: T) -> T\n      if (operands.length != 1) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.NONE, WrapMode.WRAP);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE, WrapMode.WRAP);\n      }\n      switch (compiler.currentType.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.U8:\n        case TypeKind.U16: {\n          ret = module.createUnary(UnaryOp.CtzI32, arg0);\n          break;\n        }\n        case TypeKind.BOOL: // usually overflows\n        case TypeKind.I32:\n        case TypeKind.U32: {\n          ret = module.createUnary(UnaryOp.CtzI32, arg0);\n          break;\n        }\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          // fall-through\n        }\n        case TypeKind.ISIZE: {\n          ret = module.createUnary(\n            compiler.options.isWasm64\n              ? UnaryOp.CtzI64\n              : UnaryOp.CtzI32,\n            arg0\n          );\n          break;\n        }\n        case TypeKind.I64:\n        case TypeKind.U64: {\n          ret = module.createUnary(UnaryOp.CtzI64, arg0);\n          break;\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"popcnt\": { // popcnt<T?>(value: T) -> T\n      if (operands.length != 1) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE, WrapMode.WRAP);\n      }\n      switch (compiler.currentType.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.U8:\n        case TypeKind.U16: {\n          ret = module.createUnary(UnaryOp.PopcntI32, arg0);\n          break;\n        }\n        case TypeKind.BOOL: // usually overflows\n        case TypeKind.I32:\n        case TypeKind.U32: {\n          ret = module.createUnary(UnaryOp.PopcntI32, arg0);\n          break;\n        }\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          // fall-through\n        }\n        case TypeKind.ISIZE: {\n          ret = module.createUnary(\n            compiler.options.isWasm64\n              ? UnaryOp.PopcntI64\n              : UnaryOp.PopcntI32,\n            arg0\n          );\n          break;\n        }\n        case TypeKind.I64:\n        case TypeKind.U64: {\n          ret = module.createUnary(UnaryOp.PopcntI64, arg0);\n          break;\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"rotl\": { // rotl<T?>(value: T, shift: T) -> T\n      if (operands.length != 2) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"2\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE, WrapMode.WRAP);\n      }\n      arg1 = compiler.compileExpression(operands[1], compiler.currentType, ConversionKind.IMPLICIT, WrapMode.NONE);\n      switch (compiler.currentType.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.BOOL: {\n          ret = compiler.ensureSmallIntegerWrap(\n            module.createBinary(BinaryOp.RotlI32, arg0, arg1),\n            compiler.currentType\n          );\n          // fall-through\n        }\n        case TypeKind.I32:\n        case TypeKind.U32: {\n          ret = module.createBinary(BinaryOp.RotlI32, arg0, arg1);\n          break;\n        }\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          // fall-through\n        }\n        case TypeKind.ISIZE: {\n          ret = module.createBinary(\n            compiler.options.isWasm64\n              ? BinaryOp.RotlI64\n              : BinaryOp.RotlI32,\n            arg0,\n            arg1\n          );\n          break;\n        }\n        case TypeKind.I64:\n        case TypeKind.U64: {\n          ret = module.createBinary(BinaryOp.RotlI64, arg0, arg1);\n          break;\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret; // possibly overflows\n    }\n    case \"rotr\": { // rotr<T?>(value: T, shift: T) -> T\n      if (operands.length != 2) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"2\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE, WrapMode.WRAP);\n      }\n      arg1 = compiler.compileExpression(operands[1], compiler.currentType, ConversionKind.IMPLICIT, WrapMode.NONE);\n      switch (compiler.currentType.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.BOOL: {\n          ret = compiler.ensureSmallIntegerWrap(\n            module.createBinary(BinaryOp.RotrI32, arg0, arg1),\n            compiler.currentType\n          );\n          break;\n        }\n        case TypeKind.I32:\n        case TypeKind.U32: {\n          ret = module.createBinary(BinaryOp.RotrI32, arg0, arg1);\n          break;\n        }\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          // fall-through\n        }\n        case TypeKind.ISIZE: {\n          ret = module.createBinary(\n            compiler.options.isWasm64\n              ? BinaryOp.RotrI64\n              : BinaryOp.RotrI32,\n            arg0,\n            arg1\n          );\n          break;\n        }\n        case TypeKind.I64:\n        case TypeKind.U64: {\n          ret = module.createBinary(BinaryOp.RotrI64, arg0, arg1);\n          break;\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret; // possibly overflowws\n    }\n    case \"abs\": { // abs<T?>(value: T) -> T\n      if (operands.length != 1) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.WRAP);\n      }\n      switch (compiler.currentType.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.I32: {\n          // possibly overflows, e.g. abs<i8>(-128) == 128\n          let tempLocal = compiler.currentFunction.getAndFreeTempLocal(Type.i32, false);\n          ret = module.createSelect( // x > 0 ? x : 0-x\n            module.createTeeLocal(tempLocal.index, arg0),\n            module.createBinary(BinaryOp.SubI32, // ifFalse\n              module.createI32(0),\n              module.createGetLocal(tempLocal.index, NativeType.I32)\n            ),\n            module.createBinary(BinaryOp.GtI32,\n              module.createGetLocal(tempLocal.index, NativeType.I32),\n              module.createI32(0)\n            )\n          );\n          break;\n        }\n        case TypeKind.ISIZE: {\n          let tempLocal = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType, false);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal.index, arg0),\n            module.createBinary(\n              compiler.options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              compiler.options.usizeType.toNativeZero(module),\n              module.createGetLocal(tempLocal.index, compiler.options.nativeSizeType)\n            ),\n            module.createBinary(\n              compiler.options.isWasm64\n                ? BinaryOp.GtI64\n                : BinaryOp.GtI32,\n              module.createGetLocal(tempLocal.index, compiler.options.nativeSizeType),\n              compiler.options.usizeType.toNativeZero(module)\n            )\n          );\n          break;\n        }\n        case TypeKind.I64: {\n          let tempLocal = compiler.currentFunction.getAndFreeTempLocal(Type.i64, false);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal.index, arg0),\n            module.createBinary(BinaryOp.SubI64,\n              module.createI64(0, 0),\n              module.createGetLocal(tempLocal.index, NativeType.I64),\n            ),\n            module.createBinary(BinaryOp.GtI64,\n              module.createGetLocal(tempLocal.index, NativeType.I64),\n              module.createI64(0, 0)\n            )\n          );\n          break;\n        }\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          // fall-through\n        }\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.U32:\n        case TypeKind.U64:\n        case TypeKind.BOOL: {\n          ret = arg0;\n          break;\n        }\n        case TypeKind.F32: {\n          ret = module.createUnary(UnaryOp.AbsF32, arg0);\n          break;\n        }\n        case TypeKind.F64: {\n          ret = module.createUnary(UnaryOp.AbsF64, arg0);\n          break;\n        }\n        case TypeKind.VOID: {\n          ret = module.createUnreachable();\n          break;\n        }\n        default: { // void\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"max\": { // max<T?>(left: T, right: T) -> T\n      if (operands.length != 2) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"2\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.WRAP);\n      }\n      arg1 = compiler.compileExpression(operands[1], compiler.currentType, ConversionKind.IMPLICIT, WrapMode.WRAP);\n      switch (compiler.currentType.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.I32: {\n          let flow = compiler.currentFunction.flow;\n          let tempLocal0 = compiler.currentFunction.getTempLocal(\n            compiler.currentType,\n            !flow.canOverflow(arg0, compiler.currentType)\n          );\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(\n            compiler.currentType,\n            !flow.canOverflow(arg1, compiler.currentType)\n          );\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(BinaryOp.GtI32,\n              module.createGetLocal(tempLocal0.index, NativeType.I32),\n              module.createGetLocal(tempLocal1.index, NativeType.I32)\n            )\n          );\n          break;\n        }\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.U32:\n        case TypeKind.BOOL: {\n          let flow = compiler.currentFunction.flow;\n          let tempLocal0 = compiler.currentFunction.getTempLocal(\n            compiler.currentType,\n            !flow.canOverflow(arg0, compiler.currentType)\n          );\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(\n            compiler.currentType,\n            !flow.canOverflow(arg1, compiler.currentType)\n          );\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(BinaryOp.GtU32,\n              module.createGetLocal(tempLocal0.index, NativeType.I32),\n              module.createGetLocal(tempLocal1.index, NativeType.I32)\n            )\n          );\n          break;\n        }\n        case TypeKind.I64: {\n          let tempLocal0 = compiler.currentFunction.getTempLocal(Type.i64, false);\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(Type.i64, false);\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(BinaryOp.GtI64,\n              module.createGetLocal(tempLocal0.index, NativeType.I64),\n              module.createGetLocal(tempLocal1.index, NativeType.I64)\n            )\n          );\n          break;\n        }\n        case TypeKind.U64: {\n          let tempLocal0 = compiler.currentFunction.getTempLocal(Type.i64, false);\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(Type.i64, false);\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(BinaryOp.GtU64,\n              module.createGetLocal(tempLocal0.index, NativeType.I64),\n              module.createGetLocal(tempLocal1.index, NativeType.I64)\n            )\n          );\n          break;\n        }\n        case TypeKind.ISIZE: {\n          let tempLocal0 = compiler.currentFunction.getTempLocal(compiler.options.usizeType, false);\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType, false);\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(\n              compiler.options.isWasm64\n                ? BinaryOp.GtI64\n                : BinaryOp.GtI32,\n              module.createGetLocal(tempLocal0.index, compiler.options.nativeSizeType),\n              module.createGetLocal(tempLocal1.index, compiler.options.nativeSizeType)\n            )\n          );\n          break;\n        }\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          let tempLocal0 = compiler.currentFunction.getTempLocal(compiler.options.usizeType, false);\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType, false);\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(\n              compiler.options.isWasm64\n                ? BinaryOp.GtU64\n                : BinaryOp.GtU32,\n              module.createGetLocal(tempLocal0.index, compiler.options.nativeSizeType),\n              module.createGetLocal(tempLocal1.index, compiler.options.nativeSizeType)\n            )\n          );\n          break;\n        }\n        case TypeKind.F32: {\n          ret = module.createBinary(BinaryOp.MaxF32, arg0, arg1);\n          break;\n        }\n        case TypeKind.F64: {\n          ret = module.createBinary(BinaryOp.MaxF64, arg0, arg1);\n          break;\n        }\n        default: { // void\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"min\": { // min<T?>(left: T, right: T) -> T\n      if (operands.length != 2) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"2\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.WRAP);\n      }\n      arg1 = compiler.compileExpression(operands[1], compiler.currentType, ConversionKind.IMPLICIT, WrapMode.WRAP);\n      switch (compiler.currentType.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.I32: {\n          let flow = compiler.currentFunction.flow;\n          let tempLocal0 = compiler.currentFunction.getTempLocal(\n            compiler.currentType,\n            !flow.canOverflow(arg0, compiler.currentType)\n          );\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(\n            compiler.currentType,\n            !flow.canOverflow(arg1, compiler.currentType)\n          );\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(BinaryOp.LtI32,\n              module.createGetLocal(tempLocal0.index, NativeType.I32),\n              module.createGetLocal(tempLocal1.index, NativeType.I32)\n            )\n          );\n          break;\n        }\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.U32:\n        case TypeKind.BOOL: {\n          let flow = compiler.currentFunction.flow;\n          let tempLocal0 = compiler.currentFunction.getTempLocal(\n            compiler.currentType,\n            !flow.canOverflow(arg0, compiler.currentType)\n          );\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(\n            compiler.currentType,\n            !flow.canOverflow(arg1, compiler.currentType)\n          );\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(BinaryOp.LtU32,\n              module.createGetLocal(tempLocal0.index, NativeType.I32),\n              module.createGetLocal(tempLocal1.index, NativeType.I32)\n            )\n          );\n          break;\n        }\n        case TypeKind.I64: {\n          let tempLocal0 = compiler.currentFunction.getTempLocal(Type.i64, false);\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(Type.i64, false);\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(BinaryOp.LtI64,\n              module.createGetLocal(tempLocal0.index, NativeType.I64),\n              module.createGetLocal(tempLocal1.index, NativeType.I64)\n            )\n          );\n          break;\n        }\n        case TypeKind.U64: {\n          let tempLocal0 = compiler.currentFunction.getTempLocal(Type.i64, false);\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(Type.i64, false);\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(BinaryOp.LtU64,\n              module.createGetLocal(tempLocal0.index, NativeType.I64),\n              module.createGetLocal(tempLocal1.index, NativeType.I64)\n            )\n          );\n          break;\n        }\n        case TypeKind.ISIZE: {\n          let tempLocal0 = compiler.currentFunction.getTempLocal(compiler.options.usizeType, false);\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType, false);\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(\n              compiler.options.isWasm64\n                ? BinaryOp.LtI64\n                : BinaryOp.LtI32,\n              module.createGetLocal(tempLocal0.index, compiler.options.nativeSizeType),\n              module.createGetLocal(tempLocal1.index, compiler.options.nativeSizeType)\n            )\n          );\n          break;\n        }\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          let tempLocal0 = compiler.currentFunction.getTempLocal(compiler.options.usizeType, false);\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType, false);\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(\n              compiler.options.isWasm64\n                ? BinaryOp.LtU64\n                : BinaryOp.LtU32,\n              module.createGetLocal(tempLocal0.index, compiler.options.nativeSizeType),\n              module.createGetLocal(tempLocal1.index, compiler.options.nativeSizeType)\n            )\n          );\n          break;\n        }\n        case TypeKind.F32: {\n          ret = module.createBinary(BinaryOp.MinF32, arg0, arg1);\n          break;\n        }\n        case TypeKind.F64: {\n          ret = module.createBinary(BinaryOp.MinF64, arg0, arg1);\n          break;\n        }\n        default: { // void\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"ceil\": { // ceil<T?>(value: T) -> T\n      if (operands.length != 1) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.NONE);\n      }\n      switch (compiler.currentType.kind) {\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          // fall-through\n        }\n        default: { // any integer\n          ret = arg0;\n          break;\n        }\n        case TypeKind.F32: {\n          ret = module.createUnary(UnaryOp.CeilF32, arg0);\n          break;\n        }\n        case TypeKind.F64: {\n          ret = module.createUnary(UnaryOp.CeilF64, arg0);\n          break;\n        }\n        case TypeKind.VOID: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"floor\": { // floor<T?>(value: T) -> T\n      if (operands.length != 1) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.NONE);\n      }\n      switch (compiler.currentType.kind) {\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          // fall-through\n        }\n        default: { // any integer\n          ret = arg0;\n          break;\n        }\n        case TypeKind.F32: {\n          ret = module.createUnary(UnaryOp.FloorF32, arg0);\n          break;\n        }\n        case TypeKind.F64: {\n          ret = module.createUnary(UnaryOp.FloorF64, arg0);\n          break;\n        }\n        case TypeKind.VOID: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"copysign\": { // copysign<T?>(left: T, right: T) -> T\n      if (operands.length != 2) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"2\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.NONE);\n      }\n      arg1 = compiler.compileExpression(operands[1], compiler.currentType, ConversionKind.IMPLICIT, WrapMode.NONE);\n      switch (compiler.currentType.kind) { // TODO: does an integer version make sense?\n        case TypeKind.F32: {\n          ret = module.createBinary(BinaryOp.CopysignF32, arg0, arg1);\n          break;\n        }\n        case TypeKind.F64: {\n          ret = module.createBinary(BinaryOp.CopysignF64, arg0, arg1);\n          break;\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"nearest\": { // nearest<T?>(value: T) -> T\n      if (operands.length != 1) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.NONE);\n      }\n      switch (compiler.currentType.kind) {\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          // fall-through\n        }\n        default: { // any integer\n          ret = arg0;\n          break;\n        }\n        case TypeKind.F32: {\n          ret = module.createUnary(UnaryOp.NearestF32, arg0);\n          break;\n        }\n        case TypeKind.F64: {\n          ret = module.createUnary(UnaryOp.NearestF64, arg0);\n          break;\n        }\n        case TypeKind.VOID: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"reinterpret\": { // reinterpret<T!>(value: *) -> T\n      if (operands.length != 1) {\n        if (!(typeArguments && typeArguments.length == 1)) {\n          if (typeArguments && typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n          );\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (!(typeArguments && typeArguments.length == 1)) {\n        if (typeArguments && typeArguments.length) compiler.currentType = typeArguments[0];\n        compiler.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n        );\n        return module.createUnreachable();\n      }\n      switch (typeArguments[0].kind) {\n        case TypeKind.I32:\n        case TypeKind.U32: {\n          arg0 = compiler.compileExpression(operands[0], Type.f32, ConversionKind.IMPLICIT, WrapMode.NONE);\n          ret = module.createUnary(UnaryOp.ReinterpretF32, arg0);\n          break;\n        }\n        case TypeKind.I64:\n        case TypeKind.U64: {\n          arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.IMPLICIT, WrapMode.NONE);\n          ret = module.createUnary(UnaryOp.ReinterpretF64, arg0);\n          break;\n        }\n        case TypeKind.USIZE: {\n          if (typeArguments[0].is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            compiler.currentType = typeArguments[0];\n            return module.createUnreachable();\n          }\n          // fall-through\n        }\n        case TypeKind.ISIZE: {\n          arg0 = compiler.compileExpression(\n            operands[0],\n            compiler.options.isWasm64\n              ? Type.f64\n              : Type.f32,\n            ConversionKind.IMPLICIT,\n            WrapMode.NONE\n          );\n          ret = module.createUnary(\n            compiler.options.isWasm64\n              ? UnaryOp.ReinterpretF64\n              : UnaryOp.ReinterpretF32,\n            arg0\n          );\n          break;\n        }\n        case TypeKind.F32: {\n          arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.IMPLICIT, WrapMode.NONE);\n          ret = module.createUnary(UnaryOp.ReinterpretI32, arg0);\n          break;\n        }\n        case TypeKind.F64: {\n          arg0 = compiler.compileExpression(operands[0], Type.i64, ConversionKind.IMPLICIT, WrapMode.NONE);\n          ret = module.createUnary(UnaryOp.ReinterpretI64, arg0);\n          break;\n        }\n        default: { // small integers and void\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      compiler.currentType = typeArguments[0];\n      return ret;\n    }\n    case \"sqrt\": { // sqrt<T?>(value: T) -> T\n      if (operands.length != 1) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.NONE);\n      }\n      switch (compiler.currentType.kind) { // TODO: integer versions (that return f64 or convert)?\n        case TypeKind.F32: {\n          ret = module.createUnary(UnaryOp.SqrtF32, arg0);\n          break;\n        }\n        case TypeKind.F64: {\n          ret = module.createUnary(UnaryOp.SqrtF64, arg0);\n          break;\n        }\n        // case TypeKind.VOID:\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"trunc\": { // trunc<T?>(value: T) -> T\n      if (operands.length != 1) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments && typeArguments.length) {\n        compiler.currentType = typeArguments[0];\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.NONE);\n      }\n      switch (compiler.currentType.kind) {\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          // fall-through\n        }\n        default: { // any integer\n          ret = arg0;\n          break;\n        }\n        // TODO: truncate to contextual type directly (if not void etc.)?\n        case TypeKind.F32: {\n          ret = module.createUnary(UnaryOp.TruncF32, arg0);\n          break;\n        }\n        case TypeKind.F64: {\n          ret = module.createUnary(UnaryOp.TruncF64, arg0);\n          break;\n        }\n        case TypeKind.VOID: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n\n    // memory access\n\n    case \"load\": { // load<T!>(offset: usize, constantOffset?: usize) -> *\n      if (operands.length < 1 || operands.length > 2) {\n        if (!(typeArguments && typeArguments.length == 1)) {\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n          );\n        }\n        if (operands.length < 1) {\n          compiler.error(\n            DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\n            reportNode.range, \"1\", operands.length.toString(10)\n          );\n        } else {\n          compiler.error(\n            DiagnosticCode.Expected_0_arguments_but_got_1,\n            reportNode.range, \"2\", operands.length.toString(10)\n          );\n        }\n        return module.createUnreachable();\n      }\n      if (!(typeArguments && typeArguments.length == 1)) {\n        if (typeArguments && typeArguments.length) compiler.currentType = typeArguments[0];\n        compiler.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n        );\n        return module.createUnreachable();\n      }\n      arg0 = compiler.compileExpression(\n        operands[0],\n        compiler.options.usizeType,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      let offset = operands.length == 2 ? evaluateConstantOffset(compiler, operands[1]) : 0; // reports\n      if (offset < 0) { // reported in evaluateConstantOffset\n        return module.createUnreachable();\n      }\n      compiler.currentType = typeArguments[0];\n      return module.createLoad(\n        typeArguments[0].byteSize,\n        typeArguments[0].is(TypeFlags.SIGNED | TypeFlags.INTEGER),\n        arg0,\n        typeArguments[0].is(TypeFlags.INTEGER) &&\n        contextualType.is(TypeFlags.INTEGER) &&\n        contextualType.size > typeArguments[0].size\n          ? (compiler.currentType = contextualType).toNativeType()\n          : (compiler.currentType = typeArguments[0]).toNativeType(),\n        offset\n      );\n    }\n    case \"store\": { // store<T!>(offset: usize, value: *, constantOffset?: usize) -> void\n      compiler.currentType = Type.void;\n      if (operands.length < 2 || operands.length > 3) {\n        if (!(typeArguments && typeArguments.length == 1)) {\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n          );\n        }\n        if (operands.length < 2) {\n          compiler.error(\n            DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\n            reportNode.range, \"2\", operands.length.toString(10)\n          );\n        } else {\n          compiler.error(\n            DiagnosticCode.Expected_0_arguments_but_got_1,\n            reportNode.range, \"3\", operands.length.toString(10)\n          );\n        }\n        return module.createUnreachable();\n      }\n      if (!(typeArguments && typeArguments.length == 1)) {\n        compiler.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n        );\n        return module.createUnreachable();\n      }\n      arg0 = compiler.compileExpression(\n        operands[0],\n        compiler.options.usizeType,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      arg1 = compiler.compileExpression(\n        operands[1],\n        typeArguments[0],\n        typeArguments[0].is(TypeFlags.INTEGER)\n          ? ConversionKind.NONE // no need to convert to small int (but now might result in a float)\n          : ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      let type: Type;\n      if (\n        typeArguments[0].is(TypeFlags.INTEGER) &&\n        (\n          !compiler.currentType.is(TypeFlags.INTEGER) ||    // float to int\n          compiler.currentType.size < typeArguments[0].size // int to larger int (clear garbage bits)\n        )\n      ) {\n        arg1 = compiler.convertExpression(\n          arg1,\n          compiler.currentType, typeArguments[0],\n          ConversionKind.IMPLICIT,\n          WrapMode.NONE, // still clears garbage bits\n          operands[1]\n        );\n        type = typeArguments[0];\n      } else {\n        type = compiler.currentType;\n      }\n      let offset = operands.length == 3 ? evaluateConstantOffset(compiler, operands[2]) : 0; // reports\n      if (offset < 0) { // reported in evaluateConstantOffset\n        return module.createUnreachable();\n      }\n      compiler.currentType = Type.void;\n      return module.createStore(typeArguments[0].byteSize, arg0, arg1, type.toNativeType(), offset);\n    }\n    case \"sizeof\": { // sizeof<T!>() -> usize\n      compiler.currentType = compiler.options.usizeType;\n      if (operands.length != 0) {\n        if (!(typeArguments && typeArguments.length == 1)) {\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n          );\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"0\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (!(typeArguments && typeArguments.length == 1)) {\n        compiler.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n        );\n      }\n      let byteSize = (<Type[]>typeArguments)[0].byteSize;\n      if (compiler.options.isWasm64) {\n        // implicitly wrap if contextual type is a 32-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\n          compiler.currentType = Type.u32;\n          ret = module.createI32(byteSize);\n        } else {\n          ret = module.createI64(byteSize, 0);\n        }\n      } else {\n        // implicitly extend if contextual type is a 64-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\n          compiler.currentType = Type.u64;\n          ret = module.createI64(byteSize, 0);\n        } else {\n          ret = module.createI32(byteSize);\n        }\n      }\n      return ret;\n    }\n    case \"alignof\": { // alignof<T!>() -> usize\n      compiler.currentType = compiler.options.usizeType;\n      if (operands.length != 0) {\n        if (!(typeArguments && typeArguments.length == 1)) {\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n          );\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"0\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (!(typeArguments && typeArguments.length == 1)) {\n        compiler.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n        );\n        return module.createUnreachable();\n      }\n      let byteSize = (<Type[]>typeArguments)[0].byteSize;\n      let alignLog2: i32;\n      switch (byteSize) {\n        case 1: { alignLog2 = 0; break; }\n        case 2: { alignLog2 = 1; break; }\n        case 4: { alignLog2 = 2; break; }\n        case 8: { alignLog2 = 3; break; }\n        default: { assert(false); return module.createUnreachable(); }\n      }\n      if (compiler.options.isWasm64) {\n        // implicitly wrap if contextual type is a 32-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\n          compiler.currentType = Type.u32;\n          ret = module.createI32(alignLog2);\n        } else {\n          ret = module.createI64(alignLog2, 0);\n        }\n      } else {\n        // implicitly extend if contextual type is a 64-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\n          compiler.currentType = Type.u64;\n          ret = module.createI64(alignLog2, 0);\n        } else {\n          ret = module.createI32(alignLog2);\n        }\n      }\n      return ret;\n    }\n    case \"offsetof\": { // offsetof<T!>(fieldName?: string) -> usize\n      compiler.currentType = compiler.options.usizeType;\n      if (operands.length > 1) {\n        if (!(typeArguments && typeArguments.length == 1)) {\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n          );\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (!(typeArguments && typeArguments.length == 1)) {\n        compiler.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n        );\n        return module.createUnreachable();\n      }\n      let classType = typeArguments[0].classReference;\n      if (!classType) {\n        compiler.error( // TODO: better error\n          DiagnosticCode.Operation_not_supported,\n          reportNode.range\n        );\n        return module.createUnreachable();\n      }\n      let offset: i32;\n      if (operands.length) {\n        if (\n          operands[0].kind != NodeKind.LITERAL ||\n          (<LiteralExpression>operands[0]).literalKind != LiteralKind.STRING\n        ) {\n          compiler.error(\n            DiagnosticCode.String_literal_expected,\n            operands[0].range\n          );\n          return module.createUnreachable();\n        }\n        let fieldName = (<StringLiteralExpression>operands[0]).value;\n        let field = classType.members ? classType.members.get(fieldName) : null;\n        if (!(field && field.kind == ElementKind.FIELD)) {\n          compiler.error(\n            DiagnosticCode.Type_0_has_no_property_1,\n            operands[0].range, classType.internalName, fieldName\n          );\n          return module.createUnreachable();\n        }\n        offset = (<Field>field).memoryOffset;\n      } else {\n        offset = classType.currentMemoryOffset;\n      }\n      if (compiler.options.isWasm64) {\n        // implicitly wrap if contextual type is a 32-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\n          compiler.currentType = Type.u32;\n          return module.createI32(offset);\n        } else {\n          return module.createI64(offset);\n        }\n      } else {\n        // implicitly extend if contextual type is a 64-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\n          compiler.currentType = Type.u64;\n          return module.createI64(offset);\n        } else {\n          return module.createI32(offset);\n        }\n      }\n    }\n\n    // control flow\n\n    case \"select\": { // select<T?>(ifTrue: T, ifFalse: T, condition: bool) -> T\n      if (operands.length != 3) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"3\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\n      } else {\n        arg0 = compiler.compileExpressionRetainType(operands[0], Type.i32, WrapMode.NONE);\n      }\n      let type = compiler.currentType;\n      arg1 = compiler.compileExpression(operands[1], type, ConversionKind.IMPLICIT, WrapMode.NONE);\n      arg2 = compiler.makeIsTrueish(\n        compiler.compileExpressionRetainType(operands[2], Type.bool, WrapMode.NONE),\n        compiler.currentType\n      );\n      compiler.currentType = type;\n      switch (compiler.currentType.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.BOOL: {\n          ret = module.createSelect(arg0, arg1, arg2);\n          break;\n        }\n        default: { // any other value type\n          ret = module.createSelect(arg0, arg1, arg2);\n          break;\n        }\n        case TypeKind.VOID: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"unreachable\": { // unreachable() -> *\n      if (operands.length != 0) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"0\", operands.length.toString(10)\n        );\n      }\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      return module.createUnreachable();\n    }\n\n    // host operations\n\n    case \"memory.size\": { // memory.size() -> i32\n      compiler.currentType = Type.i32;\n      if (operands.length != 0) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"0\", operands.length.toString(10)\n        );\n      }\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      return module.createHost(HostOp.CurrentMemory);\n    }\n    case \"memory.grow\": { // memory.grow(pages: i32) -> i32\n      compiler.currentType = Type.i32;\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"0\", operands.length.toString(10)\n        );\n        arg0 = module.createUnreachable();\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.IMPLICIT, WrapMode.NONE);\n      }\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      return module.createHost(HostOp.GrowMemory, null, [ arg0 ]);\n    }\n    // see: https://github.com/WebAssembly/bulk-memory-operations\n    case \"memory.copy\": { // memory.copy(dest: usize, src: usize: n: usize) -> void\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 3) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"3\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.void;\n        return module.createUnreachable();\n      }\n      arg0 = compiler.compileExpression(\n        operands[0],\n        compiler.options.usizeType,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      arg1 = compiler.compileExpression(\n        operands[1],\n        compiler.options.usizeType,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      arg2 = compiler.compileExpression(\n        operands[2],\n        compiler.options.usizeType,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      compiler.currentType = Type.void;\n      throw new Error(\"not implemented\");\n      // return module.createHost(HostOp.MoveMemory, null, [ arg0, arg1, arg2 ]);\n    }\n    case \"memory.fill\": { // memory.fill(dest: usize, value: u8, n: usize) -> void\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 3) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"3\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.void;\n        return module.createUnreachable();\n      }\n      arg0 = compiler.compileExpression(\n        operands[0],\n        compiler.options.usizeType,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      arg1 = compiler.compileExpression(\n        operands[1],\n        Type.u32,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      arg2 = compiler.compileExpression(\n        operands[2],\n        compiler.options.usizeType,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      compiler.currentType = Type.void;\n      throw new Error(\"not implemented\");\n      // return module.createHost(HostOp.SetMemory, null, [ arg0, arg1, arg2 ]);\n    }\n\n    // other\n\n    case \"changetype\": { // changetype<T!>(value: *) -> T\n      if (!(typeArguments && typeArguments.length == 1)) {\n        if (typeArguments && typeArguments.length) compiler.currentType = typeArguments[0];\n        compiler.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n        );\n        return module.createUnreachable();\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = typeArguments[0];\n        return module.createUnreachable();\n      }\n      arg0 = compiler.compileExpressionRetainType(\n        operands[0],\n        typeArguments[0],\n        WrapMode.NONE\n      );\n      compiler.currentType = typeArguments[0];\n      if (compiler.currentType.size != typeArguments[0].size) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.range\n        );\n        return module.createUnreachable();\n      }\n      // if (reportNode.range.source.sourceKind != SourceKind.STDLIB)\n      //  compiler.warning(DiagnosticCode.Operation_is_unsafe, reportNode.range);\n      return arg0; // any usize to any usize\n    }\n    case \"assert\": { // assert<T?>(isTrueish: T, message?: string) -> T with T != null\n      if (operands.length < 1 || operands.length > 2) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0].nonNullableType;\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        if (operands.length < 1) {\n          compiler.error(\n            DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\n            reportNode.range, \"1\", operands.length.toString(10)\n          );\n        } else if (operands.length > 2) {\n          compiler.error(\n            DiagnosticCode.Expected_0_arguments_but_got_1,\n            reportNode.range, \"2\", operands.length.toString(10)\n          );\n        }\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length) compiler.currentType = typeArguments[0].nonNullableType;\n        if (typeArguments.length != 1) {\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\n      } else {\n        arg0 = compiler.compileExpressionRetainType(operands[0], Type.bool, WrapMode.WRAP);\n      }\n\n      let type = compiler.currentType;\n      compiler.currentType = type.nonNullableType;\n\n      // just return ifTrueish if assertions are disabled, or simplify if dropped anyway\n      if (compiler.options.noAssert) {\n        if (contextualType == Type.void) {\n          compiler.currentType = Type.void;\n          return module.createNop();\n        }\n        return arg0;\n      }\n\n      let abort = compileAbort(compiler, operands.length == 2 ? operands[1] : null, reportNode);\n\n      compiler.currentType = type.nonNullableType;\n\n      if (contextualType == Type.void) { // simplify if dropped anyway\n        switch (compiler.currentType.kind) {\n          default: { // any integer up to 32-bits incl. bool\n            ret = module.createIf(\n              module.createUnary(UnaryOp.EqzI32,\n                arg0\n              ),\n              abort\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            ret = module.createIf(\n              module.createUnary(UnaryOp.EqzI64,\n                arg0\n              ),\n              abort\n            );\n            break;\n          }\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            ret = module.createIf(\n              module.createUnary(\n                compiler.options.isWasm64\n                  ? UnaryOp.EqzI64\n                  : UnaryOp.EqzI32,\n                arg0\n              ),\n              abort\n            );\n            break;\n          }\n          // TODO: also check for NaN in float assertions, as in `Boolean(NaN) -> false`?\n          case TypeKind.F32: {\n            ret = module.createIf(\n              module.createBinary(BinaryOp.EqF32,\n                arg0,\n                module.createF32(0)\n              ),\n              abort\n            );\n            break;\n          }\n          case TypeKind.F64: {\n            ret = module.createIf(\n              module.createBinary(BinaryOp.EqF64,\n                arg0,\n                module.createF64(0)\n              ),\n              abort\n            );\n            break;\n          }\n          case TypeKind.VOID: {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = abort;\n            break;\n          }\n        }\n        compiler.currentType = Type.void;\n      } else {\n        switch (compiler.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            let flow = compiler.currentFunction.flow;\n            let tempLocal = compiler.currentFunction.getAndFreeTempLocal(\n              compiler.currentType,\n              !flow.canOverflow(arg0, compiler.currentType)\n            );\n            ret = module.createIf(\n              module.createTeeLocal(tempLocal.index, arg0),\n              module.createGetLocal(tempLocal.index, NativeType.I32),\n              abort\n            );\n            break;\n          }\n          case TypeKind.I32:\n          case TypeKind.U32:\n          default: {\n            let tempLocal = compiler.currentFunction.getAndFreeTempLocal(Type.i32, false);\n            ret = module.createIf(\n              module.createTeeLocal(tempLocal.index, arg0),\n              module.createGetLocal(tempLocal.index, NativeType.I32),\n              abort\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            let tempLocal = compiler.currentFunction.getAndFreeTempLocal(Type.i64, false);\n            ret = module.createIf(\n              module.createUnary(UnaryOp.EqzI64,\n                module.createTeeLocal(tempLocal.index, arg0)\n              ),\n              abort,\n              module.createGetLocal(tempLocal.index, NativeType.I64)\n            );\n            break;\n          }\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            let tempLocal = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType, false);\n            ret = module.createIf(\n              module.createUnary(\n                compiler.options.isWasm64\n                  ? UnaryOp.EqzI64\n                  : UnaryOp.EqzI32,\n                module.createTeeLocal(tempLocal.index, arg0)\n              ),\n              abort,\n              module.createGetLocal(tempLocal.index, compiler.options.nativeSizeType)\n            );\n            break;\n          }\n          case TypeKind.F32: {\n            let tempLocal = compiler.currentFunction.getAndFreeTempLocal(Type.f32, false);\n            ret = module.createIf(\n              module.createBinary(BinaryOp.EqF32,\n                module.createTeeLocal(tempLocal.index, arg0),\n                module.createF32(0)\n              ),\n              abort,\n              module.createGetLocal(tempLocal.index, NativeType.F32)\n            );\n            break;\n          }\n          case TypeKind.F64: {\n            let tempLocal = compiler.currentFunction.getAndFreeTempLocal(Type.f64, false);\n            ret = module.createIf(\n              module.createBinary(BinaryOp.EqF64,\n                module.createTeeLocal(tempLocal.index, arg0),\n                module.createF64(0)\n              ),\n              abort,\n              module.createGetLocal(tempLocal.index, NativeType.F64)\n            );\n            break;\n          }\n          case TypeKind.VOID: {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = abort;\n            break;\n          }\n        }\n      }\n      return ret;\n    }\n    case \"unchecked\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      let flow = compiler.currentFunction.flow;\n      flow.set(FlowFlags.UNCHECKED_CONTEXT);\n      ret = compiler.compileExpressionRetainType(operands[0], contextualType, WrapMode.NONE);\n      flow.unset(FlowFlags.UNCHECKED_CONTEXT);\n      return ret;\n    }\n    case \"call_indirect\": { // call_indirect<T?>(target: Function | u32, ...args: *[]) -> T\n      if (operands.length < 1) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      let returnType: Type;\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        returnType = typeArguments[0];\n      } else {\n        returnType = contextualType;\n      }\n      arg0 = compiler.compileExpressionRetainType(operands[0], Type.u32, WrapMode.NONE);\n      if (compiler.currentType.kind != TypeKind.U32) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          operands[0].range\n        );\n        return module.createUnreachable();\n      }\n      let numOperands = operands.length - 1;\n      let operandExprs = new Array<ExpressionRef>(numOperands);\n      let signatureParts = new Array<string>(numOperands + 1);\n      let nativeReturnType = returnType.toNativeType();\n      let nativeParamTypes = new Array<NativeType>(numOperands);\n      for (let i = 0; i < numOperands; ++i) {\n        operandExprs[i] = compiler.compileExpressionRetainType(operands[1 + i], Type.i32, WrapMode.NONE);\n        let operandType = compiler.currentType;\n        signatureParts[i] = operandType.toSignatureString();\n        nativeParamTypes[i] = operandType.toNativeType();\n      }\n      signatureParts[numOperands] = returnType.toSignatureString();\n      let typeName = signatureParts.join(\"\");\n      let typeRef = module.getFunctionTypeBySignature(nativeReturnType, nativeParamTypes);\n      if (!typeRef) typeRef = module.addFunctionType(typeName, nativeReturnType, nativeParamTypes);\n      compiler.currentType = returnType;\n      // of course this can easily result in a 'RuntimeError: function signature mismatch' trap and\n      // thus must be used with care. it exists because it *might* be useful in specific scenarios.\n      return module.createCallIndirect(arg0, operandExprs, typeName);\n    }\n\n    // user-defined diagnostic macros\n\n    case \"ERROR\": {\n      compiler.error(\n        DiagnosticCode.User_defined_0,\n        reportNode.range, (operands.length ? operands[0] : reportNode).range.toString()\n      );\n      return module.createUnreachable();\n    }\n    case \"WARNING\": {\n      compiler.warning(\n        DiagnosticCode.User_defined_0,\n        reportNode.range, (operands.length ? operands[0] : reportNode).range.toString()\n      );\n      return module.createNop();\n    }\n    case \"INFO\": {\n      compiler.info(\n        DiagnosticCode.User_defined_0,\n        reportNode.range, (operands.length ? operands[0] : reportNode).range.toString()\n      );\n      return module.createNop();\n    }\n\n    // conversions\n\n    case \"i8\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.i8;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        Type.i8,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    case \"i16\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.i16;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        Type.i16,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    case \"i32\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.i32;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        Type.i32,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    case \"i64\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.i64;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        Type.i64,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    case \"isize\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = compiler.options.isWasm64\n          ? Type.isize64\n          : Type.isize32;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        compiler.options.isWasm64\n          ? Type.isize64\n          : Type.isize32,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    case \"u8\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.u8;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        Type.u8,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    case \"u16\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.u16;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        Type.u16,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    case \"u32\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.u32;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        Type.u32,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    case \"u64\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.u64;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        Type.u64,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    case \"usize\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = compiler.options.usizeType;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        compiler.options.usizeType,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    case \"bool\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.bool;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        Type.bool,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    case \"f32\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.f32;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        Type.f32,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    case \"f64\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.f64;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        Type.f64,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n\n    // gc\n\n    case \"iterateRoots\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.void;\n        return module.createUnreachable();\n      }\n      let expr = compiler.compileExpressionRetainType(operands[0], Type.u32, WrapMode.NONE);\n      let type = compiler.currentType;\n      let signatureReference = type.signatureReference;\n      compiler.currentType = Type.void;\n      if (\n        !type.is(TypeFlags.REFERENCE) ||\n        !signatureReference ||\n        signatureReference.parameterTypes.length != 1 ||\n        signatureReference.parameterTypes[0] != compiler.options.usizeType\n       ) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n          reportNode.range, type.toString(), \"(ref: usize) => void\"\n        );\n        return module.createUnreachable();\n      }\n      compiler.currentType = Type.void;\n      // just emit a call even if the function doesn't yet exist\n      compiler.needsIterateRoots = true;\n      return module.createCall(\"~iterateRoots\", [ expr ], NativeType.None);\n    }\n  }\n  var expr = deferASMCall(compiler, prototype, operands, contextualType, reportNode);\n  if (expr) {\n    if (typeArguments && typeArguments.length) {\n      compiler.error(\n        DiagnosticCode.Type_0_is_not_generic,\n        reportNode.range, prototype.internalName\n      );\n    }\n    return expr;\n  }\n  compiler.error(\n    DiagnosticCode.Operation_not_supported,\n    reportNode.range\n  );\n  return module.createUnreachable();\n}\n\n/** Defers an inline-assembler-like call to a built-in function. */\nfunction deferASMCall(\n  compiler: Compiler,\n  prototype: FunctionPrototype,\n  operands: Expression[],\n  contextualType: Type,\n  reportNode: Node\n): ExpressionRef {\n  switch (prototype.internalName) {\n\n    // TODO: Operators can't be just deferred (don't have a corresponding generic built-in)\n    //   add, sub, mul, div_s, div_u, rem_s, rem_u\n    //   and, or, xor, shl, shr_u, shr_s\n    //   eq, eqz, ne, lt_s, lt_u, le_s, le_u, gt_s, gt_u, ge_s, ge_u\n\n    case \"i32.clz\": return deferASM(\"clz\", compiler, Type.i32, operands, Type.i32, reportNode);\n    case \"i64.clz\": return deferASM(\"clz\", compiler, Type.i64, operands, Type.i64, reportNode);\n\n    case \"i32.ctz\": return deferASM(\"ctz\", compiler, Type.i32, operands, Type.i32, reportNode);\n    case \"i64.ctz\": return deferASM(\"ctz\", compiler, Type.i64, operands, Type.i64, reportNode);\n\n    case \"i32.popcnt\": return deferASM(\"popcnt\", compiler, Type.i32, operands, Type.i32, reportNode);\n    case \"i64.popcnt\": return deferASM(\"popcnt\", compiler, Type.i64, operands, Type.i64, reportNode);\n\n    case \"i32.rotl\": return deferASM(\"rotl\", compiler, Type.i32, operands, Type.i32, reportNode);\n    case \"i64.rotl\": return deferASM(\"rotl\", compiler, Type.i64, operands, Type.i64, reportNode);\n\n    case \"i32.rotr\": return deferASM(\"rotr\", compiler, Type.i32, operands, Type.i32, reportNode);\n    case \"i64.rotr\": return deferASM(\"rotr\", compiler, Type.i64, operands, Type.i64, reportNode);\n\n    case \"f32.abs\": return deferASM(\"abs\", compiler, Type.f32, operands, Type.f32, reportNode);\n    case \"f64.abs\": return deferASM(\"abs\", compiler, Type.f64, operands, Type.f64, reportNode);\n\n    case \"f32.max\": return deferASM(\"max\", compiler, Type.f32, operands, Type.f32, reportNode);\n    case \"f64.max\": return deferASM(\"max\", compiler, Type.f64, operands, Type.f64, reportNode);\n\n    case \"f32.min\": return deferASM(\"min\", compiler, Type.f32, operands, Type.f32, reportNode);\n    case \"f64.min\": return deferASM(\"min\", compiler, Type.f64, operands, Type.f64, reportNode);\n\n    case \"f32.ceil\": return deferASM(\"ceil\", compiler, Type.f32, operands, Type.f32, reportNode);\n    case \"f64.ceil\": return deferASM(\"ceil\", compiler, Type.f64, operands, Type.f64, reportNode);\n\n    case \"f32.floor\": return deferASM(\"floor\", compiler, Type.f32, operands, Type.f32, reportNode);\n    case \"f64.floor\": return deferASM(\"floor\", compiler, Type.f64, operands, Type.f64, reportNode);\n\n    case \"f32.copysign\": return deferASM(\"copysign\", compiler, Type.f32, operands, Type.f32, reportNode);\n    case \"f64.copysign\": return deferASM(\"copysign\", compiler, Type.f64, operands, Type.f64, reportNode);\n\n    case \"f32.nearest\": return deferASM(\"nearest\", compiler, Type.f32, operands, Type.f32, reportNode);\n    case \"f64.nearest\": return deferASM(\"nearest\", compiler, Type.f64, operands, Type.f64, reportNode);\n\n    case \"i32.reinterpret_f32\": return deferASM(\"reinterpret\", compiler, Type.i32, operands, Type.f32, reportNode);\n    case \"i64.reinterpret_f64\": return deferASM(\"reinterpret\", compiler, Type.i64, operands, Type.f64, reportNode);\n    case \"f32.reinterpret_i32\": return deferASM(\"reinterpret\", compiler, Type.f32, operands, Type.i32, reportNode);\n    case \"f64.reinterpret_i64\": return deferASM(\"reinterpret\", compiler, Type.f64, operands, Type.i64, reportNode);\n\n    case \"f32.sqrt\": return deferASM(\"sqrt\", compiler, Type.f32, operands, Type.f32, reportNode);\n    case \"f64.sqrt\": return deferASM(\"sqrt\", compiler, Type.f64, operands, Type.f64, reportNode);\n\n    case \"f32.trunc\": return deferASM(\"trunc\", compiler, Type.f32, operands, Type.f32, reportNode);\n    case \"f64.trunc\": return deferASM(\"trunc\", compiler, Type.f64, operands, Type.f64, reportNode);\n\n    case \"i32.load8_s\": return deferASM(\"load\", compiler, Type.i8, operands, Type.i32, reportNode);\n    case \"i32.load8_u\": return deferASM(\"load\", compiler, Type.u8, operands, Type.u32, reportNode);\n    case \"i32.load16_s\": return deferASM(\"load\", compiler, Type.i16, operands, Type.i32, reportNode);\n    case \"i32.load16_u\": return deferASM(\"load\", compiler, Type.u16, operands, Type.u32, reportNode);\n    case \"i32.load\": return deferASM(\"load\", compiler, Type.i32, operands, Type.i32, reportNode);\n    case \"i64.load8_s\": return deferASM(\"load\", compiler, Type.i8, operands, Type.i64, reportNode);\n    case \"i64.load8_u\": return deferASM(\"load\", compiler, Type.u8, operands, Type.u64, reportNode);\n    case \"i64.load16_s\": return deferASM(\"load\", compiler, Type.i16, operands, Type.i64, reportNode);\n    case \"i64.load16_u\": return deferASM(\"load\", compiler, Type.u16, operands, Type.u64, reportNode);\n    case \"i64.load32_s\": return deferASM(\"load\", compiler, Type.i32, operands, Type.i64, reportNode);\n    case \"i64.load32_u\": return deferASM(\"load\", compiler, Type.u32, operands, Type.u64, reportNode);\n    case \"i64.load\": return deferASM(\"load\", compiler, Type.i64, operands, Type.i64, reportNode);\n    case \"f32.load\": return deferASM(\"load\", compiler, Type.f32, operands, Type.f32, reportNode);\n    case \"f64.load\": return deferASM(\"load\", compiler, Type.f64, operands, Type.f64, reportNode);\n\n    case \"i32.store8\": return deferASM(\"store\", compiler, Type.i8, operands, Type.i32, reportNode);\n    case \"i32.store16\": return deferASM(\"store\", compiler, Type.i16, operands, Type.i32, reportNode);\n    case \"i32.store\": return deferASM(\"store\", compiler, Type.i32, operands, Type.i32, reportNode);\n    case \"i64.store8\": return deferASM(\"store\", compiler, Type.i8, operands, Type.i64, reportNode);\n    case \"i64.store16\": return deferASM(\"store\", compiler, Type.i16, operands, Type.i64, reportNode);\n    case \"i64.store32\": return deferASM(\"store\", compiler, Type.i32, operands, Type.i64, reportNode);\n    case \"i64.store\": return deferASM(\"store\", compiler, Type.i64, operands, Type.i64, reportNode);\n    case \"f32.store\": return deferASM(\"store\", compiler, Type.f32, operands, Type.f32, reportNode);\n    case \"f64.store\": return deferASM(\"store\", compiler, Type.f64, operands, Type.f64, reportNode);\n  }\n  return 0;\n}\n\n/** A helper for deferring inline-assembler-like calls to built-in functions. */\nfunction deferASM(\n  name: string,\n  compiler: Compiler,\n  typeArgument: Type,\n  operands: Expression[],\n  valueType: Type,\n  reportNode: Node\n): ExpressionRef {\n  var prototype = assert(compiler.program.elementsLookup.get(name));\n  assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n  return compileCall(compiler, <FunctionPrototype>prototype, [ typeArgument ], operands, valueType, reportNode);\n}\n\n/** Evaluates the constant type of a type argument *or* expression. */\nfunction evaluateConstantType(\n  compiler: Compiler,\n  typeArguments: Type[] | null,\n  operands: Expression[],\n  reportNode: Node\n): Type | null {\n  if (operands.length == 0) { // requires type argument\n    if (!typeArguments || typeArguments.length != 1) {\n      compiler.error(\n        DiagnosticCode.Expected_0_type_arguments_but_got_1,\n        reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n      );\n      return null;\n    }\n    return typeArguments[0];\n  }\n  if (operands.length == 1) { // optional type argument\n    if (typeArguments) {\n      if (typeArguments.length == 1) {\n        compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\n      } else {\n        if (typeArguments.length) {\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return null;\n        }\n        compiler.compileExpressionRetainType(operands[0], Type.i32, WrapMode.NONE);\n      }\n    } else {\n      compiler.compileExpressionRetainType(operands[0], Type.i32, WrapMode.NONE);\n    }\n    return compiler.currentType;\n  }\n  if (typeArguments && typeArguments.length > 1) {\n    compiler.error(\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\n      reportNode.range, \"1\", typeArguments.length.toString(10)\n    );\n  }\n  compiler.error(\n    DiagnosticCode.Expected_0_arguments_but_got_1,\n    reportNode.range, \"1\", operands.length.toString(10)\n  );\n  return null;\n}\n\n/** Evaluates a `constantOffset` argument.*/\nfunction evaluateConstantOffset(compiler: Compiler, expression: Expression): i32 {\n  var expr: ExpressionRef;\n  var value: i32;\n  if (compiler.options.isWasm64) {\n    expr = compiler.precomputeExpression(expression, Type.usize64, ConversionKind.IMPLICIT, WrapMode.NONE);\n    if (\n      getExpressionId(expr) != ExpressionId.Const ||\n      getExpressionType(expr) != NativeType.I64 ||\n      getConstValueI64High(expr) != 0 ||\n      (value = getConstValueI64Low(expr)) < 0\n    ) {\n      compiler.error(\n        DiagnosticCode.Operation_not_supported,\n        expression.range\n      );\n      value = -1;\n    }\n  } else {\n    expr = compiler.precomputeExpression(expression, Type.usize32, ConversionKind.IMPLICIT, WrapMode.NONE);\n    if (\n      getExpressionId(expr) != ExpressionId.Const ||\n      getExpressionType(expr) != NativeType.I32 ||\n      (value = getConstValueI32(expr)) < 0\n    ) {\n      compiler.error(\n        DiagnosticCode.Operation_not_supported,\n        expression.range\n      );\n      value = -1;\n    }\n  }\n  return value;\n}\n\n/** Compiles a memory allocation for an instance of the specified class. */\nexport function compileAllocate(\n  compiler: Compiler,\n  classInstance: Class,\n  reportNode: Node\n): ExpressionRef {\n  var program = compiler.program;\n  assert(classInstance.program == program);\n  var module = compiler.module;\n  var options = compiler.options;\n\n  // __gc_allocate(size, markFn)\n  if (program.hasGC && classInstance.type.isManaged(program)) {\n    let allocateInstance = assert(program.gcAllocateInstance);\n    if (!compiler.compileFunction(allocateInstance)) return module.createUnreachable();\n    compiler.currentType = classInstance.type;\n    return module.createCall(\n      allocateInstance.internalName, [\n        options.isWasm64\n          ? module.createI64(classInstance.currentMemoryOffset)\n          : module.createI32(classInstance.currentMemoryOffset),\n        module.createI32(\n          ensureGCHook(compiler, classInstance)\n        )\n      ],\n      options.nativeSizeType\n    );\n\n  // memory.allocate(size)\n  } else {\n    let allocateInstance = program.memoryAllocateInstance;\n    if (!allocateInstance) {\n      program.error(\n        DiagnosticCode.Cannot_find_name_0,\n        reportNode.range, \"memory.allocate\"\n      );\n      return module.createUnreachable();\n    }\n    if (!compiler.compileFunction(allocateInstance)) return module.createUnreachable();\n\n    compiler.currentType = classInstance.type;\n    return module.createCall(\n      allocateInstance.internalName, [\n        options.isWasm64\n          ? module.createI64(classInstance.currentMemoryOffset)\n          : module.createI32(classInstance.currentMemoryOffset)\n      ],\n      options.nativeSizeType\n    );\n  }\n}\n\n/** Compiles an abort wired to the conditionally imported 'abort' function. */\nexport function compileAbort(\n  compiler: Compiler,\n  message: Expression | null,\n  reportNode: Node\n): ExpressionRef {\nreturn compiler.module.createUnreachable();\n//  var program = compiler.program;\n//  var module = compiler.module;\n//\n//  var stringType = program.typesLookup.get(\"string\");\n//  if (!stringType) return module.createUnreachable();\n//\n//  var abortInstance = program.abortInstance;\n//  if (!(abortInstance && compiler.compileFunction(abortInstance))) return module.createUnreachable();\n//\n//  var messageArg = message != null\n//    ? compiler.compileExpression(message, stringType, ConversionKind.IMPLICIT, WrapMode.NONE)\n//    : stringType.toNativeZero(module);\n//\n//  var filenameArg = compiler.ensureStaticString(reportNode.range.source.normalizedPath);\n//\n//  compiler.currentType = Type.void;\n//  return module.createBlock(null, [\n//    module.createCall(\n//      abortInstance.internalName, [\n//        messageArg,\n//        filenameArg,\n//        module.createI32(reportNode.range.line),\n//        module.createI32(reportNode.range.column)\n//      ],\n//      NativeType.None\n//    ),\n//    module.createUnreachable()\n//  ]);\n}\n\n/** Compiles the iterateRoots function if requires. */\nexport function compileIterateRoots(compiler: Compiler): void {\n  var module = compiler.module;\n  var exprs = new Array<ExpressionRef>();\n\n  for (let element of compiler.program.elementsLookup.values()) {\n    if (element.kind != ElementKind.GLOBAL) continue;\n    let global = <Global>element;\n    let classReference = global.type.classReference;\n    if (\n      global.is(CommonFlags.COMPILED) &&\n      classReference !== null &&\n      !classReference.hasDecorator(DecoratorFlags.UNMANAGED)\n    ) {\n      if (global.is(CommonFlags.INLINED)) {\n        let value = global.constantIntegerValue;\n        exprs.push(\n          module.createCallIndirect(\n            module.createGetLocal(0, NativeType.I32),\n            [\n              compiler.options.isWasm64\n                ? module.createI64(i64_low(value), i64_high(value))\n                : module.createI32(i64_low(value))\n            ],\n            \"iv\"\n          )\n        );\n      } else {\n        exprs.push(\n          module.createCallIndirect(\n            module.createGetLocal(0, NativeType.I32),\n            [\n              module.createGetGlobal(\n                global.internalName,\n                compiler.options.nativeSizeType\n              )\n            ],\n            \"iv\"\n          )\n        );\n      }\n    }\n  }\n  var typeRef = compiler.ensureFunctionType([ Type.i32 ], Type.void);\n  module.addFunction(\"~iterateRoots\", typeRef, [],\n    exprs.length\n      ? module.createBlock(null, exprs)\n      : module.createNop()\n  );\n}\n\n/** Ensures that the specified class's GC hook exists and returns its function table index. */\nexport function ensureGCHook(\n  compiler: Compiler,\n  classInstance: Class\n): u32 {\n  var program = compiler.program;\n  assert(classInstance.type.isManaged(program));\n\n  // check if the GC hook has already been created\n  {\n    let existingIndex = classInstance.gcHookIndex;\n    if (existingIndex != <u32>-1) return existingIndex;\n  }\n\n  // check if the class implements a custom GC function (only valid for internals)\n  var members = classInstance.members;\n  if (classInstance.prototype.declaration.range.source.isLibrary) {\n    if (members !== null && members.has(\"__gc\")) {\n      let gcPrototype = assert(members.get(\"__gc\"));\n      assert(gcPrototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n      let gcInstance = assert(program.resolver.resolveFunction(<FunctionPrototype>gcPrototype, null));\n      assert(gcInstance.is(CommonFlags.PRIVATE | CommonFlags.INSTANCE));\n      assert(!gcInstance.isAny(CommonFlags.AMBIENT | CommonFlags.VIRTUAL));\n      assert(gcInstance.signature.parameterTypes.length == 0);\n      assert(gcInstance.signature.returnType == Type.void);\n      gcInstance.internalName = classInstance.internalName + \"~gc\";\n      assert(compiler.compileFunction(gcInstance));\n      let index = compiler.ensureFunctionTableEntry(gcInstance);\n      classInstance.gcHookIndex = index;\n      return index;\n    }\n  }\n\n  var module = compiler.module;\n  var options = compiler.options;\n  var nativeSizeType = options.nativeSizeType;\n  var nativeSizeSize = options.usizeType.byteSize;\n  var body = new Array<ExpressionRef>();\n\n  // nothing to mark if 'this' is null\n  body.push(\n    module.createIf(\n      module.createUnary(\n        options.isWasm64\n          ? UnaryOp.EqzI64\n          : UnaryOp.EqzI32,\n        module.createGetLocal(0, nativeSizeType)\n      ),\n      module.createReturn()\n    )\n  );\n\n  // remember the function index so we don't recurse infinitely\n  var functionTable = compiler.functionTable;\n  var gcHookIndex = functionTable.length;\n  functionTable.push(\"<placeholder>\");\n  classInstance.gcHookIndex = gcHookIndex;\n\n  // if the class extends a base class, call its hook first (calls mark)\n  var baseInstance = classInstance.base;\n  if (baseInstance) {\n    assert(baseInstance.type.isManaged(program));\n    body.push(\n      module.createCallIndirect(\n        module.createI32(\n          ensureGCHook(compiler, <Class>baseInstance.type.classReference)\n        ),\n        [\n          module.createGetLocal(0, nativeSizeType)\n        ],\n        nativeSizeType == NativeType.I64 ? \"Iv\" : \"iv\"\n      )\n    );\n\n  // if this class is the top-most base class, mark the instance\n  } else {\n    body.push(\n      module.createCall(assert(program.gcMarkInstance).internalName, [\n        module.createGetLocal(0, nativeSizeType)\n      ], NativeType.None)\n    );\n  }\n\n  // mark instances assigned to own fields that are again references\n  if (members) {\n    for (let member of members.values()) {\n      if (member.kind == ElementKind.FIELD) {\n        if ((<Field>member).parent === classInstance) {\n          let type = (<Field>member).type;\n          if (type.isManaged(program)) {\n            let offset = (<Field>member).memoryOffset;\n            assert(offset >= 0);\n            body.push(\n              module.createCall(assert(program.gcMarkInstance).internalName, [\n                module.createLoad(\n                  nativeSizeSize,\n                  false,\n                  module.createGetLocal(0, nativeSizeType),\n                  nativeSizeType,\n                  offset\n                )\n              ], NativeType.None)\n            );\n          }\n        }\n      }\n    }\n  }\n\n  // add the function to the module and return its table index\n  var funcName = classInstance.internalName + \"~gc\";\n  module.addFunction(\n    funcName,\n    compiler.ensureFunctionType(null, Type.void, options.usizeType),\n    null,\n    module.createBlock(null, body)\n  );\n  functionTable[gcHookIndex] = funcName;\n  return gcHookIndex;\n}\n","/** @module util *//***/\n\n/** An enum of named character codes. */\nexport const enum CharCode {\n\n  NULL = 0,\n  LINEFEED = 0x0A,\n  CARRIAGERETURN = 0x0D,\n  LINESEPARATOR = 0x2028,\n  PARAGRAPHSEPARATOR = 0x2029,\n  NEXTLINE = 0x0085,\n\n  SPACE = 0x20,\n  NONBREAKINGSPACE = 0xA0,\n  ENQUAD = 0x2000,\n  EMQUAD = 0x2001,\n  ENSPACE = 0x2002,\n  EMSPACE = 0x2003,\n  THREEPEREMSPACE = 0x2004,\n  FOURPEREMSPACE = 0x2005,\n  SIXPEREMSPACE = 0x2006,\n  FIGURESPACE = 0x2007,\n  PUNCTUATIONSPACE = 0x2008,\n  THINSPACE = 0x2009,\n  HAIRSPACE = 0x200A,\n  ZEROWIDTHSPACE = 0x200B,\n  NARROWNOBREAKSPACE = 0x202F,\n  IDEOGRAPHICSPACE = 0x3000,\n  MATHEMATICALSPACE = 0x205F,\n  OGHAM = 0x1680,\n\n  _ = 0x5F,\n\n  _0 = 0x30,\n  _1 = 0x31,\n  _2 = 0x32,\n  _3 = 0x33,\n  _4 = 0x34,\n  _5 = 0x35,\n  _6 = 0x36,\n  _7 = 0x37,\n  _8 = 0x38,\n  _9 = 0x39,\n\n  a = 0x61,\n  b = 0x62,\n  c = 0x63,\n  d = 0x64,\n  e = 0x65,\n  f = 0x66,\n  g = 0x67,\n  h = 0x68,\n  i = 0x69,\n  j = 0x6A,\n  k = 0x6B,\n  l = 0x6C,\n  m = 0x6D,\n  n = 0x6E,\n  o = 0x6F,\n  p = 0x70,\n  q = 0x71,\n  r = 0x72,\n  s = 0x73,\n  t = 0x74,\n  u = 0x75,\n  v = 0x76,\n  w = 0x77,\n  x = 0x78,\n  y = 0x79,\n  z = 0x7A,\n\n  A = 0x41,\n  B = 0x42,\n  C = 0x43,\n  D = 0x44,\n  E = 0x45,\n  F = 0x46,\n  G = 0x47,\n  H = 0x48,\n  I = 0x49,\n  J = 0x4A,\n  K = 0x4B,\n  L = 0x4C,\n  M = 0x4D,\n  N = 0x4E,\n  O = 0x4F,\n  P = 0x50,\n  Q = 0x51,\n  R = 0x52,\n  S = 0x53,\n  T = 0x54,\n  U = 0x55,\n  V = 0x56,\n  W = 0x57,\n  X = 0x58,\n  Y = 0x59,\n  Z = 0x5a,\n\n  AMPERSAND = 0x26,\n  ASTERISK = 0x2A,\n  AT = 0x40,\n  BACKSLASH = 0x5C,\n  BACKTICK = 0x60,\n  BAR = 0x7C,\n  CARET = 0x5E,\n  CLOSEBRACE = 0x7D,\n  CLOSEBRACKET = 0x5D,\n  CLOSEPAREN = 0x29,\n  COLON = 0x3A,\n  COMMA = 0x2C,\n  DOLLAR = 0x24,\n  DOT = 0x2E,\n  DOUBLEQUOTE = 0x22,\n  EQUALS = 0x3D,\n  EXCLAMATION = 0x21,\n  GREATERTHAN = 0x3E,\n  HASH = 0x23,\n  LESSTHAN = 0x3C,\n  MINUS = 0x2D,\n  OPENBRACE = 0x7B,\n  OPENBRACKET = 0x5B,\n  OPENPAREN = 0x28,\n  PERCENT = 0x25,\n  PLUS = 0x2B,\n  QUESTION = 0x3F,\n  SEMICOLON = 0x3B,\n  SINGLEQUOTE = 0x27,\n  SLASH = 0x2F,\n  TILDE = 0x7E,\n\n  BACKSPACE = 0x08,\n  FORMFEED = 0x0C,\n  BYTEORDERMARK = 0xFEFF,\n  TAB = 0x09,\n  VERTICALTAB = 0x0B\n}\n\n/** Tests if the specified character code is some sort of line break. */\nexport function isLineBreak(c: CharCode): bool {\n  switch (c) {\n    case CharCode.LINEFEED:\n    case CharCode.CARRIAGERETURN:\n    case CharCode.LINESEPARATOR:\n    case CharCode.PARAGRAPHSEPARATOR: {\n      return true;\n    }\n    default: {\n      return false;\n    }\n  }\n}\n\n/** Tests if the specified character code is some sort of white space. */\nexport function isWhiteSpace(c: i32): bool {\n  switch (c) {\n    case CharCode.SPACE:\n    case CharCode.TAB:\n    case CharCode.VERTICALTAB:\n    case CharCode.FORMFEED:\n    case CharCode.NONBREAKINGSPACE:\n    case CharCode.NEXTLINE:\n    case CharCode.OGHAM:\n    case CharCode.NARROWNOBREAKSPACE:\n    case CharCode.MATHEMATICALSPACE:\n    case CharCode.IDEOGRAPHICSPACE:\n    case CharCode.BYTEORDERMARK: {\n      return true;\n    }\n    default: {\n      return c >= CharCode.ENQUAD && c <= CharCode.ZEROWIDTHSPACE;\n    }\n  }\n}\n\n/** Tests if the specified character code is a valid decimal digit. */\nexport function isDecimalDigit(c: i32): bool {\n  return c >= CharCode._0 && c <= CharCode._9;\n}\n\n/** Tests if the specified character code is a valid octal digit. */\nexport function isOctalDigit(c: i32): bool {\n  return c >= CharCode._0 && c <= CharCode._7;\n}\n\n/** Tests if the specified character code is a valid start of an identifier. */\nexport function isIdentifierStart(c: i32): bool {\n  return c >= CharCode.A && c <= CharCode.Z\n      || c >= CharCode.a && c <= CharCode.z\n      || c == CharCode.DOLLAR\n      || c == CharCode._\n      || c > 0x7f && isUnicodeIdentifierStart(c);\n}\n\n/** Tests if the specified character code is a valid keyword character. */\nexport function isKeywordCharacter(c: i32): bool {\n  return c >= CharCode.a && c <= CharCode.z;\n}\n\n/** Tests if the specified character code is a valid part of an identifier. */\nexport function isIdentifierPart(c: i32): bool {\n  return c >= CharCode.A && c <= CharCode.Z\n      || c >= CharCode.a && c <= CharCode.z\n      || c >= CharCode._0 && c <= CharCode._9\n      || c == CharCode.DOLLAR\n      || c == CharCode._\n      || c > 0x7f && isUnicodeIdentifierPart(c);\n}\n\n// storing as u16 to save memory\nconst unicodeIdentifierStart: u16[] = [\n  170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 705, 710, 721, 736,\n  740, 748, 748, 750, 750, 880, 884, 886, 887, 890, 893, 902, 902, 904, 906,\n  908, 908, 910, 929, 931,\n  1013, 1015, 1153, 1162, 1319, 1329, 1366, 1369, 1369, 1377, 1415, 1488, 1514,\n  1520, 1522, 1568, 1610, 1646, 1647, 1649, 1747, 1749, 1749, 1765, 1766, 1774,\n  1775, 1786, 1788, 1791, 1791, 1808, 1808, 1810, 1839, 1869, 1957, 1969, 1969,\n  1994, 2026, 2036, 2037, 2042, 2042, 2048, 2069, 2074, 2074, 2084, 2084, 2088,\n  2088, 2112, 2136, 2208, 2208, 2210, 2220, 2308, 2361, 2365, 2365, 2384, 2384,\n  2392, 2401, 2417, 2423, 2425, 2431, 2437, 2444, 2447, 2448, 2451, 2472, 2474,\n  2480, 2482, 2482, 2486, 2489, 2493, 2493, 2510, 2510, 2524, 2525, 2527, 2529,\n  2544, 2545, 2565, 2570, 2575, 2576, 2579, 2600, 2602, 2608, 2610, 2611, 2613,\n  2614, 2616, 2617, 2649, 2652, 2654, 2654, 2674, 2676, 2693, 2701, 2703, 2705,\n  2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2749, 2749, 2768, 2768, 2784,\n  2785, 2821, 2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2869, 2873,\n  2877, 2877, 2908, 2909, 2911, 2913, 2929, 2929, 2947, 2947, 2949, 2954, 2958,\n  2960, 2962, 2965, 2969, 2970, 2972, 2972, 2974, 2975, 2979, 2980, 2984, 2986,\n  2990, 3001, 3024, 3024, 3077, 3084, 3086, 3088, 3090, 3112, 3114, 3123, 3125,\n  3129, 3133, 3133, 3160, 3161, 3168, 3169, 3205, 3212, 3214, 3216, 3218, 3240,\n  3242, 3251, 3253, 3257, 3261, 3261, 3294, 3294, 3296, 3297, 3313, 3314, 3333,\n  3340, 3342, 3344, 3346, 3386, 3389, 3389, 3406, 3406, 3424, 3425, 3450, 3455,\n  3461, 3478, 3482, 3505, 3507, 3515, 3517, 3517, 3520, 3526, 3585, 3632, 3634,\n  3635, 3648, 3654, 3713, 3714, 3716, 3716, 3719, 3720, 3722, 3722, 3725, 3725,\n  3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751, 3751, 3754, 3755, 3757,\n  3760, 3762, 3763, 3773, 3773, 3776, 3780, 3782, 3782, 3804, 3807, 3840, 3840,\n  3904, 3911, 3913, 3948, 3976, 3980, 4096, 4138, 4159, 4159, 4176, 4181, 4186,\n  4189, 4193, 4193, 4197, 4198, 4206, 4208, 4213, 4225, 4238, 4238, 4256, 4293,\n  4295, 4295, 4301, 4301, 4304, 4346, 4348, 4680, 4682, 4685, 4688, 4694, 4696,\n  4696, 4698, 4701, 4704, 4744, 4746, 4749, 4752, 4784, 4786, 4789, 4792, 4798,\n  4800, 4800, 4802, 4805, 4808, 4822, 4824, 4880, 4882, 4885, 4888, 4954, 4992,\n  5007, 5024, 5108, 5121, 5740, 5743, 5759, 5761, 5786, 5792, 5866, 5870, 5872,\n  5888, 5900, 5902, 5905, 5920, 5937, 5952, 5969, 5984, 5996, 5998, 6000, 6016,\n  6067, 6103, 6103, 6108, 6108, 6176, 6263, 6272, 6312, 6314, 6314, 6320, 6389,\n  6400, 6428, 6480, 6509, 6512, 6516, 6528, 6571, 6593, 6599, 6656, 6678, 6688,\n  6740, 6823, 6823, 6917, 6963, 6981, 6987, 7043, 7072, 7086, 7087, 7098, 7141,\n  7168, 7203, 7245, 7247, 7258, 7293, 7401, 7404, 7406, 7409, 7413, 7414, 7424,\n  7615, 7680, 7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025,\n  8027, 8027, 8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130,\n  8132, 8134, 8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188,\n  8305, 8305, 8319, 8319, 8336, 8348, 8450, 8450, 8455, 8455, 8458, 8467, 8469,\n  8469, 8473, 8477, 8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8505,\n  8508, 8511, 8517, 8521, 8526, 8526, 8544, 8584,\n  11264, 11310, 11312, 11358, 11360, 11492, 11499, 11502, 11506, 11507, 11520,\n  11557, 11559, 11559, 11565, 11565, 11568, 11623, 11631, 11631, 11648, 11670,\n  11680, 11686, 11688, 11694, 11696, 11702, 11704, 11710, 11712, 11718, 11720,\n  11726, 11728, 11734, 11736, 11742, 11823, 11823, 12293, 12295, 12321, 12329,\n  12337, 12341, 12344, 12348, 12353, 12438, 12445, 12447, 12449, 12538, 12540,\n  12543, 12549, 12589, 12593, 12686, 12704, 12730, 12784, 12799, 13312, 19893,\n  19968, 40908, 40960, 42124, 42192, 42237, 42240, 42508, 42512, 42527, 42538,\n  42539, 42560, 42606, 42623, 42647, 42656, 42735, 42775, 42783, 42786, 42888,\n  42891, 42894, 42896, 42899, 42912, 42922, 43000, 43009, 43011, 43013, 43015,\n  43018, 43020, 43042, 43072, 43123, 43138, 43187, 43250, 43255, 43259, 43259,\n  43274, 43301, 43312, 43334, 43360, 43388, 43396, 43442, 43471, 43471, 43520,\n  43560, 43584, 43586, 43588, 43595, 43616, 43638, 43642, 43642, 43648, 43695,\n  43697, 43697, 43701, 43702, 43705, 43709, 43712, 43712, 43714, 43714, 43739,\n  43741, 43744, 43754, 43762, 43764, 43777, 43782, 43785, 43790, 43793, 43798,\n  43808, 43814, 43816, 43822, 43968, 44002, 44032, 55203, 55216, 55238, 55243,\n  55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275, 64279, 64285, 64285,\n  64287, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321, 64323,\n  64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008, 65019,\n  65136, 65140, 65142, 65276, 65313, 65338, 65345, 65370, 65382, 65470, 65474,\n  65479, 65482, 65487, 65490, 65495, 65498, 65500,\n];\nconst unicodeIdentifierPart: u16[] = [\n  170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 705, 710, 721, 736,\n  740, 748, 748, 750, 750, 768, 884, 886, 887, 890, 893, 902, 902, 904, 906,\n  908, 908, 910, 929, 931,\n  1013, 1015, 1153, 1155, 1159, 1162, 1319, 1329, 1366, 1369, 1369, 1377, 1415,\n  1425, 1469, 1471, 1471, 1473, 1474, 1476, 1477, 1479, 1479, 1488, 1514, 1520,\n  1522, 1552, 1562, 1568, 1641, 1646, 1747, 1749, 1756, 1759, 1768, 1770, 1788,\n  1791, 1791, 1808, 1866, 1869, 1969, 1984, 2037, 2042, 2042, 2048, 2093, 2112,\n  2139, 2208, 2208, 2210, 2220, 2276, 2302, 2304, 2403, 2406, 2415, 2417, 2423,\n  2425, 2431, 2433, 2435, 2437, 2444, 2447, 2448, 2451, 2472, 2474, 2480, 2482,\n  2482, 2486, 2489, 2492, 2500, 2503, 2504, 2507, 2510, 2519, 2519, 2524, 2525,\n  2527, 2531, 2534, 2545, 2561, 2563, 2565, 2570, 2575, 2576, 2579, 2600, 2602,\n  2608, 2610, 2611, 2613, 2614, 2616, 2617, 2620, 2620, 2622, 2626, 2631, 2632,\n  2635, 2637, 2641, 2641, 2649, 2652, 2654, 2654, 2662, 2677, 2689, 2691, 2693,\n  2701, 2703, 2705, 2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2748, 2757,\n  2759, 2761, 2763, 2765, 2768, 2768, 2784, 2787, 2790, 2799, 2817, 2819, 2821,\n  2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2869, 2873, 2876, 2884,\n  2887, 2888, 2891, 2893, 2902, 2903, 2908, 2909, 2911, 2915, 2918, 2927, 2929,\n  2929, 2946, 2947, 2949, 2954, 2958, 2960, 2962, 2965, 2969, 2970, 2972, 2972,\n  2974, 2975, 2979, 2980, 2984, 2986, 2990, 3001, 3006, 3010, 3014, 3016, 3018,\n  3021, 3024, 3024, 3031, 3031, 3046, 3055, 3073, 3075, 3077, 3084, 3086, 3088,\n  3090, 3112, 3114, 3123, 3125, 3129, 3133, 3140, 3142, 3144, 3146, 3149, 3157,\n  3158, 3160, 3161, 3168, 3171, 3174, 3183, 3202, 3203, 3205, 3212, 3214, 3216,\n  3218, 3240, 3242, 3251, 3253, 3257, 3260, 3268, 3270, 3272, 3274, 3277, 3285,\n  3286, 3294, 3294, 3296, 3299, 3302, 3311, 3313, 3314, 3330, 3331, 3333, 3340,\n  3342, 3344, 3346, 3386, 3389, 3396, 3398, 3400, 3402, 3406, 3415, 3415, 3424,\n  3427, 3430, 3439, 3450, 3455, 3458, 3459, 3461, 3478, 3482, 3505, 3507, 3515,\n  3517, 3517, 3520, 3526, 3530, 3530, 3535, 3540, 3542, 3542, 3544, 3551, 3570,\n  3571, 3585, 3642, 3648, 3662, 3664, 3673, 3713, 3714, 3716, 3716, 3719, 3720,\n  3722, 3722, 3725, 3725, 3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751,\n  3751, 3754, 3755, 3757, 3769, 3771, 3773, 3776, 3780, 3782, 3782, 3784, 3789,\n  3792, 3801, 3804, 3807, 3840, 3840, 3864, 3865, 3872, 3881, 3893, 3893, 3895,\n  3895, 3897, 3897, 3902, 3911, 3913, 3948, 3953, 3972, 3974, 3991, 3993, 4028,\n  4038, 4038, 4096, 4169, 4176, 4253, 4256, 4293, 4295, 4295, 4301, 4301, 4304,\n  4346, 4348, 4680, 4682, 4685, 4688, 4694, 4696, 4696, 4698, 4701, 4704, 4744,\n  4746, 4749, 4752, 4784, 4786, 4789, 4792, 4798, 4800, 4800, 4802, 4805, 4808,\n  4822, 4824, 4880, 4882, 4885, 4888, 4954, 4957, 4959, 4992, 5007, 5024, 5108,\n  5121, 5740, 5743, 5759, 5761, 5786, 5792, 5866, 5870, 5872, 5888, 5900, 5902,\n  5908, 5920, 5940, 5952, 5971, 5984, 5996, 5998, 6000, 6002, 6003, 6016, 6099,\n  6103, 6103, 6108, 6109, 6112, 6121, 6155, 6157, 6160, 6169, 6176, 6263, 6272,\n  6314, 6320, 6389, 6400, 6428, 6432, 6443, 6448, 6459, 6470, 6509, 6512, 6516,\n  6528, 6571, 6576, 6601, 6608, 6617, 6656, 6683, 6688, 6750, 6752, 6780, 6783,\n  6793, 6800, 6809, 6823, 6823, 6912, 6987, 6992, 7001, 7019, 7027, 7040, 7155,\n  7168, 7223, 7232, 7241, 7245, 7293, 7376, 7378, 7380, 7414, 7424, 7654, 7676,\n  7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025, 8027, 8027,\n  8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130, 8132, 8134,\n  8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188, 8204, 8205,\n  8255, 8256, 8276, 8276, 8305, 8305, 8319, 8319, 8336, 8348, 8400, 8412, 8417,\n  8417, 8421, 8432, 8450, 8450, 8455, 8455, 8458, 8467, 8469, 8469, 8473, 8477,\n  8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8505, 8508, 8511, 8517,\n  8521, 8526, 8526, 8544, 8584,\n  11264, 11310, 11312, 11358, 11360, 11492, 11499, 11507, 11520, 11557, 11559,\n  11559, 11565, 11565, 11568, 11623, 11631, 11631, 11647, 11670, 11680, 11686,\n  11688, 11694, 11696, 11702, 11704, 11710, 11712, 11718, 11720, 11726, 11728,\n  11734, 11736, 11742, 11744, 11775, 11823, 11823, 12293, 12295, 12321, 12335,\n  12337, 12341, 12344, 12348, 12353, 12438, 12441, 12442, 12445, 12447, 12449,\n  12538, 12540, 12543, 12549, 12589, 12593, 12686, 12704, 12730, 12784, 12799,\n  13312, 19893, 19968, 40908, 40960, 42124, 42192, 42237, 42240, 42508, 42512,\n  42539, 42560, 42607, 42612, 42621, 42623, 42647, 42655, 42737, 42775, 42783,\n  42786, 42888, 42891, 42894, 42896, 42899, 42912, 42922, 43000, 43047, 43072,\n  43123, 43136, 43204, 43216, 43225, 43232, 43255, 43259, 43259, 43264, 43309,\n  43312, 43347, 43360, 43388, 43392, 43456, 43471, 43481, 43520, 43574, 43584,\n  43597, 43600, 43609, 43616, 43638, 43642, 43643, 43648, 43714, 43739, 43741,\n  43744, 43759, 43762, 43766, 43777, 43782, 43785, 43790, 43793, 43798, 43808,\n  43814, 43816, 43822, 43968, 44010, 44012, 44013, 44016, 44025, 44032, 55203,\n  55216, 55238, 55243, 55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275,\n  64279, 64285, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321,\n  64323, 64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008,\n  65019, 65024, 65039, 65056, 65062, 65075, 65076, 65101, 65103, 65136, 65140,\n  65142, 65276, 65296, 65305, 65313, 65338, 65343, 65343, 65345, 65370, 65382,\n  65470, 65474, 65479, 65482, 65487, 65490, 65495, 65498, 65500,\n];\n\nfunction lookupInUnicodeMap(code: u16, map: u16[]): bool {\n  if (code < map[0]) return false;\n\n  var lo = 0;\n  var hi = map.length;\n  var mid: i32;\n\n  while (lo + 1 < hi) {\n    mid = lo + (hi - lo) / 2;\n    mid -= mid % 2;\n    if (map[mid] <= code && code <= map[mid + 1]) {\n      return true;\n    }\n    if (code < map[mid]) {\n      hi = mid;\n    } else {\n      lo = mid + 2;\n    }\n  }\n  return false;\n}\n\nfunction isUnicodeIdentifierStart(code: i32): bool {\n  return code < 0 || code > 0xffff ? false\n       : lookupInUnicodeMap(code as u16, unicodeIdentifierStart);\n}\n\nfunction isUnicodeIdentifierPart(code: i32): bool {\n  return code < 0 || code > 0xffff ? false\n       : lookupInUnicodeMap(code as u16, unicodeIdentifierPart);\n}\n","/** @module util *//***/\n\nimport {\n  CharCode\n} from \"./charcode\";\n\nconst separator = CharCode.SLASH;\n\n/**\n * Normalizes the specified path, removing interior placeholders.\n * Expects a posix-compatible relative path (not Windows compatible).\n */\nexport function normalizePath(path: string): string {\n  var pos = 0;\n  var len = path.length;\n\n  // trim leading './'\n  while (pos + 1 < len &&\n    path.charCodeAt(pos) == CharCode.DOT &&\n    path.charCodeAt(pos + 1) == separator\n  ) {\n    pos += 2;\n  }\n\n  if (pos > 0 || len < path.length) {\n    path = path.substring(pos, len);\n    len -= pos;\n    pos = 0;\n  }\n\n  var atEnd: bool;\n  while (pos + 1 < len) {\n    atEnd = false;\n\n    // we are only interested in '/.' sequences ...\n    if (\n      path.charCodeAt(pos) == separator &&\n      path.charCodeAt(pos + 1) == CharCode.DOT\n    ) {\n      // '/.' ( '/' | $ )\n      atEnd = pos + 2 == len;\n      if (atEnd ||\n        pos + 2 < len &&\n        path.charCodeAt(pos + 2) == separator\n      ) {\n        path = atEnd\n          ? path.substring(0, pos)\n          : path.substring(0, pos) + path.substring(pos + 2);\n        len -= 2;\n        continue;\n      }\n\n      // '/.' ( './' | '.' $ )\n      atEnd = pos + 3 == len;\n      if (atEnd && path.charCodeAt(pos + 2) == CharCode.DOT ||\n        pos + 3 < len &&\n        path.charCodeAt(pos + 2) == CharCode.DOT &&\n        path.charCodeAt(pos + 3) == separator\n      ) {\n        // find preceeding '/'\n        let ipos = pos;\n        while (--ipos >= 0) {\n          if (path.charCodeAt(ipos) == separator) {\n            if (pos - ipos != 3 ||\n              path.charCodeAt(ipos + 1) != CharCode.DOT ||\n              path.charCodeAt(ipos + 2) != CharCode.DOT\n            ) { // exclude '..' itself\n              path = atEnd\n                ? path.substring(0, ipos)\n                : path.substring(0, ipos) + path.substring(pos + 3);\n              len -= pos + 3 - ipos;\n              pos = ipos - 1; // incremented again at end of loop\n            }\n            break;\n          }\n        }\n\n        // if there's no preceeding '/', trim start if non-empty\n        if (ipos < 0 && pos > 0) {\n          if (pos != 2 ||\n            path.charCodeAt(0) != CharCode.DOT ||\n            path.charCodeAt(1) != CharCode.DOT\n          ) { // exclude '..' itself\n            path = path.substring(pos + 4);\n            len = path.length;\n            continue;\n          }\n        }\n      }\n    }\n    pos++;\n  }\n  return len > 0 ? path : \".\";\n}\n\n/** Resolves the specified path relative to the specified origin. */\nexport function resolvePath(normalizedPath: string, origin: string): string {\n  if (normalizedPath.startsWith(\"std/\")) {\n    return normalizedPath;\n  }\n  return normalizePath(\n    dirname(origin) + String.fromCharCode(separator) + normalizedPath\n  );\n}\n\n/** Obtains the directory portion of a normalized path. */\nexport function dirname(normalizedPath: string): string {\n  var pos = normalizedPath.length;\n  while (--pos > 0) {\n    if (normalizedPath.charCodeAt(pos) == separator) {\n      return normalizedPath.substring(0, pos);\n    }\n  }\n  return \".\";\n}\n","/** @module util *//***/\n\nconst indentX1 = \"  \";\nconst indentX2 = \"    \";\nconst indentX4 = \"        \";\n\n/** Creates an indentation matching the number of specified levels. */\nexport function indent(sb: string[], level: i32): void {\n  while (level >= 4) {\n    sb.push(indentX4);\n    level -= 4;\n  }\n  if (level >= 2) {\n    sb.push(indentX2);\n    level -= 2;\n  }\n  if (level) {\n    sb.push(indentX1);\n  }\n}\n","/** @module util *//***/\n\n/** Reads an 8-bit integer from the specified buffer. */\nexport function readI8(buffer: Uint8Array, offset: i32): i32 {\n  return buffer[offset];\n}\n\n/** Writes an 8-bit integer to the specified buffer. */\nexport function writeI8(value: i32, buffer: Uint8Array, offset: i32): void {\n  buffer[offset] = value;\n}\n\n/** Reads a 16-bit integer from the specified buffer. */\nexport function readI16(buffer: Uint8Array, offset: i32): i32 {\n  return buffer[offset    ]\n       | buffer[offset + 1] << 8;\n}\n\n/** Writes a 16-bit integer to the specified buffer. */\nexport function writeI16(value: i32, buffer: Uint8Array, offset: i32): void {\n  buffer[offset    ] = value;\n  buffer[offset + 1] = value >>> 8;\n}\n\n/** Reads a 32-bit integer from the specified buffer. */\nexport function readI32(buffer: Uint8Array, offset: i32): i32 {\n  return buffer[offset    ]\n       | buffer[offset + 1] << 8\n       | buffer[offset + 2] << 16\n       | buffer[offset + 3] << 24;\n}\n\n/** Writes a 32-bit integer to the specified buffer. */\nexport function writeI32(value: i32, buffer: Uint8Array, offset: i32): void {\n  buffer[offset    ] = value;\n  buffer[offset + 1] = value >>> 8;\n  buffer[offset + 2] = value >>> 16;\n  buffer[offset + 3] = value >>> 24;\n}\n\n/** Reads a 64-bit integer from the specified buffer. */\nexport function readI64(buffer: Uint8Array, offset: i32): I64 {\n  var lo = readI32(buffer, offset);\n  var hi = readI32(buffer, offset + 4);\n  return i64_new(lo, hi);\n}\n\n/** Writes a 64-bit integer to the specified buffer. */\nexport function writeI64(value: I64, buffer: Uint8Array, offset: i32): void {\n  writeI32(i64_low(value), buffer, offset);\n  writeI32(i64_high(value), buffer, offset + 4);\n}\n\n/** Reads a 32-bit float from the specified buffer. */\nexport function readF32(buffer: Uint8Array, offset: i32): f32 {\n  return i32_as_f32(readI32(buffer, offset));\n}\n\n/** Writes a 32-bit float to the specified buffer. */\nexport function writeF32(value: f32, buffer: Uint8Array, offset: i32): void {\n  writeI32(f32_as_i32(value), buffer, offset);\n}\n\n/** Reads a 64-bit float from the specified buffer. */\nexport function readF64(buffer: Uint8Array, offset: i32): f64 {\n  return i64_as_f64(readI64(buffer, offset));\n}\n\n/** Writes a 64-bit float to the specified buffer. */\nexport function writeF64(value: f64, buffer: Uint8Array, offset: i32): void {\n  var valueI64 = f64_as_i64(value);\n  writeI32(i64_low(valueI64), buffer, offset);\n  writeI32(i64_high(valueI64), buffer, offset + 4);\n}\n","/**\n * Low-level C-like compiler API.\n * @module index\n *//***/\n\nimport {\n  Compiler,\n  Options,\n  Target,\n  Feature\n} from \"./compiler\";\n\nimport {\n  Decompiler\n} from \"./decompiler\";\n\nimport {\n  IDLBuilder,\n  TSDBuilder\n} from \"./definitions\";\n\nimport {\n  DiagnosticMessage,\n  DiagnosticCategory,\n  formatDiagnosticMessage\n} from \"./diagnostics\";\n\nimport {\n  Module\n} from \"./module\";\n\nimport {\n  Parser\n} from \"./parser\";\n\nimport {\n  Program\n} from \"./program\";\n\n/** Parses a source file. If `parser` has been omitted a new one is created. */\nexport function parseFile(text: string, path: string, isEntry: bool = false,\n  parser: Parser | null = null\n): Parser {\n  if (!parser) parser = new Parser();\n  parser.parseFile(text, path, isEntry);\n  return parser;\n}\n\n/** Obtains the next required file's path. Returns `null` once complete. */\nexport function nextFile(parser: Parser): string | null {\n  return parser.nextFile();\n}\n\n/** Obtains the next diagnostic message. Returns `null` once complete. */\nexport function nextDiagnostic(parser: Parser): DiagnosticMessage | null {\n  var program = parser.program;\n  return program.diagnosticsOffset < program.diagnostics.length\n    ? program.diagnostics[program.diagnosticsOffset++]\n    : null;\n}\n\n/** Formats a diagnostic message to a string. */\nexport { formatDiagnosticMessage as formatDiagnostic };\n\n/** Tests whether a diagnostic is informatory. */\nexport function isInfo(message: DiagnosticMessage): bool {\n  return message.category == DiagnosticCategory.INFO;\n}\n\n/** Tests whether a diagnostic is a warning. */\nexport function isWarning(message: DiagnosticMessage): bool {\n  return message.category == DiagnosticCategory.WARNING;\n}\n\n/** Tests whether a diagnostic is an error. */\nexport function isError(message: DiagnosticMessage): bool {\n  return message.category == DiagnosticCategory.ERROR;\n}\n\n/** Creates a new set of compiler options. */\nexport function createOptions(): Options {\n  return new Options();\n}\n\n/** Sets the `target` option. */\nexport function setTarget(options: Options, target: Target): void {\n  options.target = target;\n}\n\n/** Sets the `noTreeShaking` option. */\nexport function setNoTreeShaking(options: Options, noTreeShaking: bool): void {\n  options.noTreeShaking = noTreeShaking;\n}\n\n/** Sets the `noAssert` option. */\nexport function setNoAssert(options: Options, noAssert: bool): void {\n  options.noAssert = noAssert;\n}\n\n/** Sets the `importMemory` option. */\nexport function setImportMemory(options: Options, importMemory: bool): void {\n  options.importMemory = importMemory;\n}\n\n/** Sets the `importTable` option. */\nexport function setImportTable(options: Options, importTable: bool): void {\n  options.importTable = importTable;\n}\n\n/** Sets the `sourceMap` option. */\nexport function setSourceMap(options: Options, sourceMap: bool): void {\n  options.sourceMap = sourceMap;\n}\n\n/** Sets the `memoryBase` option. */\nexport function setMemoryBase(options: Options, memoryBase: u32): void {\n  options.memoryBase = memoryBase;\n}\n\n/** Sets a 'globalAliases' value. */\nexport function setGlobalAlias(options: Options, name: string, alias: string): void {\n  var globalAliases = options.globalAliases;\n  if (!globalAliases) options.globalAliases = globalAliases = new Map();\n  globalAliases.set(name, alias);\n}\n\n/** Sign extension operations. */\nexport const FEATURE_SIGN_EXTENSION = Feature.SIGN_EXTENSION;\n/** Mutable global imports and exports. */\nexport const FEATURE_MUTABLE_GLOBAL = Feature.MUTABLE_GLOBAL;\n\n/** Enables a specific feature. */\nexport function enableFeature(options: Options, feature: Feature): void {\n  options.features |= feature;\n}\n\n/** Gives the compiler a hint at the optimize levels that will be used later on. */\nexport function setOptimizeLevelHints(options: Options, optimizeLevel: i32, shrinkLevel: i32): void {\n  options.optimizeLevelHint = optimizeLevel;\n  options.shrinkLevelHint = shrinkLevel;\n}\n\n/** Finishes parsing. */\nexport function finishParsing(parser: Parser): Program {\n  return parser.finish();\n}\n\n/** Compiles the sources computed by the parser to a module. */\nexport function compileProgram(program: Program, options: Options | null = null): Module {\n  return new Compiler(program, options).compile();\n}\n\n/** Decompiles a module to its (low level) source. */\nexport function decompileModule(module: Module): string {\n  var decompiler = new Decompiler();\n  decompiler.decompile(module);\n  return decompiler.finish();\n}\n\n/** Builds WebIDL definitions for the specified program. */\nexport function buildIDL(program: Program): string {\n  return IDLBuilder.build(program);\n}\n\n/** Builds TypeScript definitions for the specified program. */\nexport function buildTSD(program: Program): string {\n  return TSDBuilder.build(program);\n}\n\n/** Prefix indicating a library file. */\nexport { LIBRARY_PREFIX } from \"./common\";\n","/**\n * A decompiler that generates low-level AssemblyScript from WebAssembly binaries.\n * @module decompiler\n *//***/\n\nimport {\n  Module,\n  NativeType,\n  ExpressionId,\n  UnaryOp,\n  BinaryOp,\n  HostOp,\n  FunctionRef,\n  ExpressionRef,\n  Index,\n  getFunctionName,\n  getFunctionBody,\n  getFunctionParamCount,\n  getFunctionParamType,\n  getFunctionResultType,\n  getExpressionId,\n  getExpressionType,\n  getBlockName,\n  getBlockChildCount,\n  getBlockChild,\n  getIfCondition,\n  getIfTrue,\n  getIfFalse,\n  getLoopName,\n  getLoopBody,\n  getBreakName,\n  getBreakCondition,\n  getGetLocalIndex,\n  getSetLocalIndex,\n  getSetLocalValue,\n  getLoadOffset,\n  getLoadPtr,\n  getStoreOffset,\n  getStorePtr,\n  getStoreValue,\n  getConstValueI32,\n  getConstValueI64Low,\n  getConstValueI64High,\n  getConstValueF32,\n  getConstValueF64,\n  getUnaryOp,\n  getUnaryValue,\n  getBinaryOp,\n  getBinaryLeft,\n  getBinaryRight,\n  getSelectThen,\n  getSelectElse,\n  getSelectCondition,\n  getDropValue,\n  getReturnValue,\n  getHostOp,\n  getHostOperand\n} from \"./module\";\n\n// TODO :-)\n\nexport class Decompiler {\n\n  static decompile(module: Module): string {\n    var decompiler = new Decompiler();\n    decompiler.decompile(module);\n    return decompiler.finish();\n  }\n\n  text: string[] = [];\n  functionId: i32 = 0;\n\n  constructor() { }\n\n  /** Decompiles a module to an AST that can then be serialized. */\n  decompile(module: Module): void {\n    throw new Error(\"not implemented\");\n  }\n\n  decompileFunction(func: FunctionRef): void {\n    var name = getFunctionName(func) || \"$\" + this.functionId.toString(10);\n    var body = getFunctionBody(func);\n    this.push(\"function \");\n    this.push(name);\n    this.push(\"(\");\n     for (let i: Index = 0, k: Index = getFunctionParamCount(func); i < k; ++i) {\n      if (i > 0) this.push(\", \");\n      this.push(\"$\");\n      this.push(i.toString(10));\n      this.push(\": \");\n      this.push(nativeTypeToType(getFunctionParamType(func, i)));\n    }\n    this.push(\"): \");\n    this.push(nativeTypeToType(getFunctionResultType(func)));\n    this.push(\" \");\n    if (getExpressionId(body) != ExpressionId.Block) {\n      this.push(\"{\\n\");\n    }\n    this.decompileExpression(body);\n    if (getExpressionId(body) != ExpressionId.Block) {\n      this.push(\"\\n}\\n\");\n    }\n    ++this.functionId;\n  }\n\n  decompileExpression(expr: ExpressionRef): void {\n    var id = getExpressionId(expr);\n    var type = getExpressionType(expr);\n\n    var nested: ExpressionRef;\n    var string: string | null;\n    var i: Index, k: Index;\n\n    switch (id) {\n      case ExpressionId.Block: { // TODO: magic\n        if ((string = getBlockName(expr)) != null) {\n          this.push(string);\n          this.push(\": \");\n        }\n        this.push(\"{\\n\");\n        k = getBlockChildCount(expr);\n        for (i = 0; i < k; ++i) {\n          this.decompileExpression(getBlockChild(expr, i));\n        }\n        this.push(\"}\\n\");\n        return;\n      }\n      case ExpressionId.If: {\n        if (type == NativeType.None) {\n          this.push(\"if (\");\n          this.decompileExpression(getIfCondition(expr));\n          this.push(\") \");\n          this.decompileExpression(getIfTrue(expr));\n          if (nested = getIfFalse(expr)) {\n            this.push(\" else \");\n            this.decompileExpression(nested);\n          }\n        } else {\n          this.decompileExpression(getIfCondition(expr));\n          this.push(\" ? \");\n          this.decompileExpression(getIfTrue(expr));\n          this.push(\" : \");\n          this.decompileExpression(getIfFalse(expr));\n        }\n        return;\n      }\n      case ExpressionId.Loop: {\n        if ((string = getLoopName(expr)) != null) {\n          this.push(string);\n          this.push(\": \");\n        }\n        this.push(\"do \");\n        this.decompileExpression(getLoopBody(expr));\n        this.push(\"while (0);\\n\");\n      }\n      case ExpressionId.Break: {\n        if (nested = getBreakCondition(expr)) {\n          this.push(\"if (\");\n          this.decompileExpression(nested);\n          this.push(\") \");\n        }\n        if ((string = getBreakName(expr)) != null) {\n          this.push(\"break \");\n          this.push(string);\n          this.push(\";\\n\");\n        } else {\n          this.push(\"break;\\n\");\n        }\n        return;\n      }\n      case ExpressionId.Switch:\n      case ExpressionId.Call:\n      case ExpressionId.CallIndirect: {\n        throw new Error(\"not implemented\");\n      }\n      case ExpressionId.GetLocal: {\n        this.push(\"$\");\n        this.push(getGetLocalIndex(expr).toString(10));\n        return;\n      }\n      case ExpressionId.SetLocal: {\n        this.push(\"$\");\n        this.push(getSetLocalIndex(expr).toString(10));\n        this.push(\" = \");\n        this.decompileExpression(getSetLocalValue(expr));\n        return;\n      }\n      case ExpressionId.GetGlobal:\n      case ExpressionId.SetGlobal: {\n        throw new Error(\"not implemented\");\n      }\n      case ExpressionId.Load: {\n        this.push(\"load<\");\n        this.push(nativeTypeToType(type));\n        this.push(\">(\");\n        this.push(getLoadOffset(expr).toString(10));\n        this.push(\" + \");\n        this.decompileExpression(getLoadPtr(expr));\n        this.push(\")\");\n        return;\n      }\n      case ExpressionId.Store: {\n        this.push(\"store<\");\n        this.push(nativeTypeToType(type));\n        this.push(\">(\");\n        this.push(getStoreOffset(expr).toString(10));\n        this.push(\" + \");\n        this.decompileExpression(getStorePtr(expr));\n        this.push(\", \");\n        this.decompileExpression(getStoreValue(expr));\n        this.push(\")\");\n        return;\n      }\n      case ExpressionId.Const: {\n        switch (type) {\n          case NativeType.I32: {\n            this.push(getConstValueI32(expr).toString(10));\n            return;\n          }\n          case NativeType.I64: {\n            this.push(\n              i64_to_string(\n                i64_new(\n                  getConstValueI64Low(expr),\n                  getConstValueI64High(expr)\n                )\n              )\n            );\n            return;\n          }\n          case NativeType.F32: {\n            this.push(getConstValueF32(expr).toString(10));\n            return;\n          }\n          case NativeType.F64: {\n            this.push(getConstValueF64(expr).toString(10));\n            return;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Unary: {\n        switch (getUnaryOp(expr)) {\n          case UnaryOp.ClzI32: {\n            this.push(\"clz<i32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.CtzI32: {\n            this.push(\"ctz<i32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.PopcntI32: {\n            this.push(\"popcnt<i32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.NegF32:\n          case UnaryOp.NegF64: {\n            this.push(\"-\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.AbsF32: {\n            this.push(\"abs<f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.CeilF32: {\n            this.push(\"ceil<f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.FloorF32: {\n            this.push(\"floor<f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.TruncF32: {\n            this.push(\"trunc<f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.NearestF32: {\n            this.push(\"nearest<i32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.SqrtF32: {\n            this.push(\"sqrt<f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.EqzI32:\n          case UnaryOp.EqzI64: {\n            this.push(\"!\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ClzI64: {\n            this.push(\"clz<i64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.CtzI64: {\n            this.push(\"ctz<i64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.PopcntI64: {\n            this.push(\"popcnt<i64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.AbsF64: {\n            this.push(\"abs<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.CeilF64: {\n            this.push(\"ceil<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.FloorF64: {\n            this.push(\"floor<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.TruncF64: {\n            this.push(\"trunc<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.NearestF64: {\n            this.push(\"nearest<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.SqrtF64: {\n            this.push(\"sqrt<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.ExtendI32: {\n            this.push(\"<i64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ExtendU32: {\n            this.push(\"<i64><u64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.WrapI64: {\n            this.push(\"<i32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF32ToI32: {\n            this.push(\"<i32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF32ToI64: {\n            this.push(\"<i64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF32ToU32: {\n            this.push(\"<i32><u32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF32ToU64: {\n            this.push(\"<i64><u64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF64ToI32: {\n            this.push(\"<i32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF64ToI64: {\n            this.push(\"<i64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF64ToU32: {\n            this.push(\"<i32><u32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF64ToU64: {\n            this.push(\"<i64><u64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ReinterpretF32: {\n            this.push(\"reinterpret<f32,i32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.ReinterpretF64: {\n            this.push(\"reinterpret<f64,i64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.ConvertI32ToF32: {\n            this.push(\"<f32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertI32ToF64: {\n            this.push(\"<f64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertU32ToF32: {\n            this.push(\"<f32><u32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertU32ToF64: {\n            this.push(\"<f64><u32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertI64ToF32: {\n            this.push(\"<f32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertI64ToF64: {\n            this.push(\"<f64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertU64ToF32: {\n            this.push(\"<f32><u64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertU64ToF64: {\n            this.push(\"<f64><u64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.PromoteF32: {\n            this.push(\"<f64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.DemoteF64: {\n            this.push(\"<f32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ReinterpretI32: {\n            this.push(\"reinterpret<i32,f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.ReinterpretI64: {\n            this.push(\"reinterpret<i64,f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Binary: { // TODO: precedence\n        switch (getBinaryOp(expr)) {\n          case BinaryOp.AddI32:\n          case BinaryOp.AddI64:\n          case BinaryOp.AddF32:\n          case BinaryOp.AddF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" + \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.SubI32:\n          case BinaryOp.SubI64:\n          case BinaryOp.SubF32:\n          case BinaryOp.SubF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" - \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.MulI32:\n          case BinaryOp.MulI64:\n          case BinaryOp.MulF32:\n          case BinaryOp.MulF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" * \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.DivI32:\n          case BinaryOp.DivI64:\n          case BinaryOp.DivF32:\n          case BinaryOp.DivF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" / \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.DivU32: {\n            this.push(\"<i32>(<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" / <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.RemI32:\n          case BinaryOp.RemI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" % \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.RemU32: {\n            this.push(\"<i32>(<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" / <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.AndI32:\n          case BinaryOp.AndI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" & \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.OrI32:\n          case BinaryOp.OrI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" | \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.XorI32:\n          case BinaryOp.XorI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" ^ \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.ShlI32:\n          case BinaryOp.ShlI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" << \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.ShrU32:\n          case BinaryOp.ShrU64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" >>> \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.ShrI32:\n          case BinaryOp.ShrI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" >> \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.RotlI32: {\n            this.push(\"rotl<i32>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.RotrI32: {\n            this.push(\"rotr<i32>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.EqI32:\n          case BinaryOp.EqI64:\n          case BinaryOp.EqF32:\n          case BinaryOp.EqF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" == \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.NeI32:\n          case BinaryOp.NeI64:\n          case BinaryOp.NeF32:\n          case BinaryOp.NeF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" != \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.LtI32:\n          case BinaryOp.LtI64:\n          case BinaryOp.LtF32:\n          case BinaryOp.LtF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" < \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.LtU32: {\n            this.push(\"<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" < <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.LeI32:\n          case BinaryOp.LeI64:\n          case BinaryOp.LeF32:\n          case BinaryOp.LeF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" <= \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.LeU32: {\n            this.push(\"<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" <= <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GtI32:\n          case BinaryOp.GtI64:\n          case BinaryOp.GtF32:\n          case BinaryOp.GtF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" > \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GtU32: {\n            this.push(\"<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" > <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GeI32:\n          case BinaryOp.GeI64:\n          case BinaryOp.GeF32:\n          case BinaryOp.GeF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" >= \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GeU32: {\n            this.push(\"<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" >= <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.DivU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" / <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.RemU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" % <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.RotlI64: {\n            this.push(\"rotl<i64>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.RotrI64: {\n            this.push(\"rotr<i64>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.LtU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" < <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.LeU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" <= <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GtU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" > <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GeU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" >= <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.CopysignF32: {\n            this.push(\"copysign<f32>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.MinF32: {\n            this.push(\"min<f32>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.MaxF32: {\n            this.push(\"max<f32>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.CopysignF64: {\n            this.push(\"copysign<f64>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.MinF64: {\n            this.push(\"min<f64>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.MaxF64: {\n            this.push(\"max<f64>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n        }\n        return;\n      }\n      case ExpressionId.Select: {\n        this.push(\"select<\");\n        this.push(nativeTypeToType(type));\n        this.push(\">(\");\n        this.decompileExpression(getSelectThen(expr));\n        this.push(\", \");\n        this.decompileExpression(getSelectElse(expr));\n        this.push(\", \");\n        this.decompileExpression(getSelectCondition(expr));\n        this.push(\")\");\n        return;\n      }\n      case ExpressionId.Drop: {\n        this.decompileExpression(getDropValue(expr));\n        this.push(\";\\n\");\n        return;\n      }\n      case ExpressionId.Return: {\n        if (nested = getReturnValue(expr)) {\n          this.push(\"return \");\n          this.decompileExpression(nested);\n          this.push(\";\\n\");\n        } else {\n          this.push(\"return;\\n\");\n        }\n        return;\n      }\n      case ExpressionId.Host: {\n        switch (getHostOp(expr)) {\n          case HostOp.CurrentMemory: {\n            this.push(\"memory.size()\");\n            return;\n          }\n          case HostOp.GrowMemory: {\n            this.push(\"memory.grow(\");\n            this.decompileExpression(getHostOperand(expr, 0));\n            this.push(\")\");\n            return;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Nop: {\n        this.push(\";\\n\");\n        return;\n      }\n      case ExpressionId.Unreachable: {\n        this.push(\"unreachable()\");\n        return;\n      }\n      case ExpressionId.AtomicCmpxchg:\n      case ExpressionId.AtomicRMW:\n      case ExpressionId.AtomicWait:\n      case ExpressionId.AtomicWake:\n    }\n    throw new Error(\"not implemented\");\n  }\n\n  private push(text: string): void {\n    // mostly here so we can add debugging if necessary\n    this.text.push(text);\n  }\n\n  finish(): string {\n    var ret = this.text.join(\"\");\n    this.text = [];\n    return ret;\n  }\n}\n\nfunction nativeTypeToType(type: NativeType): string {\n  switch (type) {\n    case NativeType.None: return \"void\";\n    case NativeType.I32: return \"i32\";\n    case NativeType.I64: return \"i64\";\n    case NativeType.F32: return \"f32\";\n    case NativeType.F64: return \"f64\";\n    case NativeType.Unreachable: throw new Error(\"unreachable type\");\n    case NativeType.Auto: throw new Error(\"auto type\");\n    default: throw new Error(\"unexpected type\");\n  }\n}\n","/**\n * Definition builders for WebIDL and TypeScript.\n * @module definitions\n *//***/\n\nimport {\n  CommonFlags\n} from \"./common\";\n\nimport {\n  Program,\n  Element,\n  ElementKind,\n  Global,\n  Enum,\n  EnumValue,\n  Field,\n  Function,\n  FunctionPrototype,\n  Class,\n  ClassPrototype,\n  Namespace,\n  ConstantValueKind,\n  Interface,\n  Property\n} from \"./program\";\n\nimport {\n  Type,\n  TypeKind\n} from \"./types\";\n\nimport {\n  indent\n} from \"./util\";\n\n/** Walker base class. */\nabstract class ExportsWalker {\n\n  /** Program reference. */\n  program: Program;\n  /** Whether to include private members */\n  includePrivate: bool;\n  /** Elements still to do. */\n  todo: Element[] = [];\n  /** Already seen elements. */\n  seen: Set<Element> = new Set();\n\n  /** Constructs a new Element walker. */\n  constructor(program: Program, includePrivate: bool = false) {\n    this.program = program;\n    this.includePrivate;\n  }\n\n  /** Walks all exports and calls the respective handlers. */\n  walk(): void {\n    for (let moduleExport of this.program.moduleLevelExports.values()) {\n      // FIXME: doesn't honor the actual externally visible name\n      this.visitElement(moduleExport.element);\n    }\n    var todo = this.todo;\n    for (let i = 0; i < todo.length; ) this.visitElement(todo[i]);\n  }\n\n  /** Visits an element.*/\n  visitElement(element: Element): void {\n    if (element.is(CommonFlags.PRIVATE) && !this.includePrivate) return;\n    if (this.seen.has(element)) return;\n    this.seen.add(element);\n    switch (element.kind) {\n      case ElementKind.GLOBAL: {\n        if (element.is(CommonFlags.COMPILED)) this.visitGlobal(<Global>element);\n        break;\n      }\n      case ElementKind.ENUM: {\n        if (element.is(CommonFlags.COMPILED)) this.visitEnum(<Enum>element);\n        break;\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        this.visitFunctionInstances(<FunctionPrototype>element);\n        break;\n      }\n      case ElementKind.CLASS_PROTOTYPE: {\n        this.visitClassInstances(<ClassPrototype>element);\n        break;\n      }\n      case ElementKind.FIELD: {\n        if ((<Field>element).is(CommonFlags.COMPILED)) this.visitField(<Field>element);\n        break;\n      }\n      case ElementKind.PROPERTY: {\n        let prop = <Property>element;\n        let getter = prop.getterPrototype;\n        if (getter) this.visitFunctionInstances(getter);\n        let setter = prop.setterPrototype;\n        if (setter) this.visitFunctionInstances(setter);\n        break;\n      }\n      case ElementKind.NAMESPACE: {\n        if (hasCompiledMember(element)) this.visitNamespace(element);\n        break;\n      }\n      default: assert(false);\n    }\n  }\n\n  private visitFunctionInstances(element: FunctionPrototype): void {\n    for (let instance of element.instances.values()) {\n      if (instance.is(CommonFlags.COMPILED)) this.visitFunction(<Function>instance);\n    }\n  }\n\n  private visitClassInstances(element: ClassPrototype): void {\n    for (let instance of element.instances.values()) {\n      if (instance.is(CommonFlags.COMPILED)) this.visitClass(<Class>instance);\n    }\n  }\n\n  abstract visitGlobal(element: Global): void;\n  abstract visitEnum(element: Enum): void;\n  abstract visitFunction(element: Function): void;\n  abstract visitClass(element: Class): void;\n  abstract visitInterface(element: Interface): void;\n  abstract visitField(element: Field): void;\n  abstract visitNamespace(element: Element): void;\n}\n\n/** A WebIDL definitions builder. */\nexport class IDLBuilder extends ExportsWalker {\n\n  /** Builds WebIDL definitions for the specified program. */\n  static build(program: Program): string {\n    return new IDLBuilder(program).build();\n  }\n\n  private sb: string[] = [];\n  private indentLevel: i32 = 0;\n\n  /** Constructs a new WebIDL builder. */\n  constructor(program: Program, includePrivate: bool = false) {\n    super(program, includePrivate);\n  }\n\n  visitGlobal(element: Global): void {\n    var sb = this.sb;\n    var isConst = element.is(CommonFlags.INLINED);\n    indent(sb, this.indentLevel);\n    if (isConst) sb.push(\"const \");\n    sb.push(this.typeToString(element.type));\n    sb.push(\" \");\n    sb.push(element.simpleName);\n    if (isConst) {\n      switch (element.constantValueKind) {\n        case ConstantValueKind.INTEGER: {\n          sb.push(\" = \");\n          sb.push(i64_to_string(element.constantIntegerValue));\n          break;\n        }\n        case ConstantValueKind.FLOAT: {\n          sb.push(\" = \");\n          sb.push(element.constantFloatValue.toString());\n          break;\n        }\n        default: assert(false);\n      }\n    }\n    sb.push(\";\\n\");\n  }\n\n  visitEnum(element: Enum): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"interface \");\n    sb.push(element.simpleName);\n    sb.push(\" {\\n\");\n    var members = element.members;\n    if (members) {\n      for (let [name, member] of members) {\n        if (member.kind == ElementKind.ENUMVALUE) {\n          let isConst = (<EnumValue>member).is(CommonFlags.INLINED);\n          indent(sb, this.indentLevel);\n          if (isConst) sb.push(\"const \");\n          else sb.push(\"readonly \");\n          sb.push(\"unsigned long \");\n          sb.push(name);\n          if (isConst) {\n            sb.push(\" = \");\n            sb.push((<EnumValue>member).constantValue.toString(10));\n          }\n          sb.push(\";\\n\");\n        }\n      }\n      for (let member of members.values()) {\n        if (member.kind != ElementKind.ENUMVALUE) this.visitElement(member);\n      }\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitFunction(element: Function): void {\n    var sb = this.sb;\n    var signature = element.signature;\n    indent(sb, this.indentLevel);\n    sb.push(this.typeToString(signature.returnType));\n    sb.push(\" \");\n    sb.push(element.simpleName);\n    sb.push(\"(\");\n    var parameters = signature.parameterTypes;\n    var numParameters = parameters.length;\n    // var requiredParameters = signature.requiredParameters;\n    for (let i = 0; i < numParameters; ++i) {\n      if (i) sb.push(\", \");\n      // if (i >= requiredParameters) sb.push(\"optional \");\n      sb.push(this.typeToString(parameters[i]));\n      sb.push(\" \");\n      sb.push(signature.getParameterName(i));\n    }\n    sb.push(\");\\n\");\n    var members = element.members;\n    if (members && members.size) {\n      indent(sb, this.indentLevel);\n      sb.push(\"interface \");\n      sb.push(element.simpleName);\n      sb.push(\" {\\n\");\n      for (let member of members.values()) this.visitElement(member);\n      indent(sb, --this.indentLevel);\n      sb.push(\"}\\n\");\n    }\n  }\n\n  visitClass(element: Class): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"interface \");\n    sb.push(element.simpleName);\n    sb.push(\" {\\n\");\n    // TODO\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitInterface(element: Interface): void {\n    this.visitClass(element);\n  }\n\n  visitField(element: Field): void {\n    // TODO\n  }\n\n  visitNamespace(element: Namespace): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"interface \");\n    sb.push(element.simpleName);\n    sb.push(\" {\\n\");\n    var members = element.members;\n    if (members) {\n      for (let member of members.values()) this.visitElement(member);\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  typeToString(type: Type): string {\n    switch (type.kind) {\n      case TypeKind.I8: return \"byte\";\n      case TypeKind.I16: return \"short\";\n      case TypeKind.I32: return \"long\";\n      case TypeKind.I64: return \"long long\";\n      case TypeKind.ISIZE: return this.program.options.isWasm64 ? \"long long\" : \"long\";\n      case TypeKind.U8: return \"octet\";\n      case TypeKind.U16: return \"unsigned short\";\n      case TypeKind.U32: return \"unsigned long\";\n        // ^ TODO: function types\n      case TypeKind.U64: return \"unsigned long long\";\n      case TypeKind.USIZE: return this.program.options.isWasm64 ? \"unsigned long long\" : \"unsigned long\";\n        // ^ TODO: class types\n      case TypeKind.BOOL: return \"boolean\";\n      case TypeKind.F32: return \"unrestricted float\";\n      case TypeKind.F64: return \"unrestricted double\";\n      case TypeKind.VOID: return \"void\";\n      default: {\n        assert(false);\n        return \"\";\n      }\n    }\n  }\n\n  build(): string {\n    var sb = this.sb;\n    sb.push(\"interface ASModule {\\n\");\n    ++this.indentLevel;\n    this.walk();\n    --this.indentLevel;\n    sb.push(\"}\\n\");\n    return sb.join(\"\");\n  }\n}\n\n/** A TypeScript definitions builder. */\nexport class TSDBuilder extends ExportsWalker {\n\n  /** Builds TypeScript definitions for the specified program. */\n  static build(program: Program): string {\n    return new TSDBuilder(program).build();\n  }\n\n  private sb: string[] = [];\n  private indentLevel: i32 = 0;\n\n  /** Constructs a new WebIDL builder. */\n  constructor(program: Program, includePrivate: bool = false) {\n    super(program, includePrivate);\n  }\n\n  visitGlobal(element: Global): void {\n    var sb = this.sb;\n    var isConst = element.is(CommonFlags.INLINED);\n    indent(sb, this.indentLevel);\n    if (element.is(CommonFlags.STATIC)) {\n      if (isConst) sb.push(\"static readonly \");\n      else sb.push(\"static \");\n    } else {\n      if (isConst) sb.push(\"const \");\n      else sb.push(\"var \");\n    }\n    sb.push(element.simpleName);\n    sb.push(\": \");\n    sb.push(this.typeToString(element.type));\n    sb.push(\";\\n\");\n    this.visitNamespace(element);\n  }\n\n  visitEnum(element: Enum): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"enum \");\n    sb.push(element.simpleName);\n    sb.push(\" {\\n\");\n    var members = element.members;\n    if (members) {\n      let numMembers = members.size;\n      for (let [name, member] of members) {\n        if (member.kind == ElementKind.ENUMVALUE) {\n          indent(sb, this.indentLevel);\n          sb.push(name);\n          if (member.is(CommonFlags.INLINED)) {\n            sb.push(\" = \");\n            sb.push((<EnumValue>member).constantValue.toString(10));\n          }\n          sb.push(\",\\n\");\n          --numMembers;\n        }\n      }\n      if (numMembers) this.visitNamespace(element);\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitFunction(element: Function): void {\n    if (element.isAny(CommonFlags.PRIVATE | CommonFlags.SET)) return;\n    var sb = this.sb;\n    var signature = element.signature;\n    indent(sb, this.indentLevel);\n    if (element.is(CommonFlags.PROTECTED)) sb.push(\"protected \");\n    if (element.is(CommonFlags.STATIC)) sb.push(\"static \");\n    if (element.is(CommonFlags.GET)) {\n      sb.push(element.prototype.declaration.name.text); // 'get:funcName' internally\n      sb.push(\": \");\n      sb.push(this.typeToString(signature.returnType));\n      sb.push(\";\\n\");\n      return;\n    } else {\n      if (!element.isAny(CommonFlags.STATIC | CommonFlags.INSTANCE)) sb.push(\"function \");\n      sb.push(element.simpleName);\n    }\n    sb.push(\"(\");\n    var parameters = signature.parameterTypes;\n    var numParameters = parameters.length;\n    // var requiredParameters = signature.requiredParameters;\n    for (let i = 0; i < numParameters; ++i) {\n      if (i) sb.push(\", \");\n      // if (i >= requiredParameters) sb.push(\"optional \");\n      sb.push(signature.getParameterName(i));\n      sb.push(\": \");\n      sb.push(this.typeToString(parameters[i]));\n    }\n    if (element.isAny(CommonFlags.CONSTRUCTOR | CommonFlags.SET)) {\n      sb.push(\")\");\n    } else {\n      sb.push(\"): \");\n      sb.push(this.typeToString(signature.returnType));\n    }\n    sb.push(\";\\n\");\n    this.visitNamespace(element);\n  }\n\n  visitClass(element: Class): void {\n    var sb = this.sb;\n    var isInterface = element.kind == ElementKind.INTERFACE;\n    indent(sb, this.indentLevel++);\n    if (isInterface) {\n      sb.push(\"interface \");\n    } else {\n      if (element.is(CommonFlags.ABSTRACT)) sb.push(\"abstract \");\n      sb.push(\"class \");\n    }\n    sb.push(element.simpleName);\n    var base = element.base;\n    if (base && base.is(CommonFlags.COMPILED | CommonFlags.MODULE_EXPORT)) {\n      sb.push(\" extends \");\n      sb.push(base.simpleName); // TODO: fqn\n    }\n    sb.push(\" {\\n\");\n    var members = element.prototype.members; // static\n    if (members) {\n      for (let member of members.values()) {\n        this.visitElement(member);\n      }\n    }\n    var ctor = element.constructorInstance;\n    if (ctor) this.visitFunction(ctor);\n    members = element.members; // instance\n    if (members) {\n      for (let member of members.values()) this.visitElement(member);\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitInterface(element: Interface): void {\n    this.visitClass(element);\n  }\n\n  visitField(element: Field): void {\n    if (element.is(CommonFlags.PRIVATE)) return;\n    var sb = this.sb;\n    indent(sb, this.indentLevel);\n    if (element.is(CommonFlags.PROTECTED)) sb.push(\"protected \");\n    if (element.is(CommonFlags.STATIC)) sb.push(\"static \");\n    if (element.is(CommonFlags.READONLY)) sb.push(\"readonly \");\n    sb.push(element.simpleName);\n    sb.push(\": \");\n    sb.push(this.typeToString(element.type));\n    sb.push(\";\\n\");\n  }\n\n  visitNamespace(element: Element): void {\n    var members = element.members;\n    if (members && members.size) {\n      let sb = this.sb;\n      indent(sb, this.indentLevel++);\n      sb.push(\"namespace \");\n      sb.push(element.simpleName);\n      sb.push(\" {\\n\");\n      for (let member of members.values()) this.visitElement(member);\n      indent(sb, --this.indentLevel);\n      sb.push(\"}\\n\");\n    }\n  }\n\n  typeToString(type: Type): string {\n    switch (type.kind) {\n      case TypeKind.I8: return \"i8\";\n      case TypeKind.I16: return \"i16\";\n      case TypeKind.I32: return \"i32\";\n      case TypeKind.I64: return \"I64\";\n      case TypeKind.ISIZE: return this.program.options.isWasm64 ? \"I64\" : \"i32\";\n      case TypeKind.U8: return \"u8\";\n      case TypeKind.U16: return \"u16\";\n      case TypeKind.U32: return \"u32\";\n        // ^ TODO: function types\n      case TypeKind.U64: return \"U64\";\n      case TypeKind.USIZE: return this.program.options.isWasm64 ? \"U64\" : \"u32\";\n        // ^ TODO: class types\n      case TypeKind.BOOL: return \"bool\";\n      case TypeKind.F32: return \"f32\";\n      case TypeKind.F64: return \"f64\";\n      case TypeKind.VOID: return \"void\";\n      default: {\n        assert(false);\n        return \"\";\n      }\n    }\n  }\n\n  build(): string {\n    var sb = this.sb;\n    sb.push(\"declare module ASModule {\\n\");\n    sb.push(\"  type i8 = number;\\n\");\n    sb.push(\"  type i16 = number;\\n\");\n    sb.push(\"  type i32 = number;\\n\");\n    sb.push(\"  type u8 = number;\\n\");\n    sb.push(\"  type u16 = number;\\n\");\n    sb.push(\"  type u32 = number;\\n\");\n    sb.push(\"  type f32 = number;\\n\");\n    sb.push(\"  type f64 = number;\\n\");\n    sb.push(\"  type bool = any;\\n\");\n    ++this.indentLevel;\n    this.walk();\n    --this.indentLevel;\n    sb.push(\"}\\n\");\n    sb.push(\"export default ASModule;\\n\");\n    return this.sb.join(\"\");\n  }\n}\n\n// helpers\n\n/** Tests if a namespace-like element has at least one compiled member. */\nfunction hasCompiledMember(element: Element): bool {\n  var members = element.members;\n  if (members) {\n    for (let member of members.values()) {\n      switch (member.kind) {\n        case ElementKind.FUNCTION_PROTOTYPE: {\n          for (let instance of (<FunctionPrototype>member).instances.values()) {\n            if (instance.is(CommonFlags.COMPILED)) return true;\n          }\n          break;\n        }\n        case ElementKind.CLASS_PROTOTYPE: {\n          for (let instance of (<ClassPrototype>member).instances.values()) {\n            if (instance.is(CommonFlags.COMPILED)) return true;\n          }\n          break;\n        }\n        default: {\n          if (member.is(CommonFlags.COMPILED) || hasCompiledMember(member)) return true;\n          break;\n        }\n      }\n    }\n  }\n  return false;\n}\n","/**\n * A TypeScript parser for the AssemblyScript subset.\n * @module parser\n *//***/\n\nimport {\n  CommonFlags,\n  LIBRARY_PREFIX,\n  PATH_DELIMITER\n} from \"./common\";\n\nimport {\n  Program\n} from \"./program\";\n\nimport {\n  Tokenizer,\n  Token,\n  Range,\n  CommentHandler,\n  IdentifierHandling\n} from \"./tokenizer\";\n\nimport {\n  DiagnosticCode,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  normalizePath\n} from \"./util\";\n\nimport {\n  Node,\n  NodeKind,\n  Source,\n  SourceKind,\n  CommonTypeNode,\n  TypeNode,\n  SignatureNode,\n\n  Expression,\n  AssertionKind,\n  CallExpression,\n  ClassExpression,\n  FunctionExpression,\n  IdentifierExpression,\n  StringLiteralExpression,\n\n  Statement,\n  BlockStatement,\n  BreakStatement,\n  ClassDeclaration,\n  ContinueStatement,\n  DeclarationStatement,\n  DecoratorNode,\n  DoStatement,\n  EnumDeclaration,\n  EnumValueDeclaration,\n  ExportImportStatement,\n  ExportMember,\n  ExportStatement,\n  ExpressionStatement,\n  ForStatement,\n  FunctionDeclaration,\n  IfStatement,\n  ImportDeclaration,\n  ImportStatement,\n  NamespaceDeclaration,\n  ParameterNode,\n  ParameterKind,\n  ReturnStatement,\n  SwitchCase,\n  SwitchStatement,\n  ThrowStatement,\n  TryStatement,\n  TypeDeclaration,\n  TypeParameterNode,\n  VariableStatement,\n  VariableDeclaration,\n  VoidStatement,\n  WhileStatement,\n\n  mangleInternalPath,\n  nodeIsCallable,\n  nodeIsGenericCallable\n} from \"./ast\";\n\n/** Parser interface. */\nexport class Parser extends DiagnosticEmitter {\n\n  /** Program being created. */\n  program: Program;\n  /** Source file names to be requested next. */\n  backlog: string[] = new Array();\n  /** Source file names already seen, that is processed or backlogged. */\n  seenlog: Set<string> = new Set();\n  /** Source file names already completely processed. */\n  donelog: Set<string> = new Set();\n  /** Optional handler to intercept comments while tokenizing. */\n  onComment: CommentHandler | null = null;\n\n  /** Constructs a new parser. */\n  constructor() {\n    super();\n    this.program = new Program(this.diagnostics);\n  }\n\n  /** Parses a file and adds its definitions to the program. */\n  parseFile(\n    text: string,\n    path: string,\n    isEntry: bool\n  ): void {\n    var normalizedPath = normalizePath(path);\n    var internalPath = mangleInternalPath(normalizedPath);\n\n    // check if already processed\n    if (this.donelog.has(internalPath)) return;\n    this.donelog.add(internalPath); // do not parse again\n    this.seenlog.add(internalPath); // do not request again\n\n    // create the source element\n    var source = new Source(\n      normalizedPath,\n      text,\n      isEntry\n        ? SourceKind.ENTRY\n        : path.startsWith(LIBRARY_PREFIX) && path.indexOf(PATH_DELIMITER, LIBRARY_PREFIX.length) < 0\n          ? SourceKind.LIBRARY\n          : SourceKind.DEFAULT\n    );\n    var program = this.program;\n    program.sources.push(source);\n\n    // tokenize and parse\n    var tn = new Tokenizer(source, program.diagnostics);\n    tn.onComment = this.onComment;\n    source.tokenizer = tn;\n    var statements = source.statements;\n    while (!tn.skip(Token.ENDOFFILE)) {\n      let statement = this.parseTopLevelStatement(tn);\n      if (statement) {\n        statement.parent = source;\n        statements.push(statement);\n      }\n    }\n    tn.finish();\n  }\n\n  /** Parses a top-level statement. */\n  parseTopLevelStatement(\n    tn: Tokenizer,\n    namespace: Node | null = null\n  ): Statement | null {\n    var flags = CommonFlags.NONE;\n    var startPos: i32 = -1;\n\n    // check decorators\n    var decorators: DecoratorNode[] | null = null;\n    while (tn.skip(Token.AT)) {\n      if (startPos < 0) startPos = tn.tokenPos;\n      let decorator = this.parseDecorator(tn);\n      if (!decorator) {\n        this.skipStatement(tn);\n        continue;\n      }\n      if (!decorators) decorators = [];\n      decorators.push(decorator);\n    }\n\n    // check modifiers\n    var exportStart: i32 = 0;\n    var exportEnd: i32 = 0;\n    if (tn.skip(Token.EXPORT)) {\n      if (tn.skip(Token.DEFAULT)) {\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          tn.range()\n        );\n      }\n      if (startPos < 0) startPos = tn.tokenPos;\n      flags |= CommonFlags.EXPORT;\n      exportStart = tn.tokenPos;\n      exportEnd = tn.pos;\n    }\n\n    var declareStart: i32 = 0;\n    var declareEnd: i32 = 0;\n    var contextIsAmbient = namespace != null && namespace.is(CommonFlags.AMBIENT);\n    if (tn.skip(Token.DECLARE)) {\n      if (startPos < 0) startPos = tn.tokenPos;\n      if (contextIsAmbient) {\n        this.error(\n          DiagnosticCode.A_declare_modifier_cannot_be_used_in_an_already_ambient_context,\n          tn.range()\n        ); // recoverable\n      }\n      flags |= CommonFlags.DECLARE | CommonFlags.AMBIENT;\n    } else if (contextIsAmbient) {\n      flags |= CommonFlags.AMBIENT;\n    }\n\n    // parse the statement\n    var statement: Statement | null = null;\n\n    // handle declarations\n    var first = tn.peek();\n    if (startPos < 0) startPos = tn.nextTokenPos;\n    switch (first) {\n      case Token.CONST: {\n        tn.next();\n        flags |= CommonFlags.CONST;\n        if (tn.skip(Token.ENUM)) {\n          statement = this.parseEnum(tn, flags, decorators, startPos);\n          break;\n        } else {\n          statement = this.parseVariable(tn, flags, decorators, startPos);\n          decorators = null;\n        }\n        break;\n      }\n      case Token.LET: flags |= CommonFlags.LET;\n      case Token.VAR: {\n        tn.next();\n        statement = this.parseVariable(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.ENUM: {\n        tn.next();\n        statement = this.parseEnum(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.FUNCTION: {\n        tn.next();\n        statement = this.parseFunction(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.ABSTRACT: {\n        let state = tn.mark();\n        tn.next();\n        if (!tn.skip(Token.CLASS)) {\n          tn.reset(state);\n          statement = this.parseStatement(tn, true);\n          break;\n        } else {\n          tn.discard(state);\n        }\n        flags |= CommonFlags.ABSTRACT;\n        // fall through\n      }\n      case Token.CLASS:\n      case Token.INTERFACE: {\n        tn.next();\n        statement = this.parseClassOrInterface(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.NAMESPACE: {\n        let state = tn.mark();\n        tn.next();\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\n          tn.discard(state);\n          statement = this.parseNamespace(tn, flags, decorators, startPos);\n          decorators = null;\n        } else {\n          tn.reset(state);\n          statement = this.parseStatement(tn, true);\n        }\n        break;\n      }\n      case Token.IMPORT: {\n        tn.next();\n        flags |= CommonFlags.IMPORT;\n        if (flags & CommonFlags.EXPORT) {\n          statement = this.parseExportImport(tn, startPos);\n        } else {\n          statement = this.parseImport(tn);\n        }\n        break;\n      }\n      case Token.TYPE: { // also identifier\n        let state = tn.mark();\n        tn.next();\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\n          tn.discard(state);\n          statement = this.parseTypeDeclaration(tn, flags, decorators, startPos);\n          decorators = null;\n        } else {\n          tn.reset(state);\n          statement = this.parseStatement(tn, true);\n        }\n        break;\n      }\n      default: {\n\n        // handle plain exports\n        if (flags & CommonFlags.EXPORT) {\n          statement = this.parseExport(tn, flags, startPos);\n\n        // handle non-declaration statements\n        } else {\n          if (exportEnd) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(exportStart, exportEnd), \"export\"\n            ); // recoverable\n          }\n          if (declareEnd) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(declareStart, declareEnd), \"declare\"\n            ); // recoverable\n          }\n          if (!namespace) {\n            statement = this.parseStatement(tn, true);\n          } // TODO: else?\n        }\n        break;\n      }\n    }\n\n    // check for decorators that weren't consumed\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        this.error(\n          DiagnosticCode.Decorators_are_not_valid_here,\n          decorators[i].range\n        );\n      }\n    }\n    return statement;\n  }\n\n  /** Obtains the next file to parse. */\n  nextFile(): string | null {\n    var backlog = this.backlog;\n    return backlog.length ? backlog.shift() : null;\n  }\n\n  /** Finishes parsing and returns the program. */\n  finish(): Program {\n    if (this.backlog.length) throw new Error(\"backlog is not empty\");\n    this.backlog = [];\n    this.seenlog.clear();\n    this.donelog.clear();\n    return this.program;\n  }\n\n  /** Parses a type. */\n  parseType(\n    tn: Tokenizer,\n    acceptParenthesized: bool = true,\n    suppressErrors: bool = false\n  ): CommonTypeNode | null {\n\n    // NOTE: this parses our limited subset\n    var token = tn.next();\n    var startPos = tn.tokenPos;\n\n    var type: CommonTypeNode;\n\n    // '(' ...\n    if (token == Token.OPENPAREN) {\n\n      // '(' FunctionSignature ')' '|' 'null'?\n      let isNullableSignature = tn.skip(Token.OPENPAREN);\n      // FunctionSignature?\n      let signature = this.tryParseSignature(tn);\n      if (signature) {\n        if (isNullableSignature) {\n          if (!tn.skip(Token.CLOSEPAREN)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \")\"\n            );\n            return null;\n          }\n          if (!tn.skip(Token.BAR)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"|\"\n            );\n            return null;\n          }\n          if (!tn.skip(Token.NULL)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"null\"\n            );\n          }\n          signature.isNullable = true;\n        }\n        return signature;\n      } else if (isNullableSignature || this.tryParseSignatureIsSignature) {\n        this.error(\n          DiagnosticCode.Unexpected_token,\n          tn.range()\n        );\n        return null;\n      }\n\n      // Type (',' Type)* ')'\n      if (acceptParenthesized) {\n        let innerType = this.parseType(tn, false, suppressErrors);\n        if (!innerType) return null;\n        if (!tn.skip(Token.CLOSEPAREN)) {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(tn.pos), \"}\"\n            );\n          }\n          return null;\n        }\n        type = innerType;\n        type.range.start = startPos;\n        type.range.end = tn.pos;\n      } else {\n        this.error(\n          DiagnosticCode.Unexpected_token,\n          tn.range()\n        );\n        return null;\n      }\n\n    // 'void'\n    } else if (token == Token.VOID) {\n      type = Node.createType(\n        Node.createIdentifierExpression(\"void\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // 'this'\n    } else if (token == Token.THIS) {\n      type = Node.createType(\n        Node.createThisExpression(tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // 'true'\n    } else if (token == Token.TRUE || token == Token.FALSE) {\n      type = Node.createType(\n        Node.createIdentifierExpression(\"bool\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // StringLiteral\n    } else if (token == Token.STRINGLITERAL) {\n      tn.readString();\n      type = Node.createType(\n        Node.createIdentifierExpression(\"string\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // Identifier\n    } else if (token == Token.IDENTIFIER) {\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let parameters = new Array<TypeNode>();\n      let nullable = false;\n\n      // Name<T>\n      if (tn.skip(Token.LESSTHAN)) {\n        do {\n          let parameter = this.parseType(tn, true, suppressErrors);\n          if (!parameter) return null;\n          parameters.push(<TypeNode>parameter);\n        } while (tn.skip(Token.COMMA));\n        if (!tn.skip(Token.GREATERTHAN)) {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(tn.pos), \">\"\n            );\n          }\n          return null;\n        }\n      }\n      // ... | null\n      if (tn.skip(Token.BAR)) {\n        if (tn.skip(Token.NULL)) {\n          nullable = true;\n        } else {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(tn.pos), \"null\"\n            );\n          }\n          return null;\n        }\n      }\n      type = Node.createType(identifier, parameters, nullable, tn.range(startPos, tn.pos));\n\n    } else {\n      if (!suppressErrors) {\n        this.error(\n          DiagnosticCode.Identifier_expected,\n          tn.range()\n        );\n      }\n      return null;\n    }\n    // ... [][]\n    while (tn.skip(Token.OPENBRACKET)) {\n      let bracketStart = tn.tokenPos;\n      if (!tn.skip(Token.CLOSEBRACKET)) {\n        if (!suppressErrors) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"]\"\n          );\n        }\n        return null;\n      }\n      let bracketRange = tn.range(bracketStart, tn.pos);\n\n      // ...[] | null\n      let nullable = false;\n      if (tn.skip(Token.BAR)) {\n        if (tn.skip(Token.NULL)) {\n          nullable = true;\n        } else {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"null\"\n            );\n          }\n          return null;\n        }\n      }\n      type = Node.createType(\n        Node.createIdentifierExpression(\"Array\", bracketRange),\n        [ type ],\n        nullable,\n        tn.range(startPos, tn.pos)\n      );\n      if (nullable) break;\n    }\n\n    return type;\n  }\n\n  // Indicates whether tryParseSignature determined that it is handling a Signature\n  private tryParseSignatureIsSignature: bool = false;\n\n  /** Parses a function signature, as used in type declarations. */\n  tryParseSignature(\n    tn: Tokenizer\n  ): SignatureNode | null {\n\n    // at '(': ('...'? Identifier '?'? ':' Type (','  '...'? Identifier '?'? ':' Type)* )? ')' '=>' Type\n\n    var state = tn.mark();\n    var startPos = tn.tokenPos;\n    var parameters: ParameterNode[] | null = null;\n    var thisType: TypeNode | null = null;\n    var isSignature: bool = false;\n\n    if (tn.skip(Token.CLOSEPAREN)) {\n      isSignature = true;\n      tn.discard(state);\n      parameters = [];\n\n    } else {\n      isSignature = false; // not yet known\n      do {\n        let kind = ParameterKind.DEFAULT;\n        if (tn.skip(Token.DOT_DOT_DOT)) {\n          isSignature = true;\n          tn.discard(state);\n          kind = ParameterKind.REST;\n        }\n        if (tn.skip(Token.THIS)) {\n          if (tn.skip(Token.COLON)) {\n            isSignature = true;\n            tn.discard(state);\n            let t = this.parseType(tn, false);\n            if (!t) return null;\n            if (t.kind != NodeKind.TYPE) {\n              this.error(\n                DiagnosticCode.Operation_not_supported,\n                t.range\n              );\n              this.tryParseSignatureIsSignature = true;\n              return null;\n            }\n            thisType = <TypeNode>t;\n          } else {\n            tn.reset(state);\n            this.tryParseSignatureIsSignature = false;\n            return null;\n          }\n        } else if (tn.skipIdentifier()) {\n          let name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range(tn.tokenPos, tn.pos));\n          if (tn.skip(Token.QUESTION)) {\n            isSignature = true;\n            tn.discard(state);\n            if (kind == ParameterKind.REST) {\n              this.error(\n                DiagnosticCode.A_rest_parameter_cannot_be_optional,\n                tn.range()\n              ); // recoverable\n            } else {\n              kind = ParameterKind.OPTIONAL;\n            }\n          }\n          if (tn.skip(Token.COLON)) {\n            isSignature = true;\n            tn.discard(state);\n            let type = this.parseType(tn); // not suppressing errors because known\n            if (!type) {\n              this.tryParseSignatureIsSignature = isSignature;\n              return null;\n            }\n            let param = new ParameterNode();\n            param.parameterKind = kind;\n            param.name = name;\n            param.type = type;\n            if (!parameters) parameters = [ param ];\n            else parameters.push(param);\n          } else {\n            if (isSignature) {\n              this.error(\n                DiagnosticCode.Type_expected,\n                tn.range()\n              ); // recoverable\n            }\n          }\n        } else {\n          if (isSignature) {\n            this.error(\n              DiagnosticCode.Identifier_expected,\n              tn.range()\n            );\n          } else {\n            tn.reset(state);\n          }\n          this.tryParseSignatureIsSignature = isSignature;\n          return null;\n        }\n      } while (tn.skip(Token.COMMA));\n      if (!tn.skip(Token.CLOSEPAREN)) {\n        if (isSignature) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n        } else {\n          tn.reset(state);\n        }\n        this.tryParseSignatureIsSignature = isSignature;\n        return null;\n      }\n    }\n\n    var returnType: CommonTypeNode | null;\n    if (tn.skip(Token.EQUALS_GREATERTHAN)) {\n      isSignature = true;\n      tn.discard(state);\n      returnType = this.parseType(tn);\n      if (!returnType) {\n        this.tryParseSignatureIsSignature = isSignature;\n        return null;\n      }\n    } else {\n      if (isSignature) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"=>\"\n        );\n      } else {\n        tn.reset(state);\n      }\n      this.tryParseSignatureIsSignature = isSignature;\n      return null;\n    }\n    this.tryParseSignatureIsSignature = true;\n    return Node.createSignature(\n      parameters || [],\n      returnType,\n      thisType,\n      false,\n      tn.range(startPos, tn.pos)\n    );\n  }\n\n  // statements\n\n  parseDecorator(\n    tn: Tokenizer\n  ): DecoratorNode | null {\n\n    // at '@': Identifier ('.' Identifier)* '(' Arguments\n\n    var startPos = tn.tokenPos;\n    if (tn.skipIdentifier()) {\n      let name = tn.readIdentifier();\n      let expression: Expression = Node.createIdentifierExpression(name, tn.range(startPos, tn.pos));\n      while (tn.skip(Token.DOT)) {\n        if (tn.skipIdentifier()) {\n          name = tn.readIdentifier();\n          expression = Node.createPropertyAccessExpression(\n            expression,\n            Node.createIdentifierExpression(name, tn.range()),\n            tn.range(startPos, tn.pos)\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      let args: Expression[] | null;\n      if (tn.skip(Token.OPENPAREN)) {\n        args = this.parseArguments(tn);\n        if (args) {\n          return Node.createDecorator(expression, args, tn.range(startPos, tn.pos));\n        }\n      } else {\n        return Node.createDecorator(expression, null, tn.range(startPos, tn.pos));\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseVariable(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): VariableStatement | null {\n\n    // at ('const' | 'let' | 'var'): VariableDeclaration (',' VariableDeclaration)* ';'?\n\n    var members = new Array<VariableDeclaration>();\n    do {\n      let member = this.parseVariableDeclaration(tn, flags, decorators);\n      if (!member) return null;\n      members.push(<VariableDeclaration>member);\n    } while (tn.skip(Token.COMMA));\n\n    var ret = Node.createVariableStatement(members, decorators, flags, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseVariableDeclaration(\n    tn: Tokenizer,\n    parentFlags: CommonFlags,\n    parentDecorators: DecoratorNode[] | null\n  ): VariableDeclaration | null {\n\n    // before: Identifier (':' Type)? ('=' Expression)?\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    var flags = parentFlags;\n\n    var type: CommonTypeNode | null = null;\n    if (tn.skip(Token.COLON)) {\n      type = this.parseType(tn);\n    }\n\n    var initializer: Expression | null = null;\n    if (tn.skip(Token.EQUALS)) {\n      if (flags & CommonFlags.AMBIENT) {\n        this.error(\n          DiagnosticCode.Initializers_are_not_allowed_in_ambient_contexts,\n          tn.range()\n        ); // recoverable\n      }\n      initializer = this.parseExpression(tn, Precedence.COMMA + 1);\n      if (!initializer) return null;\n    } else {\n      if (flags & CommonFlags.CONST) {\n        if (!(flags & CommonFlags.AMBIENT)) {\n          this.error(\n            DiagnosticCode._const_declarations_must_be_initialized,\n            identifier.range\n          ); // recoverable\n        }\n      } else if (!type) { // neither type nor initializer\n        this.error(\n          DiagnosticCode.Type_expected,\n          tn.range(tn.pos)\n        ); // recoverable\n      }\n    }\n    return Node.createVariableDeclaration(\n      identifier,\n      type,\n      initializer,\n      parentDecorators,\n      flags,\n      Range.join(identifier.range, tn.range())\n    );\n  }\n\n  parseEnum(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): EnumDeclaration | null {\n\n    // at 'enum': Identifier '{' (EnumValueDeclaration (',' EnumValueDeclaration )*)? '}' ';'?\n\n    if (tn.next() != Token.IDENTIFIER) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    if (tn.next() != Token.OPENBRACE) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n      return null;\n    }\n    var members = new Array<EnumValueDeclaration>();\n    while (!tn.skip(Token.CLOSEBRACE)) {\n      let member = this.parseEnumValue(tn, CommonFlags.NONE);\n      if (!member) return null;\n      members.push(<EnumValueDeclaration>member);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEBRACE)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"}\"\n          );\n          return null;\n        }\n      }\n    }\n    var ret = Node.createEnumDeclaration(\n      identifier,\n      members,\n      decorators,\n      flags,\n      tn.range(startPos, tn.pos)\n    );\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseEnumValue(\n    tn: Tokenizer,\n    parentFlags: CommonFlags\n  ): EnumValueDeclaration | null {\n\n    // before: Identifier ('=' Expression)?\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    var value: Expression | null = null;\n    if (tn.skip(Token.EQUALS)) {\n      value = this.parseExpression(tn, Precedence.COMMA + 1);\n      if (!value) return null;\n    }\n    return Node.createEnumValueDeclaration(\n      identifier,\n      value,\n      parentFlags,\n      Range.join(identifier.range, tn.range())\n    );\n  }\n\n  parseReturn(\n    tn: Tokenizer\n  ): ReturnStatement | null {\n\n    // at 'return': Expression | (';' | '}' | ...'\\n')\n\n    var expr: Expression | null = null;\n    if (\n      tn.peek(true) != Token.SEMICOLON &&\n      tn.nextToken != Token.CLOSEBRACE &&\n      !tn.nextTokenOnNewLine\n    ) {\n      if (!(expr = this.parseExpression(tn))) return null;\n    }\n\n    var ret = Node.createReturnStatement(expr, tn.range());\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseTypeParameters(\n    tn: Tokenizer\n  ): TypeParameterNode[] | null {\n\n    // at '<': TypeParameter (',' TypeParameter)* '>'\n\n    var typeParameters = new Array<TypeParameterNode>();\n    while (!tn.skip(Token.GREATERTHAN)) {\n      let typeParameter = this.parseTypeParameter(tn);\n      if (!typeParameter) return null;\n      typeParameters.push(<TypeParameterNode>typeParameter);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.GREATERTHAN)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \">\"\n          );\n          return null;\n        }\n      }\n    }\n    if (typeParameters.length === 0) {\n      this.error(\n        DiagnosticCode.Type_parameter_list_cannot_be_empty,\n        tn.range()\n      ); // recoverable\n    }\n    return typeParameters;\n  }\n\n  parseTypeParameter(\n    tn: Tokenizer\n  ): TypeParameterNode | null {\n\n    // before: Identifier ('extends' Type)?\n\n    if (tn.next() == Token.IDENTIFIER) {\n      let identifier = Node.createIdentifierExpression(\n        tn.readIdentifier(),\n        tn.range()\n      );\n      let extendsType: TypeNode | null = null;\n      if (tn.skip(Token.EXTENDS)) {\n        let t = this.parseType(tn);\n        if (!t) return null;\n        if (t.kind != NodeKind.TYPE) {\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            t.range\n          );\n          return null;\n        }\n        extendsType = <TypeNode>t;\n      }\n      return Node.createTypeParameter(\n        identifier,\n        extendsType,\n        Range.join(identifier.range, tn.range())\n      );\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  private parseParametersThis: TypeNode | null = null;\n\n  parseParameters(\n    tn: Tokenizer,\n    isConstructor: bool = false\n  ): ParameterNode[] | null {\n\n    // at '(': (Parameter (',' Parameter)*)? ')'\n\n    var parameters = new Array<ParameterNode>();\n    var seenRest: ParameterNode | null = null;\n    var seenOptional = false;\n    var reportedRest = false;\n    var thisType: CommonTypeNode | null = null;\n\n    // check if there is a leading `this` parameter\n    this.parseParametersThis = null;\n    if (tn.skip(Token.THIS)) {\n      if (tn.skip(Token.COLON)) {\n        thisType = this.parseType(tn); // reports\n        if (!thisType) return null;\n        if (thisType.kind == NodeKind.TYPE) {\n          this.parseParametersThis = <TypeNode>thisType;\n        } else {\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            thisType.range\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \":\"\n        );\n        return null;\n      }\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEPAREN)) {\n          return parameters;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n      }\n    }\n\n    while (!tn.skip(Token.CLOSEPAREN)) {\n      let param = this.parseParameter(tn, isConstructor); // reports\n      if (!param) return null;\n      if (seenRest && !reportedRest) {\n        this.error(\n          DiagnosticCode.A_rest_parameter_must_be_last_in_a_parameter_list,\n          seenRest.name.range\n        );\n        reportedRest = true;\n      }\n      switch (param.parameterKind) {\n        default: {\n          if (seenOptional) {\n            this.error(\n              DiagnosticCode.A_required_parameter_cannot_follow_an_optional_parameter,\n              param.name.range\n            );\n          }\n          break;\n        }\n        case ParameterKind.OPTIONAL: {\n          seenOptional = true;\n          break;\n        }\n        case ParameterKind.REST: {\n          seenRest = param;\n          break;\n        }\n      }\n      parameters.push(param);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEPAREN)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n      }\n    }\n    return parameters;\n  }\n\n  parseParameter(\n    tn: Tokenizer,\n    isConstructor: bool = false\n  ): ParameterNode | null {\n\n    // before: ('public' | 'private' | 'protected' | '...')? Identifier '?'? (':' Type)? ('=' Expression)?\n\n    var isRest = false;\n    var isOptional = false;\n    var startRange: Range | null = null;\n    var accessFlags: CommonFlags = CommonFlags.NONE;\n    if (isConstructor) {\n      if (tn.skip(Token.PUBLIC)) {\n        startRange = tn.range();\n        accessFlags |= CommonFlags.PUBLIC;\n      } else if (tn.skip(Token.PROTECTED)) {\n        startRange = tn.range();\n        accessFlags |= CommonFlags.PROTECTED;\n      } else if (tn.skip(Token.PRIVATE)) {\n        startRange = tn.range();\n        accessFlags |= CommonFlags.PRIVATE;\n      }\n      if (tn.peek() == Token.READONLY) {\n        let state = tn.mark();\n        tn.next();\n        if (tn.peek() != Token.COLON) { // modifier\n          tn.discard(state);\n          if (!startRange) startRange = tn.range();\n          accessFlags |= CommonFlags.READONLY;\n        } else { // identifier\n          tn.reset(state);\n        }\n      }\n    }\n    if (tn.skip(Token.DOT_DOT_DOT)) {\n      if (accessFlags) {\n        this.error(\n          DiagnosticCode.A_parameter_property_cannot_be_declared_using_a_rest_parameter,\n          tn.range()\n        );\n      } else {\n        startRange = tn.range();\n      }\n      isRest = true;\n    }\n    if (tn.skipIdentifier()) {\n      if (!isRest) startRange = tn.range();\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let type: CommonTypeNode | null = null;\n      if (isOptional = tn.skip(Token.QUESTION)) {\n        if (isRest) {\n          this.error(\n            DiagnosticCode.A_rest_parameter_cannot_be_optional,\n            identifier.range\n          );\n        }\n      }\n      if (tn.skip(Token.COLON)) {\n        type = this.parseType(tn);\n        if (!type) return null;\n      } else {\n        type = Node.createOmittedType(tn.range(tn.pos));\n      }\n      let initializer: Expression | null = null;\n      if (tn.skip(Token.EQUALS)) {\n        if (isRest) {\n          this.error(\n            DiagnosticCode.A_rest_parameter_cannot_have_an_initializer,\n            identifier.range\n          );\n        }\n        if (isOptional) {\n          this.error(\n            DiagnosticCode.Parameter_cannot_have_question_mark_and_initializer,\n            identifier.range\n          );\n        } else {\n          isOptional = true;\n        }\n        initializer = this.parseExpression(tn, Precedence.COMMA + 1);\n        if (!initializer) return null;\n      }\n      let param = Node.createParameter(\n        identifier,\n        type,\n        initializer,\n        isRest\n          ? ParameterKind.REST\n          : isOptional\n            ? ParameterKind.OPTIONAL\n            : ParameterKind.DEFAULT,\n        Range.join(<Range>startRange, tn.range())\n      );\n      param.flags |= accessFlags;\n      return param;\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseFunction(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): FunctionDeclaration | null {\n\n    // at 'function':\n    //  Identifier\n    //  ('<' TypeParameters)?\n    //  '(' Parameters (':' Type)?\n    //  '{' Statement* '}'\n    //  ';'?\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range(tn.pos)\n      );\n      return null;\n    }\n\n    var name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    var signatureStart: i32 = -1;\n\n    var typeParameters: TypeParameterNode[] | null = null;\n    if (tn.skip(Token.LESSTHAN)) {\n      signatureStart = tn.tokenPos;\n      typeParameters = this.parseTypeParameters(tn);\n      if (!typeParameters) return null;\n      flags |= CommonFlags.GENERIC;\n    }\n\n    if (!tn.skip(Token.OPENPAREN)) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(tn.pos), \"(\"\n      );\n      return null;\n    }\n\n    if (signatureStart < 0) {\n      signatureStart = tn.tokenPos;\n    }\n\n    var parameters = this.parseParameters(tn);\n    if (!parameters) return null;\n    var thisType = this.parseParametersThis;\n\n    var isSetter = (flags & CommonFlags.SET) != 0;\n    if (isSetter) {\n      if (parameters.length != 1) {\n        this.error(\n          DiagnosticCode.A_set_accessor_must_have_exactly_one_parameter,\n          name.range\n        ); // recoverable\n      }\n      if (parameters.length && parameters[0].initializer) {\n        this.error(\n          DiagnosticCode.A_set_accessor_parameter_cannot_have_an_initializer,\n          name.range\n        ); // recoverable\n      }\n    }\n\n    if (flags & CommonFlags.GET) {\n      if (parameters.length) {\n        this.error(\n          DiagnosticCode.A_get_accessor_cannot_have_parameters,\n          name.range\n        ); // recoverable\n      }\n    }\n\n    var returnType: CommonTypeNode | null = null;\n    if (tn.skip(Token.COLON)) {\n      returnType = this.parseType(tn, true, isSetter);\n      if (!returnType) return null;\n    }\n\n    if (!returnType) {\n      returnType = Node.createOmittedType(\n        tn.range(tn.pos)\n      );\n      if (!isSetter) {\n        this.error(\n          DiagnosticCode.Type_expected,\n          returnType.range\n        ); // recoverable\n      }\n    }\n\n    var signature = Node.createSignature(\n      parameters,\n      returnType,\n      thisType,\n      false,\n      tn.range(signatureStart, tn.pos)\n    );\n\n    var body: Statement | null = null;\n    if (tn.skip(Token.OPENBRACE)) {\n      if (flags & CommonFlags.AMBIENT) {\n        this.error(\n          DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\n          tn.range()\n        ); // recoverable\n      }\n\n      body = this.parseBlockStatement(tn, false);\n      if (!body) return null;\n    } else if (!(flags & CommonFlags.AMBIENT)) {\n      this.error(\n        DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n        tn.range(tn.pos)\n      );\n    }\n\n    var ret = Node.createFunctionDeclaration(\n      name,\n      typeParameters,\n      signature,\n      body,\n      decorators,\n      flags,\n      tn.range(startPos, tn.pos)\n    );\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseFunctionExpression(tn: Tokenizer): FunctionExpression | null {\n    var startPos = tn.tokenPos;\n    var name: IdentifierExpression;\n    var isArrow = false;\n\n    // either at 'function':\n    //  Identifier?\n    //  '(' Parameters (':' Type)?\n    //  Statement\n\n    if (tn.token == Token.FUNCTION) {\n      if (tn.skipIdentifier()) {\n        name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      } else { // empty name\n        name = Node.createEmptyIdentifierExpression(tn.range(tn.pos));\n      }\n      if (!tn.skip(Token.OPENPAREN)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(tn.pos), \"(\"\n        );\n        return null;\n      }\n\n    // or at '(' of arrow function:\n    //  Parameters (':' Type)?\n    //  Statement\n\n    } else {\n      isArrow = true;\n      assert(tn.token == Token.OPENPAREN);\n      name = Node.createEmptyIdentifierExpression(tn.range(tn.tokenPos));\n    }\n\n    // TODO: type parameters? doesn't seem worth it.\n\n    var signatureStart = tn.pos;\n    var parameters = this.parseParameters(tn);\n    if (!parameters) return null;\n\n    return this.parseFunctionExpressionCommon(tn, name, parameters, isArrow, startPos, signatureStart);\n  }\n\n  private parseFunctionExpressionCommon(\n    tn: Tokenizer,\n    name: IdentifierExpression,\n    parameters: ParameterNode[],\n    isArrow: bool,\n    startPos: i32 = -1,\n    signatureStart: i32 = -1\n  ): FunctionExpression | null {\n    if (startPos < 0) startPos = name.range.start;\n    if (signatureStart < 0) signatureStart = startPos;\n\n    var returnType: CommonTypeNode | null = null;\n    if (tn.skip(Token.COLON)) {\n      returnType = this.parseType(tn);\n      if (!returnType) return null;\n    } else {\n      returnType = Node.createOmittedType(tn.range(tn.pos));\n      this.error(\n        DiagnosticCode.Type_expected,\n        returnType.range\n      ); // recoverable\n    }\n\n    if (isArrow) {\n      if (!tn.skip(Token.EQUALS_GREATERTHAN)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(tn.pos), \"=>\"\n        );\n        return null;\n      }\n    }\n\n    var signature = Node.createSignature(\n      parameters,\n      returnType,\n      null, // TODO?\n      false,\n      tn.range(signatureStart, tn.pos)\n    );\n\n    var body: Statement | null;\n    if (isArrow) {\n      body = this.parseStatement(tn, false);\n    } else {\n      if (!tn.skip(Token.OPENBRACE)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(tn.pos), \"{\"\n        );\n        return null;\n      }\n      body = this.parseBlockStatement(tn, false);\n    }\n    if (!body) return null;\n\n    var declaration = Node.createFunctionDeclaration(\n      name,\n      null,\n      signature,\n      body,\n      null,\n      isArrow ? CommonFlags.ARROW : CommonFlags.NONE,\n      tn.range(startPos, tn.pos)\n    );\n    return Node.createFunctionExpression(declaration);\n  }\n\n  parseClassOrInterface(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): ClassDeclaration | null {\n\n    // at ('class' | 'interface'):\n    //   Identifier\n    //   ('<' TypeParameters)?\n    //   ('extends' Type)?\n    //   ('implements' Type (',' Type)*)?\n    //   '{' ClassMember* '}'\n\n    var isInterface = tn.token == Token.INTERFACE;\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n\n    var identifier = Node.createIdentifierExpression(\n      tn.readIdentifier(),\n      tn.range()\n    );\n\n    var typeParameters: TypeParameterNode[] | null;\n    if (tn.skip(Token.LESSTHAN)) {\n      typeParameters = this.parseTypeParameters(tn);\n      if (!typeParameters) return null;\n      flags |= CommonFlags.GENERIC;\n    } else {\n      typeParameters = [];\n    }\n\n    var extendsType: TypeNode | null = null;\n    if (tn.skip(Token.EXTENDS)) {\n      let t = this.parseType(tn);\n      if (!t) return null;\n      if (t.kind != NodeKind.TYPE) {\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          t.range\n        );\n        return null;\n      }\n      extendsType = <TypeNode>t;\n    }\n\n    var implementsTypes: TypeNode[] | null = null;\n    if (tn.skip(Token.IMPLEMENTS)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode.Interface_declaration_cannot_have_implements_clause,\n          tn.range()\n        ); // recoverable\n      }\n      do {\n        let type = this.parseType(tn);\n        if (!type) return null;\n        if (!isInterface) {\n          if (!implementsTypes) implementsTypes = [];\n          implementsTypes.push(<TypeNode>type);\n        }\n      } while (tn.skip(Token.COMMA));\n    }\n\n    if (!tn.skip(Token.OPENBRACE)) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n      return null;\n    }\n\n    var members = new Array<DeclarationStatement>();\n    var declaration: ClassDeclaration;\n    if (isInterface) {\n      assert(!implementsTypes);\n      declaration = Node.createInterfaceDeclaration(\n        identifier,\n        typeParameters,\n        extendsType,\n        members,\n        decorators,\n        flags,\n        tn.range(startPos, tn.pos)\n      );\n    } else {\n      declaration = Node.createClassDeclaration(\n        identifier,\n        typeParameters,\n        extendsType,\n        implementsTypes,\n        members,\n        decorators,\n        flags,\n        tn.range(startPos, tn.pos)\n      );\n    }\n    if (!tn.skip(Token.CLOSEBRACE)) {\n      do {\n        let member = this.parseClassMember(tn, declaration);\n        if (!member) return null;\n        member.parent = declaration;\n        members.push(<DeclarationStatement>member);\n      } while (!tn.skip(Token.CLOSEBRACE));\n    }\n    return declaration;\n  }\n\n  parseClassExpression(tn: Tokenizer): ClassExpression | null {\n\n    // at 'class': Identifier? '{' ... '}'\n\n    var startPos = tn.tokenPos;\n    var name: IdentifierExpression;\n\n    if (tn.skipIdentifier()) {\n      name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    } else {\n      name = Node.createEmptyIdentifierExpression(tn.range(tn.pos));\n    }\n\n    if (!tn.skip(Token.OPENBRACE)) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(tn.pos), \"{\"\n      );\n      return null;\n    }\n\n    var members = new Array<DeclarationStatement>();\n    var declaration = Node.createClassDeclaration(\n      name,\n      [],\n      null,\n      null,\n      members,\n      null,\n      CommonFlags.NONE,\n      tn.range(startPos, tn.pos)\n    );\n    if (!tn.skip(Token.CLOSEBRACE)) {\n      do {\n        let member = this.parseClassMember(tn, declaration);\n        if (!member) return null;\n        member.parent = declaration;\n        members.push(<DeclarationStatement>member);\n      } while (!tn.skip(Token.CLOSEBRACE));\n    }\n    return Node.createClassExpression(declaration);\n  }\n\n  parseClassMember(\n    tn: Tokenizer,\n    parent: ClassDeclaration\n  ): DeclarationStatement | null {\n\n    // before:\n    //   ('public' | 'private' | 'protected')?\n    //   ('static' | 'abstract')?\n    //   'readonly'?\n    //   ('get' | 'set')?\n    //   Identifier ...\n\n    var startPos = tn.pos;\n    var isInterface = parent.kind == NodeKind.INTERFACEDECLARATION;\n\n    var decorators = new Array<DecoratorNode>();\n    while (tn.skip(Token.AT)) {\n      let decorator = this.parseDecorator(tn);\n      if (!decorator) break;\n      if (isInterface) {\n        this.error(\n          DiagnosticCode.Decorators_are_not_valid_here,\n          decorator.range\n        );\n      }\n      decorators.push(<DecoratorNode>decorator);\n    }\n\n    // inherit ambient status\n    var flags = parent.flags & CommonFlags.AMBIENT;\n\n    // implemented methods are virtual\n    if (isInterface) flags |= CommonFlags.VIRTUAL;\n\n    if (tn.skip(Token.PUBLIC)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(), \"public\"\n        );\n      }\n      flags |= CommonFlags.PUBLIC;\n    } else if (tn.skip(Token.PRIVATE)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(), \"private\"\n        );\n      }\n      flags |= CommonFlags.PRIVATE;\n    } else if (tn.skip(Token.PROTECTED)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(), \"protected\"\n        );\n      }\n      flags |= CommonFlags.PROTECTED;\n    }\n\n    var staticStart: i32 = 0;\n    var staticEnd: i32 = 0;\n    var abstractStart: i32 = 0;\n    var abstractEnd: i32 = 0;\n    if (tn.skip(Token.STATIC)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(), \"static\"\n        );\n      }\n      flags |= CommonFlags.STATIC;\n      staticStart = tn.tokenPos;\n      staticEnd = tn.pos;\n    } else {\n      flags |= CommonFlags.INSTANCE;\n      if (tn.skip(Token.ABSTRACT)) {\n        if (isInterface) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(), \"abstract\"\n          );\n        }\n        flags |= CommonFlags.ABSTRACT;\n        abstractStart = tn.tokenPos;\n        abstractEnd = tn.pos;\n      }\n      if (parent.flags & CommonFlags.GENERIC) {\n        flags |= CommonFlags.GENERIC_CONTEXT;\n      }\n    }\n\n    var readonlyStart: i32 = 0;\n    var readonlyEnd: i32 = 0;\n    if (tn.skip(Token.READONLY)) {\n      flags |= CommonFlags.READONLY;\n      readonlyStart = tn.tokenPos;\n      readonlyEnd = tn.pos;\n    }\n\n    // check if accessor: ('get' | 'set') ^\\n Identifier\n    var state = tn.mark();\n    var isConstructor = false;\n    var isGetter = false;\n    var getStart: i32 = 0;\n    var getEnd: i32 = 0;\n    var isSetter = false;\n    var setStart: i32 = 0;\n    var setEnd: i32 = 0;\n    if (!isInterface) {\n      if (tn.skip(Token.GET)) {\n        if (tn.peek(true, IdentifierHandling.PREFER) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n          flags |= CommonFlags.GET;\n          isGetter = true;\n          setStart = tn.tokenPos;\n          setEnd = tn.pos;\n          if (flags & CommonFlags.READONLY) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(readonlyStart, readonlyEnd), \"readonly\"\n            ); // recoverable\n          }\n        } else {\n          tn.reset(state);\n        }\n      } else if (tn.skip(Token.SET)) {\n        if (tn.peek(true, IdentifierHandling.PREFER) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n          flags |= CommonFlags.SET | CommonFlags.SET;\n          isSetter = true;\n          setStart = tn.tokenPos;\n          setEnd = tn.pos;\n          if (flags & CommonFlags.READONLY) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(readonlyStart, readonlyEnd), \"readonly\"\n            ); // recoverable\n          }\n        } else {\n          tn.reset(state);\n        }\n      } else if (tn.skip(Token.CONSTRUCTOR)) {\n        flags |= CommonFlags.CONSTRUCTOR;\n        isConstructor = true;\n        if (flags & CommonFlags.STATIC) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(staticStart, staticEnd), \"static\"\n          ); // recoverable\n        }\n        if (flags & CommonFlags.ABSTRACT) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(abstractStart, abstractEnd), \"abstract\"\n          ); // recoverable\n        }\n        if (flags & CommonFlags.READONLY) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(readonlyStart, readonlyEnd), \"readonly\"\n          ); // recoverable\n        }\n      }\n    }\n\n    if (!isConstructor && !tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n\n    var name = isConstructor\n      ? Node.createConstructorExpression(tn.range())\n      : Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    var typeParameters: TypeParameterNode[] | null = null;\n    if (tn.skip(Token.LESSTHAN)) {\n      let typeParametersStart = tn.tokenPos;\n      typeParameters = this.parseTypeParameters(tn);\n      if (!typeParameters) return null;\n      if (isConstructor) {\n        this.error(\n          DiagnosticCode.Type_parameters_cannot_appear_on_a_constructor_declaration,\n          tn.range(typeParametersStart, tn.pos)\n        ); // recoverable\n      } else if (isGetter || isSetter) {\n        this.error(\n          DiagnosticCode.An_accessor_cannot_have_type_parameters,\n          tn.range(typeParametersStart, tn.pos)\n        ); // recoverable\n      } else {\n        flags |= CommonFlags.GENERIC;\n      }\n    }\n\n    // method: '(' Parameters (':' Type)? '{' Statement* '}' ';'?\n    if (tn.skip(Token.OPENPAREN)) {\n      let signatureStart = tn.tokenPos;\n      let parameters = this.parseParameters(tn, isConstructor);\n      if (!parameters) return null;\n      let thisType = this.parseParametersThis;\n      if (isConstructor) {\n        for (let i = 0, k = parameters.length; i < k; ++i) {\n          let parameter = parameters[i];\n          if (parameter.isAny(\n            CommonFlags.PUBLIC |\n            CommonFlags.PROTECTED |\n            CommonFlags.PRIVATE |\n            CommonFlags.READONLY\n          )) {\n            let implicitFieldDeclaration = Node.createFieldDeclaration(\n              parameter.name,\n              parameter.type,\n              null, // initialized via parameter\n              null,\n              parameter.flags | CommonFlags.INSTANCE,\n              parameter.range\n            );\n            implicitFieldDeclaration.parameterIndex = i;\n            implicitFieldDeclaration.parent = parent;\n            parameter.implicitFieldDeclaration = implicitFieldDeclaration;\n            parent.members.push(implicitFieldDeclaration);\n          }\n        }\n      } else if (isGetter) {\n        if (parameters.length) {\n          this.error(\n            DiagnosticCode.A_get_accessor_cannot_have_parameters,\n            name.range\n          );\n        }\n      } else if (isSetter) {\n        if (parameters.length != 1) {\n          this.error(\n            DiagnosticCode.A_set_accessor_must_have_exactly_one_parameter,\n            name.range\n          );\n        }\n        if (parameters.length && parameters[0].initializer) {\n          this.error(\n            DiagnosticCode.A_set_accessor_parameter_cannot_have_an_initializer,\n            name.range\n          );\n        }\n      }\n\n      let returnType: CommonTypeNode | null = null;\n      if (tn.skip(Token.COLON)) {\n        if (name.kind == NodeKind.CONSTRUCTOR) {\n          this.error(\n            DiagnosticCode.Type_annotation_cannot_appear_on_a_constructor_declaration,\n            tn.range()\n          );\n        } else if (isSetter) {\n          this.error(\n            DiagnosticCode.A_set_accessor_cannot_have_a_return_type_annotation,\n            tn.range()\n          );\n        }\n        returnType = this.parseType(tn, name.kind == NodeKind.CONSTRUCTOR || isSetter);\n        if (!returnType) return null;\n      } else {\n        returnType = Node.createOmittedType(tn.range(tn.pos));\n        if (!isSetter && name.kind != NodeKind.CONSTRUCTOR) {\n          this.error(\n            DiagnosticCode.Type_expected,\n            returnType.range\n          ); // recoverable\n        }\n      }\n\n      let signature = Node.createSignature(\n        parameters,\n        returnType,\n        thisType,\n        false,\n        tn.range(signatureStart, tn.pos)\n      );\n\n      let body: Statement | null = null;\n      if (tn.skip(Token.OPENBRACE)) {\n        if (flags & CommonFlags.AMBIENT) {\n          this.error(\n            DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\n            tn.range()\n          ); // recoverable\n        } else if (flags & CommonFlags.ABSTRACT) {\n          this.error(\n            DiagnosticCode.Method_0_cannot_have_an_implementation_because_it_is_marked_abstract,\n            tn.range(), name.text\n          ); // recoverable\n        }\n        body = this.parseBlockStatement(tn, false);\n        if (!body) return null;\n      } else if (!(flags & CommonFlags.AMBIENT) && !isInterface) {\n        this.error(\n          DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n          tn.range()\n        ); // recoverable\n      }\n\n      let retMethod = Node.createMethodDeclaration(\n        name,\n        typeParameters,\n        signature,\n        body,\n        decorators,\n        flags,\n        tn.range(startPos, tn.pos)\n      );\n      tn.skip(Token.SEMICOLON);\n      return retMethod;\n\n    } else if (isConstructor) {\n      this.error(\n        DiagnosticCode.Constructor_implementation_is_missing,\n        name.range\n      );\n\n    } else if (isGetter || isSetter) {\n      this.error(\n        DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n        name.range\n      );\n\n    // field: (':' Type)? ('=' Expression)? ';'?\n    } else {\n      if (flags & CommonFlags.ABSTRACT) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(abstractStart, abstractEnd), \"abstract\"\n        ); // recoverable\n      }\n\n      if (flags & CommonFlags.GET) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(getStart, getEnd), \"get\"\n        ); // recoverable\n      }\n\n      if (flags & CommonFlags.SET) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(setStart, setEnd), \"set\"\n        ); // recoverable\n      }\n\n      let type: CommonTypeNode | null = null;\n      if (tn.skip(Token.COLON)) {\n        type = this.parseType(tn);\n        if (!type) return null;\n      } else {\n        this.error(\n          DiagnosticCode.Type_expected,\n          tn.range()\n        ); // recoverable\n      }\n      let initializer: Expression | null = null;\n      if (tn.skip(Token.EQUALS)) {\n        initializer = this.parseExpression(tn);\n        if (!initializer) return null;\n      }\n      let retField = Node.createFieldDeclaration(\n        name,\n        type,\n        initializer,\n        decorators,\n        flags,\n        tn.range(startPos, tn.pos)\n      );\n      tn.skip(Token.SEMICOLON);\n      return retField;\n    }\n    return null;\n  }\n\n  parseNamespace(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): NamespaceDeclaration | null {\n\n    // at 'namespace': Identifier '{' (Variable | Function)* '}'\n\n    if (tn.skipIdentifier()) {\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      if (tn.skip(Token.OPENBRACE)) {\n        let members = new Array<Statement>();\n        let ns = Node.createNamespaceDeclaration(\n          identifier,\n          members,\n          decorators,\n          flags,\n          tn.range(startPos, tn.pos)\n        );\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          let member = this.parseTopLevelStatement(tn, ns);\n          if (!member) return null;\n          member.parent = ns;\n          members.push(member);\n        }\n        tn.skip(Token.SEMICOLON);\n        return ns;\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"{\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseExport(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    startPos: i32\n  ): ExportStatement | null {\n\n    // at 'export': '{' ExportMember (',' ExportMember)* }' ('from' StringLiteral)? ';'?\n\n    var path: StringLiteralExpression | null = null;\n    if (tn.skip(Token.OPENBRACE)) {\n      let members = new Array<ExportMember>();\n      while (!tn.skip(Token.CLOSEBRACE)) {\n          let member = this.parseExportMember(tn);\n          if (!member) return null;\n          members.push(member);\n        if (!tn.skip(Token.COMMA)) {\n          if (tn.skip(Token.CLOSEBRACE)) {\n            break;\n          } else {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"}\"\n            );\n            return null;\n          }\n        }\n      }\n      if (tn.skip(Token.FROM)) {\n        if (tn.skip(Token.STRINGLITERAL)) {\n          path = Node.createStringLiteralExpression(tn.readString(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.String_literal_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      let ret = Node.createExportStatement(members, path, flags, tn.range(startPos, tn.pos));\n      let internalPath = ret.internalPath;\n      if (internalPath !== null && !this.seenlog.has(internalPath)) {\n        this.backlog.push(internalPath);\n        this.seenlog.add(internalPath);\n      }\n      tn.skip(Token.SEMICOLON);\n      return ret;\n    } else if (tn.skip(Token.ASTERISK)) {\n      if (tn.skip(Token.FROM)) {\n        if (tn.skip(Token.STRINGLITERAL)) {\n          path = Node.createStringLiteralExpression(tn.readString(), tn.range());\n          let ret = Node.createExportStatement(null, path, flags, tn.range(startPos, tn.pos));\n          let internalPath = assert(ret.internalPath);\n          let source = tn.source;\n          if (!source.exportPaths) source.exportPaths = new Set();\n          source.exportPaths.add(internalPath);\n          if (!this.seenlog.has(internalPath)) {\n            this.backlog.push(internalPath);\n            this.seenlog.add(internalPath);\n          }\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode.String_literal_expected,\n            tn.range()\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"from\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n    }\n    return null;\n  }\n\n  parseExportMember(\n    tn: Tokenizer\n  ): ExportMember | null {\n\n    // before: Identifier ('as' Identifier)?\n\n    if (tn.skipIdentifier()) {\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let asIdentifier: IdentifierExpression | null = null;\n      if (tn.skip(Token.AS)) {\n        if (tn.skipIdentifierName()) {\n          asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      return Node.createExportMember(\n        identifier,\n        asIdentifier,\n        asIdentifier\n          ? Range.join(identifier.range, asIdentifier.range)\n          : identifier.range\n      );\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseImport(\n    tn: Tokenizer\n  ): ImportStatement | null {\n\n    // at 'import':\n    //  ('{' (ImportMember (',' ImportMember)* '}') | ('*' 'as' Identifier)?\n    //  'from' StringLiteral ';'?\n\n    var startPos = tn.tokenPos;\n    var members: ImportDeclaration[] | null = null;\n    var namespaceName: IdentifierExpression | null = null;\n    var skipFrom = false;\n    if (tn.skip(Token.OPENBRACE)) {\n      members = new Array();\n      while (!tn.skip(Token.CLOSEBRACE)) {\n        let member = this.parseImportDeclaration(tn);\n        if (!member) return null;\n        members.push(member);\n        if (!tn.skip(Token.COMMA)) {\n          if (tn.skip(Token.CLOSEBRACE)) {\n            break;\n          } else {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"}\"\n            );\n            return null;\n          }\n        }\n      }\n    } else if (tn.skip(Token.ASTERISK)) {\n      if (tn.skip(Token.AS)) {\n        if (tn.skipIdentifier()) {\n          namespaceName = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"as\"\n        );\n        return null;\n      }\n    } else {\n      skipFrom = true;\n    }\n\n    if (skipFrom || tn.skip(Token.FROM)) {\n      if (tn.skip(Token.STRINGLITERAL)) {\n        let path = Node.createStringLiteralExpression(tn.readString(), tn.range());\n        let ret: ImportStatement;\n        if (namespaceName) {\n          assert(!members);\n          ret = Node.createImportStatementWithWildcard(namespaceName, path, tn.range(startPos, tn.pos));\n        } else {\n          ret = Node.createImportStatement(members, path, tn.range(startPos, tn.pos));\n        }\n        let internalPath = ret.internalPath;\n        if (!this.seenlog.has(internalPath)) {\n          this.backlog.push(internalPath);\n          this.seenlog.add(internalPath);\n        }\n        tn.skip(Token.SEMICOLON);\n        return ret;\n      } else {\n        this.error(\n          DiagnosticCode.String_literal_expected,\n          tn.range()\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"from\"\n      );\n    }\n    return null;\n  }\n\n  parseImportDeclaration(\n    tn: Tokenizer\n  ): ImportDeclaration | null {\n\n    // before: Identifier ('as' Identifier)?\n\n    if (tn.skipIdentifierName()) {\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let asIdentifier: IdentifierExpression | null = null;\n      if (tn.skip(Token.AS)) {\n        if (tn.skipIdentifier()) {\n          asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      return Node.createImportDeclaration(\n        identifier,\n        asIdentifier,\n        asIdentifier\n          ? Range.join(identifier.range, asIdentifier.range)\n          : identifier.range\n      );\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseExportImport(\n    tn: Tokenizer,\n    startPos: i32\n  ): ExportImportStatement | null {\n\n    // at 'export' 'import': Identifier ('=' Identifier)? ';'?\n\n    if (tn.skipIdentifier()) {\n      let asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      if (tn.skip(Token.EQUALS)) {\n        if (tn.skipIdentifier()) {\n          let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n          let ret = Node.createExportImportStatement(identifier, asIdentifier, tn.range(startPos, tn.pos));\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"=\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseStatement(\n    tn: Tokenizer,\n    topLevel: bool = false\n  ): Statement | null {\n\n    // at previous token\n\n    var state = tn.mark();\n    var token = tn.next();\n    var statement: Statement | null = null;\n    switch (token) {\n      case Token.BREAK: {\n        statement = this.parseBreak(tn);\n        break;\n      }\n      case Token.CONST: {\n        statement = this.parseVariable(tn, CommonFlags.CONST, null, tn.tokenPos);\n        break;\n      }\n      case Token.CONTINUE: {\n        statement = this.parseContinue(tn);\n        break;\n      }\n      case Token.DO: {\n        statement = this.parseDoStatement(tn);\n        break;\n      }\n      case Token.FOR: {\n        statement = this.parseForStatement(tn);\n        break;\n      }\n      case Token.IF: {\n        statement = this.parseIfStatement(tn);\n        break;\n      }\n      case Token.LET: {\n        statement = this.parseVariable(tn, CommonFlags.LET, null, tn.tokenPos);\n        break;\n      }\n      case Token.VAR: {\n        statement = this.parseVariable(tn, CommonFlags.NONE, null, tn.tokenPos);\n        break;\n      }\n      case Token.OPENBRACE: {\n        statement = this.parseBlockStatement(tn, topLevel);\n        break;\n      }\n      case Token.RETURN: {\n        if (topLevel) {\n          this.error(\n            DiagnosticCode.A_return_statement_can_only_be_used_within_a_function_body,\n            tn.range()\n          ); // recoverable\n        }\n        statement = this.parseReturn(tn);\n        break;\n      }\n      case Token.SEMICOLON: {\n        return Node.createEmptyStatement(tn.range(tn.tokenPos));\n      }\n      case Token.SWITCH: {\n        statement = this.parseSwitchStatement(tn);\n        break;\n      }\n      case Token.THROW: {\n        statement = this.parseThrowStatement(tn);\n        break;\n      }\n      case Token.TRY: {\n        statement = this.parseTryStatement(tn);\n        break;\n      }\n      case Token.VOID: {\n        statement = this.parseVoidStatement(tn);\n        break;\n      }\n      case Token.WHILE: {\n        statement = this.parseWhileStatement(tn);\n        break;\n      }\n      case Token.TYPE: { // also identifier\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\n          statement = this.parseTypeDeclaration(tn, CommonFlags.NONE, null, tn.tokenPos);\n          break;\n        }\n        // fall-through\n      }\n      default: {\n        tn.reset(state);\n        statement = this.parseExpressionStatement(tn);\n        break;\n      }\n    }\n    if (!statement) { // has been reported\n      tn.reset(state);\n      this.skipStatement(tn);\n    } else {\n      tn.discard(state);\n    }\n    return statement;\n  }\n\n  parseBlockStatement(\n    tn: Tokenizer,\n    topLevel: bool\n  ): BlockStatement | null {\n\n    // at '{': Statement* '}' ';'?\n\n    var startPos = tn.tokenPos;\n    var statements = new Array<Statement>();\n    while (!tn.skip(Token.CLOSEBRACE)) {\n      let state = tn.mark();\n      let statement = this.parseStatement(tn, topLevel);\n      if (!statement) {\n        if (tn.token == Token.ENDOFFILE) return null;\n        tn.reset(state);\n        this.skipStatement(tn);\n      } else {\n        tn.discard(state);\n        statements.push(statement);\n      }\n    }\n    var ret = Node.createBlockStatement(statements, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseBreak(\n    tn: Tokenizer\n  ): BreakStatement | null {\n\n    // at 'break': Identifier? ';'?\n\n    var identifier: IdentifierExpression | null = null;\n    if (tn.peek(true) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n      tn.next(IdentifierHandling.PREFER);\n      identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    }\n    var ret = Node.createBreakStatement(identifier, tn.range());\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseContinue(\n    tn: Tokenizer\n  ): ContinueStatement | null {\n\n    // at 'continue': Identifier? ';'?\n\n    var identifier: IdentifierExpression | null = null;\n    if (tn.peek(true) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n      tn.next(IdentifierHandling.PREFER);\n      identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    }\n    var ret = Node.createContinueStatement(identifier, tn.range());\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseDoStatement(\n    tn: Tokenizer\n  ): DoStatement | null {\n\n    // at 'do': Statement 'while' '(' Expression ')' ';'?\n\n    var startPos = tn.tokenPos;\n    var statement = this.parseStatement(tn);\n    if (!statement) return null;\n\n    if (tn.skip(Token.WHILE)) {\n\n      if (tn.skip(Token.OPENPAREN)) {\n        let condition = this.parseExpression(tn);\n        if (!condition) return null;\n\n        if (tn.skip(Token.CLOSEPAREN)) {\n          let ret = Node.createDoStatement(<Statement>statement, <Expression>condition, tn.range(startPos, tn.pos));\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"(\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"while\"\n      );\n    }\n    return null;\n  }\n\n  parseExpressionStatement(\n    tn: Tokenizer\n  ): ExpressionStatement | null {\n\n    // at previous token\n\n    var expr = this.parseExpression(tn);\n    if (!expr) return null;\n\n    var ret = Node.createExpressionStatement(expr);\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseForStatement(\n    tn: Tokenizer\n  ): ForStatement | null {\n\n    // at 'for': '(' Statement? Expression? ';' Expression? ')' Statement\n\n    var startPos = tn.tokenPos;\n\n    if (tn.skip(Token.OPENPAREN)) {\n      let initializer: Statement | null = null;\n\n      if (tn.skip(Token.CONST)) {\n        initializer = this.parseVariable(tn, CommonFlags.CONST, null, tn.tokenPos);\n      } else if (tn.skip(Token.LET)) {\n        initializer = this.parseVariable(tn, CommonFlags.LET, null, tn.tokenPos);\n      } else if (tn.skip(Token.VAR)) {\n        initializer = this.parseVariable(tn, CommonFlags.NONE, null, tn.tokenPos);\n\n      } else if (!tn.skip(Token.SEMICOLON)) {\n        initializer = this.parseExpressionStatement(tn);\n        if (!initializer) return null;\n      }\n\n      if (tn.token == Token.SEMICOLON) {\n        let condition: ExpressionStatement | null = null;\n        if (!tn.skip(Token.SEMICOLON)) {\n          condition = this.parseExpressionStatement(tn);\n          if (!condition) return null;\n        }\n\n        if (tn.token == Token.SEMICOLON) {\n          let incrementor: Expression | null = null;\n          if (!tn.skip(Token.CLOSEPAREN)) {\n            incrementor = this.parseExpression(tn);\n            if (!incrementor) return null;\n\n            if (!tn.skip(Token.CLOSEPAREN)) {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \")\"\n              );\n              return null;\n            }\n          }\n\n          let statement = this.parseStatement(tn);\n          if (!statement) return null;\n\n          return Node.createForStatement(\n            initializer,\n            condition\n              ? condition.expression\n              : null,\n            incrementor,\n            statement,\n            tn.range(startPos, tn.pos)\n          );\n\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \";\"\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \";\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  parseIfStatement(\n    tn: Tokenizer\n  ): IfStatement | null {\n\n    // at 'if': '(' Expression ')' Statement ('else' Statement)?\n\n    var startPos = tn.tokenPos;\n    if (tn.skip(Token.OPENPAREN)) {\n      let condition = this.parseExpression(tn);\n      if (!condition) return null;\n      if (tn.skip(Token.CLOSEPAREN)) {\n        let statement = this.parseStatement(tn);\n        if (!statement) return null;\n        let elseStatement: Statement | null = null;\n        if (tn.skip(Token.ELSE)) {\n          elseStatement = this.parseStatement(tn);\n          if (!elseStatement) return null;\n        }\n        return Node.createIfStatement(\n          condition,\n          statement,\n          elseStatement,\n          tn.range(startPos, tn.pos)\n        );\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \")\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  parseSwitchStatement(\n    tn: Tokenizer\n  ): SwitchStatement | null {\n\n    // at 'switch': '(' Expression ')' '{' SwitchCase* '}' ';'?\n\n    var startPos = tn.tokenPos;\n    if (tn.skip(Token.OPENPAREN)) {\n      let condition = this.parseExpression(tn);\n      if (!condition) return null;\n      if (tn.skip(Token.CLOSEPAREN)) {\n        if (tn.skip(Token.OPENBRACE)) {\n          let cases = new Array<SwitchCase>();\n          while (!tn.skip(Token.CLOSEBRACE)) {\n            let case_ = this.parseSwitchCase(tn);\n            if (!case_) return null;\n            cases.push(<SwitchCase>case_);\n          }\n          let ret = Node.createSwitchStatement(condition, cases, tn.range(startPos, tn.pos));\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"{\"\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \")\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  parseSwitchCase(\n    tn: Tokenizer\n  ): SwitchCase | null {\n\n    var startPos = tn.tokenPos;\n    var statements: Statement[],\n        statement: Statement | null;\n\n    // 'case' Expression ':' Statement*\n\n    if (tn.skip(Token.CASE)) {\n      let label = this.parseExpression(tn);\n      if (!label) return null;\n      if (tn.skip(Token.COLON)) {\n        statements = new Array<Statement>();\n        while (tn.peek() != Token.CASE && tn.nextToken != Token.DEFAULT && tn.nextToken != Token.CLOSEBRACE) {\n          statement = this.parseStatement(tn);\n          if (!statement) return null;\n          statements.push(statement);\n        }\n        return Node.createSwitchCase(label, statements, tn.range(startPos, tn.pos));\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \":\"\n        );\n      }\n\n    // 'default' ':' Statement*\n\n    } else if (tn.skip(Token.DEFAULT)) {\n      if (tn.skip(Token.COLON)) {\n        statements = new Array<Statement>();\n        while (tn.peek() != Token.CASE && tn.nextToken != Token.DEFAULT && tn.nextToken != Token.CLOSEBRACE) {\n          statement = this.parseStatement(tn);\n          if (!statement) return null;\n          statements.push(statement);\n        }\n        return Node.createSwitchCase(null, statements, tn.range(startPos, tn.pos));\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \":\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._case_or_default_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseThrowStatement(\n    tn: Tokenizer\n  ): ThrowStatement | null {\n\n    // at 'throw': Expression ';'?\n\n    var startPos = tn.tokenPos;\n    var expression = this.parseExpression(tn);\n    if (!expression) return null;\n    var ret = Node.createThrowStatement(<Expression>expression, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseTryStatement(\n    tn: Tokenizer\n  ): TryStatement | null {\n\n    // at 'try':\n    //   '{' Statement* '}'\n    //   ('catch' '(' VariableMember ')' '{' Statement* '}')?\n    //   ('finally' '{' Statement* '}'? ';'?\n\n    var startPos = tn.tokenPos;\n    var stmt: Statement | null;\n    if (tn.skip(Token.OPENBRACE)) {\n      let statements = new Array<Statement>();\n      while (!tn.skip(Token.CLOSEBRACE)) {\n        stmt = this.parseStatement(tn);\n        if (!stmt) return null;\n        statements.push(<Statement>stmt);\n      }\n      let catchVariable: IdentifierExpression | null = null;\n      let catchStatements: Statement[] | null = null;\n      let finallyStatements: Statement[] | null = null;\n      if (tn.skip(Token.CATCH)) {\n        if (!tn.skip(Token.OPENPAREN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"(\"\n          );\n          return null;\n        }\n        if (!tn.skipIdentifier()) {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n        catchVariable = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        if (!tn.skip(Token.CLOSEPAREN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n        if (!tn.skip(Token.OPENBRACE)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"{\"\n          );\n          return null;\n        }\n        catchStatements = [];\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          stmt = this.parseStatement(tn);\n          if (!stmt) return null;\n          catchStatements.push(<Statement>stmt);\n        }\n      }\n      if (tn.skip(Token.FINALLY)) {\n        if (!tn.skip(Token.OPENBRACE)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"{\"\n          );\n          return null;\n        }\n        finallyStatements = [];\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          stmt = this.parseStatement(tn);\n          if (!stmt) return null;\n          finallyStatements.push(<Statement>stmt);\n        }\n      }\n      if (!(catchStatements || finallyStatements)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"catch\"\n        );\n        return null;\n      }\n      let ret = Node.createTryStatement(\n        statements,\n        catchVariable,\n        catchStatements,\n        finallyStatements,\n        tn.range(startPos, tn.pos)\n      );\n      tn.skip(Token.SEMICOLON);\n      return ret;\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n    }\n    return null;\n  }\n\n  parseTypeDeclaration(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): TypeDeclaration | null {\n\n    // at 'type': Identifier ('<' TypeParameters '>')? '=' Type ';'?\n\n    if (tn.skipIdentifier()) {\n      let name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let typeParameters: TypeParameterNode[] | null = null;\n      if (tn.skip(Token.LESSTHAN)) {\n        typeParameters = this.parseTypeParameters(tn);\n        if (!typeParameters) return null;\n        flags |= CommonFlags.GENERIC;\n      }\n      if (tn.skip(Token.EQUALS)) {\n        let type = this.parseType(tn);\n        if (!type) return null;\n        let ret = Node.createTypeDeclaration(\n          name,\n          typeParameters,\n          type,\n          decorators,\n          flags,\n          tn.range(startPos, tn.pos)\n        );\n        tn.skip(Token.SEMICOLON);\n        return ret;\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"=\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseVoidStatement(\n    tn: Tokenizer\n  ): VoidStatement | null {\n\n    // at 'void': Expression ';'?\n\n    var startPos = tn.tokenPos;\n    var expression = this.parseExpression(tn, Precedence.GROUPING);\n    if (!expression) return null;\n    var ret = Node.createVoidStatement(expression, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseWhileStatement(\n    tn: Tokenizer\n  ): WhileStatement | null {\n\n    // at 'while': '(' Expression ')' Statement ';'?\n\n    var startPos = tn.tokenPos;\n    if (tn.skip(Token.OPENPAREN)) {\n      let expression = this.parseExpression(tn);\n      if (!expression) return null;\n      if (tn.skip(Token.CLOSEPAREN)) {\n        let statement = this.parseStatement(tn);\n        if (!statement) return null;\n        let ret = Node.createWhileStatement(expression, statement, tn.range(startPos, tn.pos));\n        tn.skip(Token.SEMICOLON);\n        return ret;\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \")\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  // expressions\n  // see: http://www.engr.mun.ca/~theo/Misc/exp_parsing.htm#climbing\n\n  parseExpressionStart(\n    tn: Tokenizer\n  ): Expression | null {\n\n    var token = tn.next(IdentifierHandling.PREFER);\n    var startPos = tn.tokenPos;\n    var precedence = determinePrecedenceStart(token);\n    if (precedence != Precedence.NONE) {\n      let operand: Expression | null;\n\n      // TODO: SpreadExpression, YieldExpression (currently become unsupported UnaryPrefixExpressions)\n\n      // NewExpression\n      if (token == Token.NEW) {\n        operand = this.parseExpression(tn, Precedence.CALL);\n        if (!operand) return null;\n        if (operand.kind == NodeKind.CALL) {\n          return Node.createNewExpression(\n            (<CallExpression>operand).expression,\n            (<CallExpression>operand).typeArguments,\n            (<CallExpression>operand).arguments,\n            tn.range(startPos, tn.pos)\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            tn.range()\n          );\n        }\n        return null;\n      } else {\n        operand = this.parseExpression(tn, precedence);\n        if (!operand) return null;\n      }\n\n      // UnaryPrefixExpression\n      if (token == Token.PLUS_PLUS || token == Token.MINUS_MINUS) {\n        if (\n          operand.kind != NodeKind.IDENTIFIER &&\n          operand.kind != NodeKind.ELEMENTACCESS &&\n          operand.kind != NodeKind.PROPERTYACCESS\n        ) {\n          this.error(\n            DiagnosticCode.The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access,\n            operand.range\n          );\n        }\n      }\n      return Node.createUnaryPrefixExpression(token, operand, tn.range(startPos, tn.pos));\n    }\n\n    var expr: Expression | null = null;\n    switch (token) {\n\n      case Token.NULL: return Node.createNullExpression(tn.range());\n      case Token.TRUE: return Node.createTrueExpression(tn.range());\n      case Token.FALSE: return Node.createFalseExpression(tn.range());\n\n      // ParenthesizedExpression\n      // FunctionExpression\n      case Token.OPENPAREN: {\n\n        // determine whether this is a function expression\n        if (tn.skip(Token.CLOSEPAREN)) { // must be a function expression (fast route)\n          return this.parseFunctionExpressionCommon(\n            tn,\n            Node.createEmptyIdentifierExpression(tn.range(startPos)),\n            [],\n            true\n          );\n        }\n        let state = tn.mark();\n        let again = true;\n        do {\n          switch (tn.next(IdentifierHandling.PREFER)) {\n\n            // function expression\n            case Token.DOT_DOT_DOT: {\n              tn.reset(state);\n              return this.parseFunctionExpression(tn);\n            }\n            // can be both\n            case Token.IDENTIFIER: {\n              tn.readIdentifier();\n              switch (tn.next()) {\n\n                // if we got here, check for arrow\n                case Token.CLOSEPAREN: {\n                  if (\n                    !tn.skip(Token.COLON) &&\n                    !tn.skip(Token.EQUALS_GREATERTHAN)\n                  ) {\n                    again = false;\n                    break;\n                  }\n                  // fall-through\n                }\n                // function expression\n                case Token.COLON: {    // type annotation\n                  tn.reset(state);\n                  return this.parseFunctionExpression(tn);\n                }\n                // optional parameter or parenthesized\n                case Token.QUESTION: {\n                  if (\n                    tn.skip(Token.COLON) ||   // optional parameter with type\n                    tn.skip(Token.COMMA) ||   // optional parameter without type\n                    tn.skip(Token.CLOSEPAREN) // last optional parameter without type\n                  ) {\n                    tn.reset(state);\n                    return this.parseFunctionExpression(tn);\n                  }\n                  again = false; // parenthesized\n                  break;\n                  }\n                case Token.COMMA: {\n                  break; // continue\n                }\n                // parenthesized expression\n                // case Token.EQUALS:  // missing type annotation for simplicity\n                default: {\n                  again = false;\n                  break;\n                }\n              }\n              break;\n            }\n            // parenthesized expression\n            default: {\n              again = false;\n              break;\n            }\n          }\n        } while (again);\n        tn.reset(state);\n\n        // parse parenthesized\n        expr = this.parseExpression(tn);\n        if (!expr) return null;\n        if (!tn.skip(Token.CLOSEPAREN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n        return Node.createParenthesizedExpression(expr, tn.range(startPos, tn.pos));\n      }\n      // ArrayLiteralExpression\n      case Token.OPENBRACKET: {\n        let elementExpressions = new Array<Expression | null>();\n        while (!tn.skip(Token.CLOSEBRACKET)) {\n          if (tn.peek() == Token.COMMA) {\n            expr = null; // omitted\n          } else {\n            expr = this.parseExpression(tn, Precedence.COMMA + 1);\n            if (!expr) return null;\n          }\n          elementExpressions.push(expr);\n          if (!tn.skip(Token.COMMA)) {\n            if (tn.skip(Token.CLOSEBRACKET)) {\n              break;\n            } else {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \"]\"\n              );\n              return null;\n            }\n          }\n        }\n        return Node.createArrayLiteralExpression(elementExpressions, tn.range(startPos, tn.pos));\n      }\n      // ObjectLiteralExpression\n      case Token.OPENBRACE: {\n        let startPos = tn.tokenPos;\n        let names = new Array<IdentifierExpression>();\n        let values = new Array<Expression>();\n        let name: IdentifierExpression;\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          if (!tn.skipIdentifier()) {\n            if (!tn.skip(Token.STRINGLITERAL)) {\n              this.error(\n                DiagnosticCode.Identifier_expected,\n                tn.range(),\n              );\n              return null;\n            }\n            name = Node.createIdentifierExpression(tn.readString(), tn.range());\n            name.set(CommonFlags.QUOTED);\n          } else {\n            name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n          }\n          names.push(name);\n          if (tn.skip(Token.COLON)) {\n            let value = this.parseExpression(tn, Precedence.COMMA + 1);\n            if (!value) return null;\n            values.push(value);\n          } else if (!name.is(CommonFlags.QUOTED)) {\n            values.push(name);\n          } else {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \":\"\n            );\n            return null;\n          }\n          if (!tn.skip(Token.COMMA)) {\n            if (tn.skip(Token.CLOSEBRACE)) {\n              break;\n            } else {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \"}\"\n              );\n              return null;\n            }\n          }\n        }\n        return Node.createObjectLiteralExpression(names, values, tn.range(startPos, tn.pos));\n      }\n      // AssertionExpression (unary prefix)\n      case Token.LESSTHAN: {\n        let toType = this.parseType(tn);\n        if (!toType) return null;\n        if (!tn.skip(Token.GREATERTHAN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \">\"\n          );\n          return null;\n        }\n        expr = this.parseExpression(tn, Precedence.CALL);\n        if (!expr) return null;\n        return Node.createAssertionExpression(\n          AssertionKind.PREFIX,\n          expr,\n          toType,\n          tn.range(startPos, tn.pos)\n        );\n      }\n      case Token.IDENTIFIER: {\n        return Node.createIdentifierExpression(tn.readIdentifier(), tn.range(startPos, tn.pos));\n      }\n      case Token.THIS: {\n        return Node.createThisExpression(tn.range(startPos, tn.pos));\n      }\n      case Token.CONSTRUCTOR: {\n        return Node.createConstructorExpression(tn.range(startPos, tn.pos));\n      }\n      case Token.SUPER: {\n        return Node.createSuperExpression(tn.range(startPos, tn.pos));\n      }\n      case Token.STRINGLITERAL: {\n        return Node.createStringLiteralExpression(tn.readString(), tn.range(startPos, tn.pos));\n      }\n      case Token.INTEGERLITERAL: {\n        return Node.createIntegerLiteralExpression(tn.readInteger(), tn.range(startPos, tn.pos));\n      }\n      case Token.FLOATLITERAL: {\n        return Node.createFloatLiteralExpression(tn.readFloat(), tn.range(startPos, tn.pos));\n      }\n      // RegexpLiteralExpression\n      // note that this also continues on invalid ones so the surrounding AST remains intact\n      case Token.SLASH: {\n        let regexpPattern = tn.readRegexpPattern(); // also reports\n        if (!tn.skip(Token.SLASH)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"/\"\n          );\n          return null;\n        }\n        return Node.createRegexpLiteralExpression(\n          regexpPattern,\n          tn.readRegexpFlags(), // also reports\n          tn.range(startPos, tn.pos)\n        );\n      }\n      case Token.FUNCTION: {\n        return this.parseFunctionExpression(tn);\n      }\n      case Token.CLASS: {\n        return this.parseClassExpression(tn);\n      }\n      default: {\n        if (token == Token.ENDOFFILE) {\n          this.error(\n            DiagnosticCode.Unexpected_end_of_text,\n            tn.range(startPos)\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Expression_expected,\n            tn.range()\n          );\n        }\n        return null;\n      }\n    }\n  }\n\n  tryParseTypeArgumentsBeforeArguments(\n    tn: Tokenizer\n  ): CommonTypeNode[] | null {\n\n    // at '<': Type (',' Type)* '>' '('\n\n    var state = tn.mark();\n    if (!tn.skip(Token.LESSTHAN)) return null;\n    var typeArguments = new Array<CommonTypeNode>();\n    do {\n      if (tn.peek() === Token.GREATERTHAN) {\n        break;\n      }\n      let type = this.parseType(tn, true, true);\n      if (!type) {\n        tn.reset(state);\n        return null;\n      }\n      typeArguments.push(type);\n    } while (tn.skip(Token.COMMA));\n    if (tn.skip(Token.GREATERTHAN) && tn.skip(Token.OPENPAREN)) {\n      return typeArguments;\n    }\n    tn.reset(state);\n    return null;\n  }\n\n  parseArguments(\n    tn: Tokenizer\n  ): Expression[] | null {\n\n    // at '(': (Expression (',' Expression)*)? ')'\n\n    var args = new Array<Expression>();\n    while (!tn.skip(Token.CLOSEPAREN)) {\n      let expr = this.parseExpression(tn, Precedence.COMMA + 1);\n      if (!expr) return null;\n      args.push(expr);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEPAREN)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n      }\n    }\n    return args;\n  }\n\n  parseExpression(\n    tn: Tokenizer,\n    precedence: Precedence = Precedence.COMMA\n  ): Expression | null {\n    assert(precedence != Precedence.NONE);\n\n    var expr = this.parseExpressionStart(tn);\n    if (!expr) return null;\n    expr = this.maybeParseCallExpression(tn, expr); // simple call like on an Identifier\n\n    var startPos = expr.range.start;\n    var token: Token;\n    var next: Expression | null = null;\n    var nextPrecedence: Precedence;\n    while (\n      (nextPrecedence = determinePrecedence(token = tn.peek())) >= precedence\n    ) { // precedence climbing\n      tn.next();\n      switch (token) {\n        // AssertionExpression\n        case Token.AS: {\n          let toType = this.parseType(tn); // reports\n          if (!toType) return null;\n          expr = Node.createAssertionExpression(\n            AssertionKind.AS,\n            expr,\n            toType,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // InstanceOfExpression\n        case Token.INSTANCEOF: {\n          let isType = this.parseType(tn); // reports\n          if (!isType) return null;\n          expr = Node.createInstanceOfExpression(\n            expr,\n            isType,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // ElementAccessExpression\n        case Token.OPENBRACKET: {\n          next = this.parseExpression(tn); // reports\n          if (!next) return null;\n          if (!tn.skip(Token.CLOSEBRACKET)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"]\"\n            );\n            return null;\n          }\n          expr = Node.createElementAccessExpression(\n            expr,\n            next,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // UnaryPostfixExpression\n        case Token.PLUS_PLUS:\n        case Token.MINUS_MINUS: {\n          if (\n            expr.kind != NodeKind.IDENTIFIER &&\n            expr.kind != NodeKind.ELEMENTACCESS &&\n            expr.kind != NodeKind.PROPERTYACCESS\n          ) {\n            this.error(\n              DiagnosticCode.The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access,\n              expr.range\n            );\n          }\n          expr = Node.createUnaryPostfixExpression(\n            token,\n            expr,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // TernaryExpression\n        case Token.QUESTION: {\n          let ifThen = this.parseExpression(tn);\n          if (!ifThen) return null;\n          if (!tn.skip(Token.COLON)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \":\"\n            );\n            return null;\n          }\n          let ifElse = this.parseExpression(tn, precedence > Precedence.COMMA\n            ? Precedence.COMMA + 1\n            : Precedence.COMMA\n          );\n          if (!ifElse) return null;\n          expr = Node.createTernaryExpression(\n            expr,\n            ifThen,\n            ifElse,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // CommaExpression\n        case Token.COMMA: {\n          let commaExprs: Expression[] = [ expr ];\n          do {\n            expr = this.parseExpression(tn, Precedence.COMMA + 1);\n            if (!expr) return null;\n            commaExprs.push(expr);\n          } while (tn.skip(Token.COMMA));\n          expr = Node.createCommaExpression(commaExprs, tn.range(startPos, tn.pos));\n          break;\n        }\n        default: {\n          next = this.parseExpression(tn,\n            isRightAssociative(token)\n              ? nextPrecedence\n              : nextPrecedence + 1\n          );\n          if (!next) return null;\n\n          // PropertyAccessExpression\n          if (token == Token.DOT) {\n            if (next.kind == NodeKind.IDENTIFIER) { // expr '.' Identifier\n              expr = Node.createPropertyAccessExpression(\n                expr,\n                <IdentifierExpression>next,\n                tn.range(startPos, tn.pos)\n              );\n            } else if (next.kind == NodeKind.CALL) { // expr '.' CallExpression\n              expr = this.joinPropertyCall(tn, startPos, expr, <CallExpression>next);\n              if (!expr) return null;\n            } else {\n              this.error(\n                DiagnosticCode.Identifier_expected,\n                next.range\n              );\n              return null;\n            }\n\n          // BinaryExpression\n          } else {\n            expr = Node.createBinaryExpression(token, expr, next, tn.range(startPos, tn.pos));\n          }\n          break;\n        }\n      }\n      expr = this.maybeParseCallExpression(tn, expr); // compound call like on an ElementAccess\n    }\n    return expr;\n  }\n\n  private joinPropertyCall(\n    tn: Tokenizer,\n    startPos: i32,\n    expr: Expression,\n    call: CallExpression\n  ): Expression | null {\n    var callee = call.expression;\n    switch (callee.kind) {\n      case NodeKind.IDENTIFIER: { // join property access and use as call target\n        call.expression = Node.createPropertyAccessExpression(\n          expr,\n          <IdentifierExpression>callee,\n          tn.range(startPos, tn.pos)\n        );\n        break;\n      }\n      case NodeKind.CALL: { // join call target und wrap the original call around it\n        let inner = this.joinPropertyCall(tn, startPos, expr, <CallExpression>callee);\n        if (!inner) return null;\n        call.expression = inner;\n        call.range = tn.range(startPos, tn.pos);\n        break;\n      }\n      default: {\n        this.error(\n          DiagnosticCode.Identifier_expected,\n          call.range\n        );\n        return null;\n      }\n    }\n    return call;\n  }\n\n  private maybeParseCallExpression(\n    tn: Tokenizer,\n    expr: Expression\n  ): Expression {\n    if (nodeIsCallable(expr.kind)) {\n      let typeArguments: CommonTypeNode[] | null = null;\n      while (\n        tn.skip(Token.OPENPAREN)\n        ||\n        nodeIsGenericCallable(expr.kind) && (typeArguments = this.tryParseTypeArgumentsBeforeArguments(tn)) !== null\n      ) {\n        let args = this.parseArguments(tn);\n        if (!args) break;\n        expr = Node.createCallExpression( // is again callable\n          expr,\n          typeArguments,\n          args,\n          tn.range(expr.range.start, tn.pos)\n        );\n      }\n    }\n    return expr;\n  }\n\n  /** Skips over a statement on errors in an attempt to reduce unnecessary diagnostic noise. */\n  skipStatement(tn: Tokenizer): void {\n    tn.peek(true);\n    if (tn.nextTokenOnNewLine) tn.next(); // if reset() to the previous line\n    do {\n      let nextToken = tn.peek(true);\n      if (\n        nextToken == Token.ENDOFFILE ||   // next step should handle this\n        nextToken == Token.SEMICOLON      // end of the statement for sure\n      ) {\n        tn.next();\n        break;\n      }\n      if (tn.nextTokenOnNewLine) break;   // end of the statement maybe\n      switch (tn.next()) {\n        case Token.IDENTIFIER: {\n          tn.readIdentifier();\n          break;\n        }\n        case Token.STRINGLITERAL: {\n          tn.readString();\n          break;\n        }\n        case Token.INTEGERLITERAL: {\n          tn.readInteger();\n          break;\n        }\n        case Token.FLOATLITERAL: {\n          tn.readFloat();\n          break;\n        }\n      }\n    } while (true);\n  }\n\n  /** Skips over a block on errors in an attempt to reduce unnecessary diagnostic noise. */\n  skipBlock(tn: Tokenizer): void {\n    // at '{': ... '}'\n    var depth = 1;\n    var again = true;\n    do {\n      switch (tn.next()) {\n        case Token.ENDOFFILE: {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"}\"\n          );\n          again = false;\n          break;\n        }\n        case Token.OPENBRACE: {\n          ++depth;\n          break;\n        }\n        case Token.CLOSEBRACE: {\n          --depth;\n          if (!depth) again = false;\n          break;\n        }\n        case Token.IDENTIFIER: {\n          tn.readIdentifier();\n          break;\n        }\n        case Token.STRINGLITERAL: {\n          tn.readString();\n          break;\n        }\n        case Token.INTEGERLITERAL: {\n          tn.readInteger();\n          break;\n        }\n        case Token.FLOATLITERAL: {\n          tn.readFloat();\n          break;\n        }\n      }\n    } while (again);\n  }\n}\n\n/** Operator precedence from least to largest. */\nexport const enum Precedence {\n  NONE,\n  COMMA,\n  SPREAD,\n  YIELD,\n  ASSIGNMENT,\n  CONDITIONAL,\n  LOGICAL_OR,\n  LOGICAL_AND,\n  BITWISE_OR,\n  BITWISE_XOR,\n  BITWISE_AND,\n  EQUALITY,\n  RELATIONAL,\n  SHIFT,\n  ADDITIVE,\n  MULTIPLICATIVE,\n  EXPONENTIATED,\n  UNARY_PREFIX,\n  UNARY_POSTFIX,\n  CALL,\n  MEMBERACCESS,\n  GROUPING\n}\n\n/** Determines the precedence of a starting token. */\nfunction determinePrecedenceStart(kind: Token): Precedence {\n  switch (kind) {\n    case Token.DOT_DOT_DOT: return Precedence.SPREAD;\n    case Token.YIELD: return Precedence.YIELD;\n    case Token.EXCLAMATION:\n    case Token.TILDE:\n    case Token.PLUS:\n    case Token.MINUS:\n    case Token.PLUS_PLUS:\n    case Token.MINUS_MINUS:\n    case Token.TYPEOF:\n    case Token.VOID:\n    case Token.DELETE: return Precedence.UNARY_PREFIX;\n    case Token.NEW: return Precedence.MEMBERACCESS;\n  }\n  return Precedence.NONE;\n}\n\n/** Determines the precende of a non-starting token. */\nfunction determinePrecedence(kind: Token): Precedence {\n  switch (kind) {\n    case Token.COMMA: return Precedence.COMMA;\n    case Token.EQUALS:\n    case Token.PLUS_EQUALS:\n    case Token.MINUS_EQUALS:\n    case Token.ASTERISK_ASTERISK_EQUALS:\n    case Token.ASTERISK_EQUALS:\n    case Token.SLASH_EQUALS:\n    case Token.PERCENT_EQUALS:\n    case Token.LESSTHAN_LESSTHAN_EQUALS:\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS:\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS:\n    case Token.AMPERSAND_EQUALS:\n    case Token.CARET_EQUALS:\n    case Token.BAR_EQUALS: return Precedence.ASSIGNMENT;\n    case Token.QUESTION: return Precedence.CONDITIONAL;\n    case Token.BAR_BAR: return Precedence.LOGICAL_OR;\n    case Token.AMPERSAND_AMPERSAND: return Precedence.LOGICAL_AND;\n    case Token.BAR: return Precedence.BITWISE_OR;\n    case Token.CARET: return Precedence.BITWISE_XOR;\n    case Token.AMPERSAND: return Precedence.BITWISE_AND;\n    case Token.EQUALS_EQUALS:\n    case Token.EXCLAMATION_EQUALS:\n    case Token.EQUALS_EQUALS_EQUALS:\n    case Token.EXCLAMATION_EQUALS_EQUALS: return Precedence.EQUALITY;\n    case Token.AS:\n    case Token.IN:\n    case Token.INSTANCEOF:\n    case Token.LESSTHAN:\n    case Token.GREATERTHAN:\n    case Token.LESSTHAN_EQUALS:\n    case Token.GREATERTHAN_EQUALS: return Precedence.RELATIONAL;\n    case Token.LESSTHAN_LESSTHAN:\n    case Token.GREATERTHAN_GREATERTHAN:\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: return Precedence.SHIFT;\n    case Token.PLUS:\n    case Token.MINUS: return Precedence.ADDITIVE;\n    case Token.ASTERISK:\n    case Token.SLASH:\n    case Token.PERCENT: return Precedence.MULTIPLICATIVE;\n    case Token.ASTERISK_ASTERISK: return Precedence.EXPONENTIATED;\n    case Token.PLUS_PLUS:\n    case Token.MINUS_MINUS: return Precedence.UNARY_POSTFIX;\n    case Token.DOT:\n    case Token.NEW:\n    case Token.OPENBRACKET: return Precedence.MEMBERACCESS;\n  }\n  return Precedence.NONE;\n}\n\n/** Determines whether a non-starting token is right associative. */\nfunction isRightAssociative(kind: Token): bool {\n  switch (kind) {\n    case Token.EQUALS:\n    case Token.PLUS_EQUALS:\n    case Token.MINUS_EQUALS:\n    case Token.ASTERISK_ASTERISK_EQUALS:\n    case Token.ASTERISK_EQUALS:\n    case Token.SLASH_EQUALS:\n    case Token.PERCENT_EQUALS:\n    case Token.LESSTHAN_LESSTHAN_EQUALS:\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS:\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS:\n    case Token.AMPERSAND_EQUALS:\n    case Token.CARET_EQUALS:\n    case Token.BAR_EQUALS:\n    case Token.QUESTION:\n    case Token.ASTERISK_ASTERISK: return true;\n    default: return false;\n  }\n}\n"],"sourceRoot":""}